// src/utils/telegram-sdk.ts
import type { TelegramUser, TelegramInitData, EnvironmentChecks } from '@/types/telegram';

/**
 * ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ SDK v3.x
 */
export function extractUserSafely(source: unknown, sourceName: string): TelegramUser | null {
  try {
    let user: TelegramUser | null = null;
    
    if (!source) {
      console.log(`üîç ${sourceName}: –∏—Å—Ç–æ—á–Ω–∏–∫ –ø—É—Å—Ç–æ–π`);
      return null;
    }
    
    // –ò—Å—Ç–æ—á–Ω–∏–∫ 1: –ü—Ä—è–º–æ–π –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (typeof source === 'object' && source !== null && 'user' in source) {
      const sourceObj = source as { user?: unknown };
      if (sourceObj.user && typeof sourceObj.user === 'object') {
        user = sourceObj.user as TelegramUser;
        console.log(`‚úÖ ${sourceName}: –Ω–∞–π–¥–µ–Ω user –æ–±—ä–µ–∫—Ç –Ω–∞–ø—Ä—è–º—É—é`);
      }
    }
    // –ò—Å—Ç–æ—á–Ω–∏–∫ 2: tgWebAppData —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    else if (typeof source === 'object' && source !== null && 'tgWebAppData' in source) {
      const sourceObj = source as { tgWebAppData?: { user?: unknown } };
      if (sourceObj.tgWebAppData?.user && typeof sourceObj.tgWebAppData.user === 'object') {
        user = sourceObj.tgWebAppData.user as TelegramUser;
        console.log(`‚úÖ ${sourceName}: –Ω–∞–π–¥–µ–Ω user –≤ tgWebAppData`);
      }
    }
    // –ò—Å—Ç–æ—á–Ω–∏–∫ 3: –°—Ç—Ä–æ–∫–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç initData
    else if (typeof source === 'string') {
      const params = new URLSearchParams(source);
      const userStr = params.get('user');
      if (userStr) {
        user = JSON.parse(userStr) as TelegramUser;
        console.log(`‚úÖ ${sourceName}: user –∏–∑–≤–ª–µ—á–µ–Ω –∏–∑ —Å—Ç—Ä–æ–∫–∏`);
      }
    }
    // –ò—Å—Ç–æ—á–Ω–∏–∫ 4: –û–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    else if (typeof source === 'object' && source !== null) {
      // –ò—â–µ–º user –≤ –ª—é–±–æ–º –º–µ—Å—Ç–µ –æ–±—ä–µ–∫—Ç–∞
      const findUserInObject = (obj: Record<string, unknown>): TelegramUser | null => {
        if (obj.user && typeof obj.user === 'object') return obj.user as TelegramUser;
        if (obj.initData && typeof obj.initData === 'object') {
          const initDataObj = obj.initData as Record<string, unknown>;
          if (initDataObj.user && typeof initDataObj.user === 'object') {
            return initDataObj.user as TelegramUser;
          }
        }
        if (obj.webAppData && typeof obj.webAppData === 'object') {
          const webAppDataObj = obj.webAppData as Record<string, unknown>;
          if (webAppDataObj.user && typeof webAppDataObj.user === 'object') {
            return webAppDataObj.user as TelegramUser;
          }
        }
        
        // –ü–æ–∏—Å–∫ –≤ –≥–ª—É–±–∏–Ω—É
        for (const key in obj) {
          if (typeof obj[key] === 'object' && obj[key] !== null) {
            const found = findUserInObject(obj[key] as Record<string, unknown>);
            if (found) return found;
          }
        }
        return null;
      };
      
      user = findUserInObject(source as Record<string, unknown>);
      if (user) {
        console.log(`‚úÖ ${sourceName}: user –Ω–∞–π–¥–µ–Ω –≤ –æ–±—ä–µ–∫—Ç–µ (–≥–ª—É–±–æ–∫–∏–π –ø–æ–∏—Å–∫)`);
      }
    }
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (user && typeof user === 'object' && user !== null) {
      const userObj = user as unknown as Record<string, unknown>;
      if (userObj.id && userObj.first_name) {
        console.log(`‚úÖ ${sourceName}: –≤–∞–ª–∏–¥–Ω—ã–π user:`, {
          id: userObj.id,
          name: userObj.first_name,
          username: userObj.username
        });
        return user;
      }
    }
    
    if (user) {
      console.warn(`‚ö†Ô∏è ${sourceName}: –Ω–∞–π–¥–µ–Ω user –Ω–æ –æ–Ω –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π:`, user);
    }
    
    return null;
  } catch (error) {
    console.error(`‚ùå ${sourceName}: –æ—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è user:`, error);
    return null;
  }
}

/**
 * ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–µ–¥—ã Telegram —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ç–∏–ø–∏–∑–∞—Ü–∏–µ–π
 */
export function checkTelegramEnvironment(): { 
  isLikelyTelegram: boolean; 
  checks: EnvironmentChecks; 
  positiveChecks: number 
} {
  if (typeof window === 'undefined') {
    const emptyChecks: EnvironmentChecks = {
      hasWebApp: false,
      hasInitData: false,
      hasWebAppInUrl: false,
      hasTelegramUA: false,
      hasTelegramReferrer: false,
      hasWebAppObject: false
    };
    return { isLikelyTelegram: false, checks: emptyChecks, positiveChecks: 0 };
  }

  const environmentChecks: EnvironmentChecks = {
    hasWebApp: !!(window as any)?.Telegram?.WebApp,
    hasInitData: !!(window as any)?.Telegram?.WebApp?.initData,
    hasWebAppInUrl: window.location.href.includes('tgWebApp'),
    hasTelegramUA: navigator.userAgent.includes('TelegramBot') || 
                   navigator.userAgent.includes('Telegram') ||
                   navigator.userAgent.includes('tgWebApp'),
    hasTelegramReferrer: document.referrer.includes('telegram'),
    hasWebAppObject: typeof (window as any)?.Telegram?.WebApp?.ready === 'function'
  };
  
  const positiveChecks = Object.values(environmentChecks).filter(Boolean).length;
  const isLikelyTelegram = positiveChecks >= 2;
  
  return { isLikelyTelegram, checks: environmentChecks, positiveChecks };
}

/**
 * ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–æ–∑–¥–∞–Ω–∏–µ mock –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è fallback
 */
export function createMockUser(): { user: TelegramUser; initData: TelegramInitData; rawInitData: string } {
  const mockUser: TelegramUser = {
    id: Math.floor(Math.random() * 1000000000),
    first_name: '–ì–µ–æ—Ä–≥–∏–π',
    last_name: '–¢–∞–∫—Ç–∞—Ä–æ–≤',
    username: 'taktarovgv',
    language_code: 'ru',
    is_premium: false,
    allows_write_to_pm: true,
    photo_url: 'https://t.me/i/userpic/320/4FPEE4tmP3ATHa57u6MqTDih13LTOiMoKoLDRG4PnSA.svg'
  };

  const initData: TelegramInitData = {
    user: mockUser,
    auth_date: Math.floor(Date.now() / 1000),
    hash: '89d6079ad6762351f38c6dbbc41bb53048019256a9443988af7a48bcad16ba31',
    start_param: 'debug',
    chat_type: 'sender',
    chat_instance: '8428209589180549439',
    isMock: true,
    isDevFallback: true
  };
  
  const rawInitData = new URLSearchParams([
    ['user', JSON.stringify(mockUser)],
    ['hash', '89d6079ad6762351f38c6dbbc41bb53048019256a9443988af7a48bcad16ba31'],
    ['auth_date', Math.floor(Date.now() / 1000).toString()],
    ['start_param', 'debug'],
    ['chat_type', 'sender'],
    ['chat_instance', '8428209589180549439'],
  ]).toString();

  return { user: mockUser, initData, rawInitData };
}

/**
 * ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram WebApp
 */
export function setupTelegramWebApp(): void {
  if (typeof window === 'undefined' || !(window as any)?.Telegram?.WebApp) {
    return;
  }

  const tg = (window as any).Telegram.WebApp;
  console.log('üéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram WebApp...');
  
  try {
    // –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    if (typeof tg.ready === 'function') {
      tg.ready();
      console.log('‚úÖ WebApp.ready() –≤—ã–ø–æ–ª–Ω–µ–Ω');
    }
    
    if (typeof tg.expand === 'function') {
      tg.expand();
      console.log('‚úÖ WebApp.expand() –≤—ã–ø–æ–ª–Ω–µ–Ω');
    }
    
    // –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    const safeFunctions = [
      { name: 'disableVerticalSwipes', fn: () => tg.disableVerticalSwipes?.() },
      { name: 'setHeaderColor', fn: () => tg.setHeaderColor?.('#ffffff') },
      { name: 'setBottomBarColor', fn: () => tg.setBottomBarColor?.('#ffffff') },
      { name: 'enableClosingConfirmation', fn: () => tg.enableClosingConfirmation?.() }
    ];

    safeFunctions.forEach(({ name, fn }) => {
      try {
        fn();
        console.log(`‚úÖ ${name} –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ`);
      } catch (err) {
        console.log(`‚ÑπÔ∏è ${name} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π)`);
      }
    });
  } catch (err) {
    console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram WebApp:', err);
  }
}
