// src/utils/telegram-environment.ts

/**
 * ‚úÖ –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è Telegram —Å—Ä–µ–¥—ã –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ deep linking
 * –†–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É LaunchParamsRetrieveError –≤ –±—Ä–∞—É–∑–µ—Ä–µ
 */

interface TelegramEnvironmentDetection {
  isTelegramEnvironment: boolean;
  confidence: number;
  checks: Record<string, boolean>;
  userAgent: string;
  reasons: string[];
}

/**
 * ‚úÖ –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ Telegram —Å—Ä–µ–¥—ã
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏
 */
export function detectTelegramEnvironment(): TelegramEnvironmentDetection {
  if (typeof window === 'undefined') {
    return {
      isTelegramEnvironment: false,
      confidence: 0,
      checks: {},
      userAgent: '',
      reasons: ['Server-side rendering']
    };
  }

  const ua = navigator.userAgent;
  const urlParams = new URLSearchParams(window.location.search);
  const reasons: string[] = [];
  
  // ‚úÖ –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è Telegram —Å—Ä–µ–¥—ã
  const checks = {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: Telegram WebApp –æ–±—ä–µ–∫—Ç –¥–æ—Å—Ç—É–ø–µ–Ω
    hasWebApp: !!(window as any)?.Telegram?.WebApp,
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: initData –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ WebApp
    hasInitData: !!(window as any)?.Telegram?.WebApp?.initData,
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ 3: WebApp –≤–µ—Ä—Å–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞
    hasWebAppVersion: !!(window as any)?.Telegram?.WebApp?.version,
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ 4: URL —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ç Telegram
    hasWebAppParams: urlParams.has('tgWebAppData') || 
                    urlParams.has('tgWebAppVersion') || 
                    urlParams.has('tgWebAppPlatform'),
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ 5: User Agent —Å–æ–¥–µ—Ä–∂–∏—Ç Telegram –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã
    hasTelegramUA: ua.includes('TelegramBot') || 
                  ua.includes('Telegram-') ||
                  ua.includes('tgWebApp'),
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ 6: URL —Å–æ–¥–µ—Ä–∂–∏—Ç tgWebApp –≤ pathname –∏–ª–∏ search
    hasWebAppInUrl: window.location.href.includes('tgWebApp') ||
                   window.location.search.includes('tgWebApp'),
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ 7: Referrer –æ—Ç Telegram –¥–æ–º–µ–Ω–æ–≤
    hasTelegramReferrer: document.referrer.includes('telegram.org') ||
                        document.referrer.includes('t.me'),
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ 8: WebApp platform –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞
    hasWebAppPlatform: !!(window as any)?.Telegram?.WebApp?.platform,
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ 9: WebApp isExpanded –¥–æ—Å—Ç—É–ø–Ω–æ
    hasWebAppExpanded: typeof (window as any)?.Telegram?.WebApp?.isExpanded !== 'undefined'
  };

  // ‚úÖ –ü–æ–¥—Å—á–µ—Ç –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è reasons
  let positiveChecks = 0;
  Object.entries(checks).forEach(([key, value]) => {
    if (value) {
      positiveChecks++;
      reasons.push(`‚úÖ ${key}: ${value}`);
    } else {
      reasons.push(`‚ùå ${key}: false`);
    }
  });

  // ‚úÖ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
  const totalChecks = Object.keys(checks).length;
  const confidence = positiveChecks / totalChecks;
  
  // ‚úÖ –°—á–∏—Ç–∞–µ–º —á—Ç–æ –≤ Telegram –µ—Å–ª–∏:
  // - –ï—Å—Ç—å WebApp –æ–±—ä–µ–∫—Ç –ò initData (–≤—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å)
  // - –ò–ª–∏ –º–∏–Ω–∏–º—É–º 3 –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ (—Å—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å)
  const highConfidence = checks.hasWebApp && checks.hasInitData;
  const mediumConfidence = positiveChecks >= 3;
  const isTelegramEnvironment = highConfidence || mediumConfidence;

  if (highConfidence) {
    reasons.push('üéØ HIGH CONFIDENCE: WebApp + initData detected');
  } else if (mediumConfidence) {
    reasons.push(`üîç MEDIUM CONFIDENCE: ${positiveChecks}/${totalChecks} checks passed`);
  } else {
    reasons.push(`‚ö†Ô∏è LOW CONFIDENCE: Only ${positiveChecks}/${totalChecks} checks passed`);
  }

  return {
    isTelegramEnvironment,
    confidence,
    checks,
    userAgent: ua,
    reasons
  };
}

/**
 * ‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Å—Å—ã–ª–∫–∏ –¥–ª—è Telegram Mini App
 */
export function generateTelegramDeepLink(startParam?: string): string {
  const botUsername = 'ThreeGIS_bot';
  const appName = 'app';
  
  if (startParam) {
    return `https://t.me/${botUsername}/${appName}?startapp=${encodeURIComponent(startParam)}`;
  }
  
  return `https://t.me/${botUsername}/${appName}`;
}

/**
 * ‚úÖ –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç–∫—Ä—ã—Ç–∏—è –≤ Telegram
 */
export function attemptTelegramOpen(startParam?: string, userAgent?: string): void {
  const telegramUrl = generateTelegramDeepLink(startParam);
  const ua = userAgent || navigator.userAgent;
  
  console.log('üîó Attempting to open in Telegram:', telegramUrl);
  
  // ‚úÖ –°—Ç—Ä–∞—Ç–µ–≥–∏—è 1: –ü—Ä—è–º–æ–π –ø–µ—Ä–µ—Ö–æ–¥ (—Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –¥–µ—Å–∫—Ç–æ–ø–µ –∏ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –º–æ–±–∏–ª—å–Ω—ã—Ö)
  const directRedirect = () => {
    try {
      window.location.href = telegramUrl;
    } catch (error) {
      console.error('Direct redirect failed:', error);
    }
  };
  
  // ‚úÖ –°—Ç—Ä–∞—Ç–µ–≥–∏—è 2: –ù–µ–≤–∏–¥–∏–º—ã–π iframe (–¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π)
  const iframeRedirect = () => {
    try {
      const iframe = document.createElement('iframe');
      iframe.style.display = 'none';
      iframe.style.position = 'absolute';
      iframe.style.left = '-9999px';
      iframe.src = telegramUrl;
      document.body.appendChild(iframe);
      
      // –£–¥–∞–ª—è–µ–º iframe —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É
      setTimeout(() => {
        if (iframe.parentNode) {
          document.body.removeChild(iframe);
        }
      }, 1000);
    } catch (error) {
      console.error('Iframe redirect failed:', error);
    }
  };
  
  // ‚úÖ –°—Ç—Ä–∞—Ç–µ–≥–∏—è 3: –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å—Å—ã–ª–∫–∏
  const linkRedirect = () => {
    try {
      const link = document.createElement('a');
      link.href = telegramUrl;
      link.target = '_blank';
      link.rel = 'noopener noreferrer';
      link.click();
    } catch (error) {
      console.error('Link redirect failed:', error);
    }
  };
  
  // ‚úÖ –í—ã–±–∏—Ä–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
  if (ua.includes('Mobile') || ua.includes('Android') || ua.includes('iPhone')) {
    // –ú–æ–±–∏–ª—å–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: –ø—Ä–æ–±—É–µ–º iframe, –∑–∞—Ç–µ–º –ø—Ä—è–º–æ–π —Ä–µ–¥–∏—Ä–µ–∫—Ç
    iframeRedirect();
    setTimeout(directRedirect, 1500);
  } else {
    // –î–µ—Å–∫—Ç–æ–ø: –ø—Ä—è–º–æ–π —Ä–µ–¥–∏—Ä–µ–∫—Ç –∏ —Å—Å—ã–ª–∫–∞ –∫–∞–∫ fallback
    setTimeout(directRedirect, 500);
    setTimeout(linkRedirect, 2000);
  }
}

/**
 * ‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ startParam –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
 */
export function extractStartParam(): string | null {
  if (typeof window === 'undefined') return null;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º URL –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
  const urlParams = new URLSearchParams(window.location.search);
  const startParam = urlParams.get('startapp') || urlParams.get('start') || urlParams.get('startParam');
  
  if (startParam) {
    return startParam;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º hash –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
  if (window.location.hash) {
    const hashParams = new URLSearchParams(window.location.hash.substring(1));
    const hashStartParam = hashParams.get('startapp') || hashParams.get('start');
    if (hashStartParam) {
      return hashStartParam;
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º Telegram WebApp startParam
  try {
    const webApp = (window as any)?.Telegram?.WebApp;
    if (webApp?.initDataUnsafe?.start_parameter) {
      return webApp.initDataUnsafe.start_parameter;
    }
  } catch (error) {
    console.warn('Error extracting startParam from WebApp:', error);
  }
  
  return null;
}

/**
 * ‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Telegram WebApp API
 */
export function isTelegramWebAppAvailable(): boolean {
  if (typeof window === 'undefined') return false;
  
  try {
    const webApp = (window as any)?.Telegram?.WebApp;
    return !!(webApp && typeof webApp.ready === 'function');
  } catch (error) {
    console.warn('Error checking Telegram WebApp availability:', error);
    return false;
  }
}

/**
 * ‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ä–µ–¥–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
 */
export function logEnvironmentInfo(): void {
  if (process.env.NODE_ENV !== 'development') return;
  
  const detection = detectTelegramEnvironment();
  
  console.group('üîç Telegram Environment Detection');
  console.log('Result:', detection.isTelegramEnvironment ? '‚úÖ Telegram' : '‚ùå Browser');
  console.log('Confidence:', `${Math.round(detection.confidence * 100)}%`);
  console.log('User Agent:', detection.userAgent);
  console.log('Checks:', detection.checks);
  console.log('Reasons:', detection.reasons);
  
  if (isTelegramWebAppAvailable()) {
    const webApp = (window as any).Telegram.WebApp;
    console.log('WebApp Info:', {
      version: webApp.version,
      platform: webApp.platform,
      isExpanded: webApp.isExpanded,
      viewportHeight: webApp.viewportHeight,
      initData: webApp.initData ? 'Present' : 'Missing'
    });
  }
  
  console.groupEnd();
}
