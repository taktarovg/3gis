'use client';

import { useState, useRef } from 'react';
import { ChatCard } from './ChatCard';
import { ChatTypeSelector } from './ChatTypeSelector';
import { LocationSelectors } from './LocationSelectors';
import { Search, AlertCircle } from 'lucide-react';
import { useDebounce } from '@/hooks/use-debounce';
import { useChats } from '@/hooks/use-chats';

export function ChatsList() {
  // –°—á–µ—Ç—á–∏–∫ —Ä–µ–Ω–¥–µ—Ä–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  const renderCount = useRef(0);
  renderCount.current += 1;
  
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedType, setSelectedType] = useState<'GROUP' | 'CHAT' | 'CHANNEL'>();
  const [selectedStateId, setSelectedStateId] = useState<string>();
  const [selectedCityId, setSelectedCityId] = useState<number>();

  const debouncedSearch = useDebounce(searchQuery, 300);

  // –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ä–µ–Ω–¥–µ—Ä –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  console.log(`üé® [RENDER-${renderCount.current}] ChatsList: Component render`);
  console.log(`üìã [RENDER-${renderCount.current}] Current state:`, {
    searchQuery,
    debouncedSearch,
    selectedType,
    selectedStateId,
    selectedCityId
  });

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ö—É–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —á–∞—Ç–æ–≤
  const {
    chats,
    loading,
    error,
    pagination,
    stats,
    refetch,
    loadMore,
    hasNextPage,
    lastRequestId
  } = useChats({
    type: selectedType,
    stateId: selectedStateId,
    cityId: selectedCityId,
    search: debouncedSearch,
    limit: 20
  });

  console.log(`üîç [RENDER-${renderCount.current}] Hook result:`, {
    chatsCount: chats.length,
    loading,
    error,
    hasNextPage,
    lastRequestId
  });

  const handleJoinChat = async (chatId: number) => {
    const joinId = Math.random().toString(36).substring(7);
    console.log(`üöÄ [JOIN-${joinId}] ChatsList: Joining chat ${chatId}`);
    
    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–µ—Ä–µ—Ö–æ–¥–∞
      await fetch(`/api/chats/${chatId}/join`, { method: 'POST' });
      console.log(`‚úÖ [JOIN-${joinId}] Statistics sent for chat ${chatId}`);
      
      // –ù–∞—Ö–æ–¥–∏–º —á–∞—Ç –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É
      const chat = chats.find(c => c.id === chatId);
      if (chat) {
        if (chat.username) {
          // –û—Ç–∫—Ä—ã–≤–∞–µ–º Telegram —Å—Å—ã–ª–∫—É
          console.log(`üîó [JOIN-${joinId}] Opening Telegram link: t.me/${chat.username}`);
          window.open(`https://t.me/${chat.username}`, '_blank');
        } else {
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
          console.log(`üí° [JOIN-${joinId}] No username, showing instruction for "${chat.title}"`);
          alert(`–î–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ "${chat.title}" –æ—Ç–∫—Ä–æ–π—Ç–µ Telegram –∏ –Ω–∞–π–¥–∏—Ç–µ —ç—Ç—É –≥—Ä—É–ø–ø—É —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫.`);
        }
      } else {
        console.warn(`‚ö†Ô∏è [JOIN-${joinId}] Chat ${chatId} not found in current list`);
      }
    } catch (error) {
      console.error(`‚ùå [JOIN-${joinId}] Error tracking join for chat ${chatId}:`, error);
      // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —Ç–∞–∫ –∫–∞–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–∞
    }
  };

  const getResultText = () => {
    if (!pagination || pagination.totalCount === 0) return '';
    
    const typeText = selectedType === 'GROUP' ? '–≥—Ä—É–ø–ø' :
                    selectedType === 'CHAT' ? '—á–∞—Ç–æ–≤' :
                    selectedType === 'CHANNEL' ? '–∫–∞–Ω–∞–ª–æ–≤' :
                    '—Å–æ–æ–±—â–µ—Å—Ç–≤';
    
    let locationText = '';
    if (selectedCityId && selectedStateId) {
      locationText = ' –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ';
    } else if (selectedStateId) {
      locationText = ' –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —à—Ç–∞—Ç–µ';
    }
    
    const searchText = debouncedSearch ? ` –ø–æ –∑–∞–ø—Ä–æ—Å—É "${debouncedSearch}"` : '';
    
    return `–ù–∞–π–¥–µ–Ω–æ: ${pagination.totalCount} ${typeText}${locationText}${searchText}`;
  };

  // –ü–æ–¥—Å—á–µ—Ç —á–∞—Ç–æ–≤ –ø–æ —Ç–∏–ø–∞–º –¥–ª—è —Å–µ–ª–µ–∫—Ç–æ—Ä–∞
  const getCounts = (): Record<string, number> => {
    if (!stats) return { GROUP: 0, CHAT: 0, CHANNEL: 0 };
    
    // –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –ø–æ —Ç–∏–ø–∞–º
    return {
      GROUP: stats.totalChats || 0,
      CHAT: 0,
      CHANNEL: 0
    };
  };

  // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –æ—à–∏–±–∫–∏
  if (error) {
    console.log(`‚ùå [RENDER-${renderCount.current}] ChatsList: Rendering error state`);
    return (
      <div className="flex flex-col items-center justify-center py-12 text-center">
        <AlertCircle className="w-12 h-12 text-red-400 mb-4" />
        <h3 className="text-lg font-medium text-gray-900 mb-2">
          –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏
        </h3>
        <p className="text-gray-600 mb-4 max-w-md">
          {error}
        </p>
        <button
          onClick={() => {
            console.log(`üîÑ [RETRY] ChatsList: Manual retry button clicked`);
            refetch();
          }}
          className="bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600 transition-colors"
        >
          –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
        </button>
      </div>
    );
  }

  console.log(`‚úÖ [RENDER-${renderCount.current}] ChatsList: Rendering main content`);

  return (
    <div className="space-y-4">
      {/* Debug info –≤ dev —Ä–µ–∂–∏–º–µ */}
      {process.env.NODE_ENV === 'development' && (
        <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-3 text-xs">
          <div className="font-semibold text-yellow-800 mb-1">üêõ Debug Info:</div>
          <div className="text-yellow-700 space-y-1">
            <div>Renders: {renderCount.current}</div>
            <div>Chats: {chats.length}</div>
            <div>Loading: {loading ? 'Yes' : 'No'}</div>
            <div>Last Request ID: {lastRequestId || 'None'}</div>
            <div>Has Next Page: {hasNextPage ? 'Yes' : 'No'}</div>
          </div>
        </div>
      )}

      {/* –ü–æ–∏—Å–∫ */}
      <div className="relative">
        <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
        <input
          type="text"
          placeholder="–ü–æ–∏—Å–∫ –≥—Ä—É–ø–ø, —á–∞—Ç–æ–≤, –∫–∞–Ω–∞–ª–æ–≤..."
          value={searchQuery}
          onChange={(e) => {
            console.log(`üîç [SEARCH] ChatsList: Search query changed to: "${e.target.value}"`);
            setSearchQuery(e.target.value);
          }}
          className="w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors text-base"
        />
      </div>

      {/* –§–∏–ª—å—Ç—Ä—ã –ª–æ–∫–∞—Ü–∏–∏ */}
      <LocationSelectors
        selectedStateId={selectedStateId}
        selectedCityId={selectedCityId}
        onStateChange={(newStateId) => {
          console.log(`üó∫Ô∏è [LOCATION] ChatsList: State changed to: ${newStateId}`);
          setSelectedStateId(newStateId);
          // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≥–æ—Ä–æ–¥ –ø—Ä–∏ —Å–º–µ–Ω–µ —à—Ç–∞—Ç–∞
          if (selectedCityId) {
            console.log(`üó∫Ô∏è [LOCATION] ChatsList: Resetting city due to state change`);
            setSelectedCityId(undefined);
          }
        }}
        onCityChange={(newCityId) => {
          console.log(`üèôÔ∏è [LOCATION] ChatsList: City changed to: ${newCityId}`);
          setSelectedCityId(newCityId);
        }}
      />

      {/* –°–µ–ª–µ–∫—Ç–æ—Ä —Ç–∏–ø–æ–≤ */}
      <ChatTypeSelector
        selectedType={selectedType}
        onTypeChange={(newType) => {
          console.log(`üìã [TYPE] ChatsList: Type changed to: ${newType}`);
          setSelectedType(newType);
        }}
        counts={getCounts()}
      />

      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ */}
      {!loading && (
        <div className="flex items-center justify-between text-sm text-gray-600 py-2">
          <span>{getResultText()}</span>
          {pagination && pagination.totalCount > 0 && (
            <span className="text-xs bg-gray-100 px-2 py-1 rounded-full">
              –°—Ç—Ä. {pagination.page} –∏–∑ {pagination.totalPages}
            </span>
          )}
        </div>
      )}

      {/* –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ */}
      {loading && chats.length === 0 ? (
        <div className="space-y-4">
          {[...Array(6)].map((_, i) => (
            <div key={i} className="bg-gray-100 rounded-xl h-32 animate-pulse" />
          ))}
        </div>
      ) : chats.length > 0 ? (
        <div className="space-y-4">
          {chats.map((chat) => (
            <ChatCard
              key={chat.id}
              chat={chat}
              onJoin={handleJoinChat}
            />
          ))}
          
          {/* –ö–Ω–æ–ø–∫–∞ "–ó–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ" */}
          {hasNextPage && (
            <div className="text-center py-4">
              <button
                onClick={() => {
                  console.log(`üìÑ [LOAD-MORE] ChatsList: Load more button clicked`);
                  loadMore();
                }}
                disabled={loading}
                className="bg-blue-500 text-white px-6 py-3 rounded-lg hover:bg-blue-600 disabled:opacity-50 transition-colors"
              >
                {loading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : '–ó–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ'}
              </button>
            </div>
          )}
        </div>
      ) : (
        <div className="text-center py-12">
          <div className="text-gray-400 text-6xl mb-4">üîç</div>
          <h3 className="text-lg font-medium text-gray-900 mb-2">
            –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
          </h3>
          <p className="text-gray-600 max-w-md mx-auto">
            {debouncedSearch 
              ? '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤'
              : '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤'
            }
          </p>
          {(selectedType || selectedStateId || selectedCityId || debouncedSearch) && (
            <button
              onClick={() => {
                console.log(`üîÑ [RESET] ChatsList: Reset all filters button clicked`);
                setSelectedType(undefined);
                setSelectedStateId(undefined);
                setSelectedCityId(undefined);
                setSearchQuery('');
              }}
              className="mt-4 text-blue-600 hover:text-blue-700 font-medium"
            >
              –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã
            </button>
          )}
        </div>
      )}
    </div>
  );
}