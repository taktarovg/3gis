import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { MapPin } from 'lucide-react';
import type { BusinessFormData } from '@/app/tg/add-business/page';

interface AddressStepProps {
  formData: BusinessFormData;
  setFormData: (data: BusinessFormData) => void;
}

export function AddressStep({ formData, setFormData }: AddressStepProps) {
  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center">
          <MapPin className="w-5 h-5 mr-2" />
          –ê–¥—Ä–µ—Å –∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã
        </CardTitle>
        <CardDescription>
          –ì–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∑–∞–≤–µ–¥–µ–Ω–∏–µ
        </CardDescription>
      </CardHeader>
      <CardContent className="space-y-4">
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            –ü–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å *
          </label>
          <input
            type="text"
            value={formData.address}
            onChange={(e) => setFormData({...formData, address: e.target.value})}
            className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
            placeholder="1273 Brighton Beach Ave, Brooklyn, NY 11235"
          />
        </div>
        
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            –ì–æ—Ä–æ–¥ *
          </label>
          <select 
            value={formData.city}
            onChange={(e) => setFormData({...formData, city: e.target.value})}
            className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
          >
            <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥</option>
            <option value="New York">–ù—å—é-–ô–æ—Ä–∫</option>
            <option value="Los Angeles">–õ–æ—Å-–ê–Ω–¥–∂–µ–ª–µ—Å</option>
            <option value="Chicago">–ß–∏–∫–∞–≥–æ</option>
            <option value="Miami">–ú–∞–π–∞–º–∏</option>
            <option value="San Francisco">–°–∞–Ω-–§—Ä–∞–Ω—Ü–∏—Å–∫–æ</option>
            <option value="Boston">–ë–æ—Å—Ç–æ–Ω</option>
            <option value="Seattle">–°–∏—ç—Ç–ª</option>
            <option value="Philadelphia">–§–∏–ª–∞–¥–µ–ª—å—Ñ–∏—è</option>
          </select>
        </div>
        
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            –¢–µ–ª–µ—Ñ–æ–Ω
          </label>
          <input
            type="tel"
            value={formData.phone}
            onChange={(e) => setFormData({...formData, phone: e.target.value})}
            className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
            placeholder="(718) 555-0123"
          />
        </div>
        
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            –í–µ–±-—Å–∞–π—Ç
          </label>
          <input
            type="url"
            value={formData.website}
            onChange={(e) => setFormData({...formData, website: e.target.value})}
            className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
            placeholder="https://example.com"
          />
        </div>

        {/* Additional features */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-3">
            –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É–¥–æ–±—Å—Ç–≤–∞
          </label>
          <div className="grid grid-cols-2 gap-3">
            {[
              { key: 'parking', label: 'üÖøÔ∏è –ü–∞—Ä–∫–æ–≤–∫–∞' },
              { key: 'wifi', label: 'üì∂ Wi-Fi' },
              { key: 'delivery', label: 'üöö –î–æ—Å—Ç–∞–≤–∫–∞' },
              { key: 'takeout', label: 'ü•° –ù–∞ –≤—ã–Ω–æ—Å' },
              { key: 'cards', label: 'üí≥ –ö–∞—Ä—Ç—ã' },
              { key: 'accessible', label: '‚ôø –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å' }
            ].map((feature) => (
              <label key={feature.key} className="flex items-center space-x-2 cursor-pointer">
                <input
                  type="checkbox"
                  checked={formData.features.includes(feature.key)}
                  onChange={(e) => {
                    if (e.target.checked) {
                      setFormData({
                        ...formData,
                        features: [...formData.features, feature.key]
                      });
                    } else {
                      setFormData({
                        ...formData,
                        features: formData.features.filter((f: string) => f !== feature.key)
                      });
                    }
                  }}
                  className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                />
                <span className="text-sm">{feature.label}</span>
              </label>
            ))}
          </div>
        </div>
      </CardContent>
    </Card>
  );
}