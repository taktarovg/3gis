import { useState, useEffect } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { MapPin, Loader2 } from 'lucide-react';\nimport type { BusinessFormData } from '@/app/tg/add-business/page';\n\ninterface State {\n  id: string;\n  name: string;\n  region: string;\n}\n\ninterface City {\n  id: number;\n  name: string;\n  stateId: string;\n  state?: {\n    name: string;\n  };\n}\n\ninterface AddressStepProps {\n  formData: BusinessFormData;\n  setFormData: (data: BusinessFormData) => void;\n}\n\nexport function AddressStep({ formData, setFormData }: AddressStepProps) {\n  const [states, setStates] = useState<State[]>([]);\n  const [cities, setCities] = useState<City[]>([]);\n  const [selectedState, setSelectedState] = useState<string>('');\n  const [selectedCityId, setSelectedCityId] = useState<string>('');\n  const [loading, setLoading] = useState(false);\n  const [citiesLoading, setCitiesLoading] = useState(false);\n\n  // Load states on mount\n  useEffect(() => {\n    const fetchStates = async () => {\n      setLoading(true);\n      try {\n        const response = await fetch('/api/states');\n        const statesData = await response.json();\n        setStates(statesData);\n      } catch (err) {\n        console.error('Error loading states:', err);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchStates();\n  }, []);\n\n  // Load cities when state is selected\n  useEffect(() => {\n    if (selectedState) {\n      setCitiesLoading(true);\n      const fetchCities = async () => {\n        try {\n          const response = await fetch(`/api/cities?state=${selectedState}`);\n          const citiesData = await response.json();\n          setCities(citiesData);\n        } catch (err) {\n          console.error('Error loading cities:', err);\n        } finally {\n          setCitiesLoading(false);\n        }\n      };\n      \n      fetchCities();\n    } else {\n      setCities([]);\n      setCitiesLoading(false);\n    }\n  }, [selectedState]);\n\n  // Initialize state/city from formData if available\n  useEffect(() => {\n    if (formData.city && cities.length > 0) {\n      const city = cities.find(c => c.name === formData.city);\n      if (city) {\n        setSelectedCityId(city.id.toString());\n        if (!selectedState) {\n          setSelectedState(city.stateId);\n        }\n      }\n    }\n  }, [cities, formData.city, selectedState]);\n\n  // Handle state selection\n  const handleStateChange = (stateId: string) => {\n    setCities([]); // Clear cities immediately\n    setSelectedState(stateId);\n    setSelectedCityId('');\n    // Clear city in form data\n    setFormData({...formData, city: ''});\n  };\n\n  // Handle city selection\n  const handleCityChange = (cityId: string) => {\n    setSelectedCityId(cityId);\n    const selectedCity = cities.find(c => c.id.toString() === cityId);\n    if (selectedCity) {\n      setFormData({...formData, city: selectedCity.name});\n    }\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center\">\n          <MapPin className=\"w-5 h-5 mr-2\" />\n          Address and Contacts\n        </CardTitle>\n        <CardDescription>\n          Where is the business located\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <div>\n          <Label htmlFor=\"address\">Full Address *</Label>\n          <Input\n            id=\"address\"\n            value={formData.address}\n            onChange={(e) => setFormData({...formData, address: e.target.value})}\n            placeholder=\"1273 Brighton Beach Ave, Brooklyn, NY 11235\"\n            className=\"mt-2\"\n          />\n        </div>\n        \n        <div>\n          <Label htmlFor=\"state\">State *</Label>\n          <Select value={selectedState} onValueChange={handleStateChange} disabled={loading}>\n            <SelectTrigger className=\"mt-2\">\n              <SelectValue placeholder={loading ? \"Loading states...\" : \"First select state\"} />\n            </SelectTrigger>\n            <SelectContent className=\"max-h-60 overflow-y-auto\">\n              {states.map((state) => (\n                <SelectItem key={state.id} value={state.id}>\n                  {state.name} ({state.region})\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n\n        {selectedState && (\n          <div>\n            <Label htmlFor=\"city\">City *</Label>\n            <Select value={selectedCityId} onValueChange={handleCityChange} disabled={citiesLoading}>\n              <SelectTrigger className=\"mt-2\">\n                <SelectValue placeholder={citiesLoading ? \"Loading cities...\" : \"Select city\"} />\n              </SelectTrigger>\n              <SelectContent className=\"max-h-60 overflow-y-auto\">\n                {citiesLoading ? (\n                  <SelectItem value=\"loading\" disabled>\n                    <div className=\"flex items-center\">\n                      <Loader2 className=\"h-4 w-4 animate-spin mr-2\" />\n                      Loading...\n                    </div>\n                  </SelectItem>\n                ) : (\n                  cities.map((city) => (\n                    <SelectItem key={city.id} value={city.id.toString()}>\n                      {city.name}\n                    </SelectItem>\n                  ))\n                )}\n              </SelectContent>\n            </Select>\n            <p className=\"text-xs text-gray-500 mt-1\">\n              Cities in {states.find(s => s.id === selectedState)?.name}\n            </p>\n          </div>\n        )}\n        \n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <div>\n            <Label htmlFor=\"phone\">Phone</Label>\n            <Input\n              id=\"phone\"\n              type=\"tel\"\n              value={formData.phone}\n              onChange={(e) => setFormData({...formData, phone: e.target.value})}\n              placeholder=\"(718) 555-0123\"\n              className=\"mt-2\"\n            />\n          </div>\n          \n          <div>\n            <Label htmlFor=\"website\">Website</Label>\n            <Input\n              id=\"website\"\n              type=\"url\"\n              value={formData.website}\n              onChange={(e) => setFormData({...formData, website: e.target.value})}\n              placeholder=\"https://example.com\"\n              className=\"mt-2\"\n            />\n          </div>\n        </div>\n\n        {/* Additional features */}\n        <div>\n          <Label className=\"text-sm font-medium text-gray-700 mb-3\">\n            Additional Features\n          </Label>\n          <div className=\"grid grid-cols-2 gap-3 mt-3\">\n            {[\n              { key: 'parking', label: '🅿️ Parking' },\n              { key: 'wifi', label: '📶 Wi-Fi' },\n              { key: 'delivery', label: '🚚 Delivery' },\n              { key: 'takeout', label: '🥡 Takeout' },\n              { key: 'cards', label: '💳 Cards' },\n              { key: 'accessible', label: '♿ Accessible' }\n            ].map((feature) => (\n              <label key={feature.key} className=\"flex items-center space-x-2 cursor-pointer\">\n                <input\n                  type=\"checkbox\"\n                  checked={formData.features.includes(feature.key)}\n                  onChange={(e) => {\n                    if (e.target.checked) {\n                      setFormData({\n                        ...formData,\n                        features: [...formData.features, feature.key]\n                      });\n                    } else {\n                      setFormData({\n                        ...formData,\n                        features: formData.features.filter((f: string) => f !== feature.key)\n                      });\n                    }\n                  }}\n                  className=\"rounded border-gray-300 text-blue-600 focus:ring-blue-500\"\n                />\n                <span className=\"text-sm\">{feature.label}</span>\n              </label>\n            ))}\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}"