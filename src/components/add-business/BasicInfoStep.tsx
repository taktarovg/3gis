import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Building, Crown } from 'lucide-react';

interface BasicInfoStepProps {
  formData: any;
  setFormData: (data: any) => void;
  isOwnerType: boolean;
}

export function BasicInfoStep({ formData, setFormData, isOwnerType }: BasicInfoStepProps) {
  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center">
          <Building className="w-5 h-5 mr-2" />
          –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        </CardTitle>
        <CardDescription>
          –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –∑–∞–≤–µ–¥–µ–Ω–∏–∏
        </CardDescription>
      </CardHeader>
      <CardContent className="space-y-4">
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è *
          </label>
          <input
            type="text"
            value={formData.name}
            onChange={(e) => setFormData({...formData, name: e.target.value})}
            className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –†–µ—Å—Ç–æ—Ä–∞–Ω –†—É—Å—Å–∫–∏–π –¥–æ–º"
          />
        </div>
        
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            –ö–∞—Ç–µ–≥–æ—Ä–∏—è *
          </label>
          <select 
            value={formData.category}
            onChange={(e) => setFormData({...formData, category: e.target.value})}
            className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
          >
            <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é</option>
            <option value="restaurants">üçΩÔ∏è –†–µ—Å—Ç–æ—Ä–∞–Ω—ã –∏ –∫–∞—Ñ–µ</option>
            <option value="healthcare">‚öïÔ∏è –ú–µ–¥–∏—Ü–∏–Ω–∞</option>
            <option value="legal">‚öñÔ∏è –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ —É—Å–ª—É–≥–∏</option>
            <option value="beauty">üíÑ –ö—Ä–∞—Å–æ—Ç–∞ –∏ –∑–¥–æ—Ä–æ–≤—å–µ</option>
            <option value="auto">üîß –ê–≤—Ç–æ—Å–µ—Ä–≤–∏—Å—ã</option>
            <option value="finance">üè¶ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —É—Å–ª—É–≥–∏</option>
            <option value="education">üéì –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ</option>
            <option value="realestate">üè† –ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å</option>
          </select>
        </div>
        
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
          </label>
          <textarea
            value={formData.description}
            onChange={(e) => setFormData({...formData, description: e.target.value})}
            className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
            rows={3}
            placeholder="–ö—Ä–∞—Ç–∫–æ –æ–ø–∏—à–∏—Ç–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ, –∫—É—Ö–Ω—é, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é..."
          />
        </div>

        {/* Language selection */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            –Ø–∑—ã–∫–∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
          </label>
          <div className="flex flex-wrap gap-2">
            {['ru', 'en', 'es', 'zh'].map((lang) => {
              const labels = {ru: 'üá∑üá∫ –†—É—Å—Å–∫–∏–π', en: 'üá∫üá∏ English', es: 'üá™üá∏ Espa√±ol', zh: 'üá®üá≥ ‰∏≠Êñá'};
              const isSelected = formData.languages.includes(lang);
              
              return (
                <button
                  key={lang}
                  type="button"
                  onClick={() => {
                    if (isSelected) {
                      setFormData({
                        ...formData,
                        languages: formData.languages.filter(l => l !== lang)
                      });
                    } else {
                      setFormData({
                        ...formData,
                        languages: [...formData.languages, lang]
                      });
                    }
                  }}
                  className={`px-3 py-2 rounded-lg text-sm font-medium border transition-colors ${
                    isSelected 
                      ? 'bg-blue-100 border-blue-500 text-blue-700' 
                      : 'bg-white border-gray-300 text-gray-700 hover:bg-gray-50'
                  }`}
                >
                  {labels[lang]}
                </button>
              );
            })}
          </div>
        </div>

        {isOwnerType && (
          <div className="bg-blue-50 p-4 rounded-lg">
            <div className="flex items-start">
              <Crown className="w-5 h-5 text-blue-600 mr-2 mt-0.5" />
              <div>
                <h4 className="font-medium text-blue-900 mb-1">–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤–ª–∞–¥–µ–Ω–∏—è</h4>
                <p className="text-sm text-blue-700">
                  –ù–∞ —Å–ª–µ–¥—É—é—â–µ–º —à–∞–≥–µ –º—ã –ø–æ–ø—Ä–æ—Å–∏–º –¥–æ–∫—É–º–µ–Ω—Ç—ã, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–µ, —á—Ç–æ –≤—ã —è–≤–ª—è–µ—Ç–µ—Å—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –∏–ª–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª–µ–º –∑–∞–≤–µ–¥–µ–Ω–∏—è.
                </p>
              </div>
            </div>
          </div>
        )}
      </CardContent>
    </Card>
  );
}