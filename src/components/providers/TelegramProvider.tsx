'use client';

import { createContext, useContext, useEffect, useState, type PropsWithChildren } from 'react';
import { init, backButton, mainButton } from '@telegram-apps/sdk-react';
import { useTelegramAuth, useTelegramEnvironment } from '@/hooks/useTelegramAuth';

// ‚úÖ SDK v3.x: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å SSR —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å—é

// ‚úÖ SDK v3.x: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ init() –∏ mount()

interface TelegramContextValue {
  isReady: boolean;
  user: any;
  isAuthenticated: boolean;
  isTelegramEnvironment: boolean;
  error: string | null;
}

const TelegramContext = createContext<TelegramContextValue>({
  isReady: false,
  user: null,
  isAuthenticated: false,
  isTelegramEnvironment: false,
  error: null
});

export function TelegramProvider({ children }: PropsWithChildren) {
  const [isReady, setIsReady] = useState(false);
  const [sdkInitialized, setSdkInitialized] = useState(false);
  const { isTelegramEnvironment, isDevelopment } = useTelegramEnvironment();
  
  useEffect(() => {
    // ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SDK v3.x —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
    if (typeof window !== 'undefined') {
      let initSuccess = false;
      
      try {
        // ‚úÖ –®–∞–≥ 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SDK (–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û)
        init();
        console.log('‚úÖ Telegram SDK v3.x –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        
        // ‚úÖ –®–∞–≥ 2: –ú–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω—É–∂–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        try {
          // –ú–æ–Ω—Ç–∏—Ä—É–µ–º BackButton –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
          if (backButton && typeof backButton.mount === 'function') {
            backButton.mount();
            console.log('‚úÖ BackButton —Å–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω');
          }
          
          // –ú–æ–Ω—Ç–∏—Ä—É–µ–º MainButton –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
          if (mainButton && typeof mainButton.mount === 'function') {
            mainButton.mount();
            console.log('‚úÖ MainButton —Å–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω');
          }
        } catch (mountError) {
          console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:', mountError);
        }
        
        // ‚úÖ –®–∞–≥ 3: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram WebApp (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
        const tg = (window as any)?.Telegram?.WebApp;
        if (tg) {
          tg.ready();
          tg.expand();
          
          // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Mini App
          if (tg.disableVerticalSwipes) {
            tg.disableVerticalSwipes();
          }
          
          if (tg.setHeaderColor) {
            tg.setHeaderColor('#ffffff');
          }
          
          console.log('‚úÖ Telegram WebApp –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
        } else if (isDevelopment) {
          // Development mode: –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π mock
          console.log('üîß Development: Telegram WebApp –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω, —Ä–∞–±–æ—Ç–∞–µ–º –≤ browser —Ä–µ–∂–∏–º–µ');
        }
        
        initSuccess = true;
        
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram SDK:', error);
        
        // –î–ª—è development —Ä–µ–∂–∏–º–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É
        if (isDevelopment) {
          console.log('üîß Development: –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –±–µ–∑ SDK');
          initSuccess = true;
        }
      }
      
      setSdkInitialized(initSuccess);
      setIsReady(true);
    }
  }, [isDevelopment, isTelegramEnvironment]);
  
  if (!isReady) {
    return (
      <div className="flex items-center justify-center min-h-screen bg-gray-50">
        <div className="text-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-4"></div>
          <p className="text-gray-600">–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram SDK...</p>
        </div>
      </div>
    );
  }
  
  return (
    <TelegramContextProvider sdkInitialized={sdkInitialized}>
      {children}
    </TelegramContextProvider>
  );
}

function TelegramContextProvider({ 
  children, 
  sdkInitialized 
}: PropsWithChildren & { sdkInitialized: boolean }) {
  // ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Ö—É–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  const authData = useTelegramAuth();
  const { isTelegramEnvironment } = useTelegramEnvironment();
  
  // ‚úÖ –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  const contextValue: TelegramContextValue = {
    isReady: !authData.isLoading && sdkInitialized, // –ò—Å–ø–æ–ª—å–∑—É–µ–º isLoading –≤–º–µ—Å—Ç–æ isInitialized
    user: authData.user,
    isAuthenticated: authData.isAuthenticated,
    isTelegramEnvironment,
    error: authData.error
  };
  
  return (
    <TelegramContext.Provider value={contextValue}>
      {children}
    </TelegramContext.Provider>
  );
}

export function useTelegram() {
  const context = useContext(TelegramContext);
  if (!context) {
    throw new Error('useTelegram must be used within TelegramProvider');
  }
  return context;
}

// ‚úÖ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è Telegram (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π)
export function TelegramStatus() {
  const { isReady, user, isTelegramEnvironment, error } = useTelegram();
  
  if (error) {
    return (
      <div className="bg-red-100 border border-red-400 text-red-700 px-3 py-2 rounded text-sm">
        <strong className="font-bold">–û—à–∏–±–∫–∞:</strong>
        <span className="block sm:inline"> {error}</span>
      </div>
    );
  }
  
  if (!isReady) {
    return (
      <div className="bg-yellow-100 border border-yellow-400 text-yellow-700 px-3 py-2 rounded text-sm">
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...
      </div>
    );
  }
  
  return (
    <div className={`px-3 py-2 rounded text-sm ${
      isTelegramEnvironment 
        ? 'bg-green-100 border-green-400 text-green-700' 
        : 'bg-blue-100 border-blue-400 text-blue-700'
    }`}>
      <strong className="font-bold">
        {isTelegramEnvironment ? '‚úÖ Telegram' : 'üñ•Ô∏è Browser'}
      </strong>
      {user && (
        <span className="block sm:inline">
          {' '}- {user.firstName} {user.lastName}
        </span>
      )}
    </div>
  );
}
