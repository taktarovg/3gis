// src/components/providers/TelegramProvider.tsx
'use client';

import { createContext, useContext, useEffect, useState, type PropsWithChildren } from 'react';
import { EnvironmentDetector } from '@/components/environment/EnvironmentDetector';

// ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã —Å–æ–≥–ª–∞—Å–Ω–æ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ SDK v3.x
// https://docs.telegram-mini-apps.com/packages/telegram-apps-sdk-react/3-x

interface TelegramContextValue {
  isReady: boolean;
  user: any;
  isAuthenticated: boolean;
  isTelegramEnvironment: boolean;
  error: string | null;
  initData: any;
}

// ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Ç–∏–ø–∏–∑–∞—Ü–∏—è –¥–ª—è SDK v3.x —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
interface LaunchParamsV3 {
  tgWebAppData?: {
    user?: {
      id: number;
      first_name?: string;
      last_name?: string;
      username?: string;
      language_code?: string;
      is_premium?: boolean;
      photo_url?: string;
    };
    auth_date?: number;
    query_id?: string;
    hash?: string;
    start_param?: string;
    chat_type?: string;
    chat_instance?: string;
  };
  tgWebAppThemeParams?: any;
  tgWebAppVersion?: string;
  tgWebAppPlatform?: string;
  tgWebAppBotInline?: boolean;
  [key: string]: any;
}

const TelegramContext = createContext<TelegramContextValue>({
  isReady: false,
  user: null,
  isAuthenticated: false,
  isTelegramEnvironment: false,
  error: null,
  initData: null
});

/**
 * ‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram SDK v3.x —Å –¥–µ—Ç–µ–∫—Ü–∏–µ–π —Å—Ä–µ–¥—ã
 * –û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ @telegram-apps/sdk v3.10.1
 * –°–æ–≤–º–µ—Å—Ç–∏–º–æ —Å Next.js 15.3.3 –∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏ React Hooks
 */
export function TelegramProvider({ children }: PropsWithChildren) {
  return (
    <EnvironmentDetector>
      <TelegramProviderInner>
        {children}
      </TelegramProviderInner>
    </EnvironmentDetector>
  );
}

function TelegramProviderInner({ children }: PropsWithChildren) {
  const [state, setState] = useState<TelegramContextValue>({
    isReady: false,
    user: null,
    isAuthenticated: false,
    isTelegramEnvironment: false,
    error: null,
    initData: null
  });

  // ‚úÖ –°—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
  const [initAttempts, setInitAttempts] = useState(0);
  const maxAttempts = 3;

  useEffect(() => {
    const initializeTelegramSDK = async () => {
      try {
        console.log(`üöÄ –ü–æ–ø—ã—Ç–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ${initAttempts + 1}/${maxAttempts} Telegram SDK v3.x...`);
        
        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ SDK v3.x –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        // –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: https://docs.telegram-mini-apps.com/platform/init-data
        const { retrieveLaunchParams } = await import('@telegram-apps/sdk');
        
        // ‚úÖ –ü–æ–ª—É—á–∞–µ–º launch –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ–≥–ª–∞—Å–Ω–æ SDK v3.x –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        const launchParams = retrieveLaunchParams() as LaunchParamsV3;
        console.log('‚úÖ Launch params retrieved (SDK v3.x):', launchParams);
        
        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ SDK v3.x
        let user = null;
        let parsedInitData = null;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ tgWebAppData (–Ω–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ v3.x)
        if (launchParams && launchParams.tgWebAppData) {
          const webAppData = launchParams.tgWebAppData;
          
          if (webAppData.user) {
            user = webAppData.user;
            parsedInitData = webAppData;
            
            console.log('‚úÖ Extracted user data (tgWebAppData):', { 
              hasUser: !!user, 
              userId: user?.id,
              userName: user?.first_name,
              structure: 'tgWebAppData (v3.x)'
            });
          } else {
            console.log('‚ö†Ô∏è tgWebAppData found but no user data');
          }
        } else {
          console.log('‚ö†Ô∏è No tgWebAppData found - –≤–æ–∑–º–æ–∂–Ω–æ –Ω–µ –≤ Telegram —Å—Ä–µ–¥–µ');
          
          // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ production –∏ –º—ã –≤ development, —Å–æ–∑–¥–∞–µ–º mock –¥–∞–Ω–Ω—ã–µ
          if (process.env.NODE_ENV === 'development') {
            throw new Error('No Telegram data - switching to mock mode');
          }
        }
        
        setState({
          isReady: true,
          user: user || null,
          isAuthenticated: !!user,
          isTelegramEnvironment: true,
          error: null,
          initData: {
            parsed: parsedInitData,
            launchParams: launchParams
          }
        });

        // ‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ WebApp —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        const tg = (window as any)?.Telegram?.WebApp;
        if (tg) {
          console.log('üéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram WebApp...');
          
          // –ë–∞–∑–æ–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
          tg.ready();
          tg.expand();
          
          // ‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
          const safeFeatures = [
            { name: 'disableVerticalSwipes', call: () => tg.disableVerticalSwipes() },
            { name: 'setHeaderColor', call: () => tg.setHeaderColor('#ffffff') },
            { name: 'requestFullscreen', call: () => tg.requestFullscreen && tg.requestFullscreen() },
            { name: 'setBottomBarColor', call: () => tg.setBottomBarColor && tg.setBottomBarColor('#ffffff') }
          ];

          safeFeatures.forEach(({ name, call }) => {
            try {
              call();
              console.log(`‚úÖ ${name} –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ`);
            } catch (err) {
              console.warn(`‚ö†Ô∏è ${name} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ:`, err);
            }
          });
        }

        console.log('‚úÖ Telegram SDK v3.x —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        
      } catch (error) {
        console.error(`‚ùå –ü–æ–ø—ã—Ç–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ${initAttempts + 1}/${maxAttempts} –Ω–µ —É–¥–∞–ª–∞—Å—å:`, error);
        
        // ‚úÖ –í development —Ä–µ–∂–∏–º–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º mock –¥–∞–Ω–Ω—ã–µ
        if (process.env.NODE_ENV === 'development') {
          console.log('üîß Development mode: –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ mock –¥–∞–Ω–Ω—ã–µ');
          
          // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è SDK v3.x —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
          const { mockTelegramEnv, parseInitData } = await import('@telegram-apps/sdk');
          
          // –°–æ–∑–¥–∞–µ–º mock initData —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
          const initDataRaw = new URLSearchParams([
            ['user', JSON.stringify({
              id: Math.floor(Math.random() * 1000000000),
              first_name: 'Test',
              last_name: 'User',
              username: 'testuser',
              language_code: 'ru',
              is_premium: false,
            })],
            ['hash', '89d6079ad6762351f38c6dbbc41bb53048019256a9443988af7a48bcad16ba31'],
            ['auth_date', Math.floor(Date.now() / 1000).toString()],
            ['start_param', 'debug'],
            ['chat_type', 'sender'],
            ['chat_instance', '8428209589180549439'],
          ]).toString();
          
          // ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ mockTelegramEnv –¥–ª—è SDK v3.x
          mockTelegramEnv({
            themeParams: {
              accentTextColor: '#6ab2f2',
              bgColor: '#17212b',
              buttonColor: '#5288c1',
              buttonTextColor: '#ffffff',
              destructiveTextColor: '#ec3942',
              headerBgColor: '#17212b',
              hintColor: '#708499',
              linkColor: '#6ab3f3',
              secondaryBgColor: '#232e3c',
              sectionBgColor: '#17212b',
              sectionHeaderTextColor: '#6ab3f3',
              subtitleTextColor: '#708499',
              textColor: '#f5f5f5',
            },
            initData: parseInitData(initDataRaw),
            initDataRaw,
            version: '8.0',
            platform: 'tdesktop',
          });
          
          // –ü–æ–≤—Ç–æ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —Å mock –¥–∞–Ω–Ω—ã–º–∏
          const { retrieveLaunchParams } = await import('@telegram-apps/sdk');
          const launchParams = retrieveLaunchParams() as LaunchParamsV3;
          
          setState({
            isReady: true,
            user: launchParams.tgWebAppData?.user || null,
            isAuthenticated: true,
            isTelegramEnvironment: false, // –£–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ —ç—Ç–æ mock
            error: null,
            initData: {
              parsed: launchParams.tgWebAppData,
              launchParams: launchParams,
              isMock: true
            }
          });
          
          console.log('‚úÖ Mock environment —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        } else {
          // –í production –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
          if (initAttempts < maxAttempts - 1) {
            setInitAttempts(prev => prev + 1);
            return; // –ë—É–¥–µ—Ç retry —á–µ—Ä–µ–∑ useEffect
          }
          
          setState(prev => ({
            ...prev,
            isReady: true,
            error: '–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Telegram SDK. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–æ —á–µ—Ä–µ–∑ Telegram.'
          }));
        }
      }
    };

    // ‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
    if (typeof window !== 'undefined') {
      // –£–≤–µ–ª–∏—á–∏–≤–∞—é—â–∞—è—Å—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è retry
      const delay = initAttempts * 1000 + 500;
      const timeoutId = setTimeout(initializeTelegramSDK, delay);
      
      return () => clearTimeout(timeoutId);
    }
  }, [initAttempts]);

  // ‚úÖ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –≤–æ –≤—Ä–µ–º—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  if (!state.isReady) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-50">
        <div className="text-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-4"></div>
          <p className="text-gray-600">
            –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram SDK...
            {initAttempts > 0 && (
              <span className="block text-sm text-gray-500 mt-1">
                –ü–æ–ø—ã—Ç–∫–∞ {initAttempts + 1} –∏–∑ {maxAttempts}
              </span>
            )}
          </p>
        </div>
      </div>
    );
  }

  return (
    <TelegramContext.Provider value={state}>
      {children}
    </TelegramContext.Provider>
  );
}

export function useTelegram() {
  const context = useContext(TelegramContext);
  if (!context) {
    throw new Error('useTelegram must be used within TelegramProvider');
  }
  return context;
}

/**
 * ‚úÖ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ Telegram (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ development —Ä–µ–∂–∏–º–µ
 */
export function TelegramStatus() {
  const { isReady, user, isTelegramEnvironment, error, initData } = useTelegram();
  
  // ‚úÖ –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
  if (process.env.NODE_ENV === 'production') {
    return null;
  }
  
  if (error) {
    return (
      <div className="fixed bottom-4 left-4 bg-red-100 border border-red-400 text-red-700 px-3 py-2 rounded text-sm max-w-xs z-50">
        <strong className="font-bold">–û—à–∏–±–∫–∞ SDK:</strong>
        <span className="block text-xs mt-1">{error}</span>
      </div>
    );
  }
  
  if (!isReady) {
    return (
      <div className="fixed bottom-4 left-4 bg-yellow-100 border border-yellow-400 text-yellow-700 px-3 py-2 rounded text-sm z-50">
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SDK...
      </div>
    );
  }
  
  const isMock = initData?.isMock;
  
  return (
    <div className={`fixed bottom-4 left-4 px-3 py-2 rounded text-sm max-w-xs z-50 border ${
      isTelegramEnvironment 
        ? 'bg-green-100 border-green-400 text-green-700' 
        : isMock
        ? 'bg-blue-100 border-blue-400 text-blue-700'
        : 'bg-yellow-100 border-yellow-400 text-yellow-700'
    }`}>
      <strong className="font-bold">
        {isTelegramEnvironment ? '‚úÖ Telegram SDK v3.x' : 
         isMock ? 'üîß Mock Mode (v3.x)' : 'üñ•Ô∏è Browser Mode'}
      </strong>
      {user && (
        <span className="block text-xs mt-1">
          {user.first_name || user.firstName} {user.last_name || user.lastName}
          {(user.username) && ` (@${user.username})`}
        </span>
      )}
      {isMock && (
        <span className="block text-xs mt-1 text-blue-600">
          Development mock data
        </span>
      )}
    </div>
  );
}

/**
 * ‚úÖ –•—É–∫ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
 */
export function useTelegramEnvironment() {
  const { isTelegramEnvironment } = useTelegram();
  
  return {
    isTelegramEnvironment,
    isWebApp: isTelegramEnvironment,
    isDevelopment: process.env.NODE_ENV === 'development'
  };
}

/**
 * ‚úÖ –•—É–∫ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
 */
export function useTelegramAuth() {
  const { user, isAuthenticated, error, isReady, initData } = useTelegram();
  
  return {
    user,
    isAuthenticated,
    error,
    isLoading: !isReady,
    initData: initData?.parsed,
    webAppData: initData?.parsed,
    launchParams: initData?.launchParams
  };
}