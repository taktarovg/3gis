'use client';\n\nimport { useState, useEffect, useRef } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { RefreshCw, CheckCircle, AlertTriangle, XCircle } from 'lucide-react';\n\n/**\n * ‚úÖ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Ä–µ–Ω–¥–µ—Ä–æ–≤\n * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ–Ω–¥–µ—Ä–æ–≤ useChats —Ö—É–∫–∞ –∏ ClientProvider\n */\nexport function InfiniteLoopTester() {\n  const [isActive, setIsActive] = useState(false);\n  const [testResults, setTestResults] = useState<{\n    status: 'idle' | 'testing' | 'passed' | 'failed';\n    renderCount: number;\n    duration: number;\n    message: string;\n  }>({ status: 'idle', renderCount: 0, duration: 0, message: '' });\n  \n  const testStartTime = useRef<number>(0);\n  const renderCounter = useRef(0);\n  const intervalRef = useRef<NodeJS.Timeout | null>(null);\n\n  const startTest = () => {\n    console.log('üß™ [TEST] Starting infinite loop prevention test...');\n    \n    setIsActive(true);\n    setTestResults({ status: 'testing', renderCount: 0, duration: 0, message: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...' });\n    testStartTime.current = Date.now();\n    renderCounter.current = 0;\n    \n    // –°—á–∏—Ç–∞–µ–º —Ä–µ–Ω–¥–µ—Ä—ã –≤ –∫–æ–Ω—Å–æ–ª–∏\n    const originalLog = console.log;\n    let renderCount = 0;\n    \n    // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –ª–æ–≥–∏ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Ä–µ–Ω–¥–µ—Ä–æ–≤\n    console.log = (...args) => {\n      const message = args.join(' ');\n      if (message.includes('[HOOK-') && message.includes('useChats: Effect triggered')) {\n        renderCount++;\n        console.log(`üéØ [TEST] Detected hook render #${renderCount}`);\n      }\n      originalLog.apply(console, args);\n    };\n    \n    // –¢–µ—Å—Ç –¥–ª–∏—Ç—Å—è 10 —Å–µ–∫—É–Ω–¥\n    intervalRef.current = setInterval(() => {\n      const duration = Date.now() - testStartTime.current;\n      \n      setTestResults(prev => ({\n        ...prev,\n        renderCount,\n        duration: Math.round(duration / 1000),\n      }));\n      \n      // –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ—Å—Ç —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥\n      if (duration >= 10000) {\n        clearInterval(intervalRef.current!);\n        console.log = originalLog; // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º console.log\n        \n        // –û—Ü–µ–Ω–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã\n        const finalStatus = renderCount > 20 ? 'failed' : 'passed';\n        const message = finalStatus === 'passed' \n          ? `‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω! ${renderCount} —Ä–µ–Ω–¥–µ—Ä–æ–≤ –∑–∞ 10 —Å–µ–∫` \n          : `‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω! ${renderCount} —Ä–µ–Ω–¥–µ—Ä–æ–≤ –∑–∞ 10 —Å–µ–∫ (–Ω–æ—Ä–º–∞ ‚â§20)`;\n        \n        setTestResults({\n          status: finalStatus,\n          renderCount,\n          duration: 10,\n          message\n        });\n        \n        setIsActive(false);\n        console.log(`üß™ [TEST] Test completed: ${message}`);\n      }\n    }, 100);\n  };\n  \n  const stopTest = () => {\n    if (intervalRef.current) {\n      clearInterval(intervalRef.current);\n    }\n    setIsActive(false);\n    setTestResults({ status: 'idle', renderCount: 0, duration: 0, message: '' });\n  };\n  \n  useEffect(() => {\n    return () => {\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n      }\n    };\n  }, []);\n  \n  const getStatusIcon = () => {\n    switch (testResults.status) {\n      case 'testing': return <RefreshCw className=\"w-4 h-4 animate-spin\" />;\n      case 'passed': return <CheckCircle className=\"w-4 h-4 text-green-500\" />;\n      case 'failed': return <XCircle className=\"w-4 h-4 text-red-500\" />;\n      default: return <AlertTriangle className=\"w-4 h-4 text-yellow-500\" />;\n    }\n  };\n  \n  const getStatusBadge = () => {\n    switch (testResults.status) {\n      case 'testing': return <Badge variant=\"secondary\">–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...</Badge>;\n      case 'passed': return <Badge variant=\"default\" className=\"bg-green-500\">–ü—Ä–æ–π–¥–µ–Ω</Badge>;\n      case 'failed': return <Badge variant=\"destructive\">–ü—Ä–æ–≤–∞–ª–µ–Ω</Badge>;\n      default: return <Badge variant=\"outline\">–ì–æ—Ç–æ–≤ –∫ —Ç–µ—Å—Ç—É</Badge>;\n    }\n  };\n  \n  return (\n    <div className=\"fixed bottom-4 left-4 bg-white border border-gray-200 rounded-lg p-4 shadow-lg z-50 min-w-[300px]\">\n      <div className=\"flex items-center justify-between mb-3\">\n        <div className=\"flex items-center gap-2\">\n          {getStatusIcon()}\n          <span className=\"font-semibold text-gray-800\">–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏</span>\n        </div>\n        {getStatusBadge()}\n      </div>\n      \n      <div className=\"space-y-2 text-sm text-gray-600 mb-4\">\n        <div className=\"flex justify-between\">\n          <span>–†–µ–Ω–¥–µ—Ä—ã —Ö—É–∫–∞:</span>\n          <span className=\"font-mono font-semibold\">{testResults.renderCount}</span>\n        </div>\n        <div className=\"flex justify-between\">\n          <span>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</span>\n          <span className=\"font-mono\">{testResults.duration} —Å–µ–∫</span>\n        </div>\n        {testResults.renderCount > 0 && (\n          <div className=\"flex justify-between\">\n            <span>–ß–∞—Å—Ç–æ—Ç–∞:</span>\n            <span className=\"font-mono\">\n              {testResults.duration > 0 ? (testResults.renderCount / testResults.duration).toFixed(1) : '0'} —Ä–µ–Ω–¥–µ—Ä–æ–≤/—Å–µ–∫\n            </span>\n          </div>\n        )}\n      </div>\n      \n      {testResults.message && (\n        <div className={`p-2 rounded text-xs mb-3 ${\n          testResults.status === 'passed' ? 'bg-green-50 text-green-700 border border-green-200' :\n          testResults.status === 'failed' ? 'bg-red-50 text-red-700 border border-red-200' :\n          'bg-blue-50 text-blue-700 border border-blue-200'\n        }`}>\n          {testResults.message}\n        </div>\n      )}\n      \n      <div className=\"flex gap-2\">\n        <Button \n          onClick={startTest} \n          disabled={isActive}\n          size=\"sm\"\n          className=\"flex-1\"\n        >\n          {isActive ? '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...' : '–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç'}\n        </Button>\n        \n        {isActive && (\n          <Button \n            onClick={stopTest} \n            variant=\"outline\"\n            size=\"sm\"\n          >\n            –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å\n          </Button>\n        )}\n      </div>\n      \n      <div className=\"mt-3 text-xs text-gray-500\">\n        <div className=\"font-semibold mb-1\">–ö—Ä–∏—Ç–µ—Ä–∏–∏ —Ç–µ—Å—Ç–∞:</div>\n        <div>‚Ä¢ ‚â§20 —Ä–µ–Ω–¥–µ—Ä–æ–≤ –∑–∞ 10 —Å–µ–∫ = ‚úÖ –ù–æ—Ä–º–∞</div>\n        <div>‚Ä¢ >20 —Ä–µ–Ω–¥–µ—Ä–æ–≤ –∑–∞ 10 —Å–µ–∫ = ‚ùå –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª</div>\n      </div>\n    </div>\n  );\n}