// src/components/auth/MobileAuthHandler.tsx
'use client';

import { useEffect, useState } from 'react';
import { Loader2, AlertCircle, Smartphone, RefreshCw, Wifi } from 'lucide-react';
import { Button } from '@/components/ui/button';

// –ò–º–ø–æ—Ä—Ç—ã SDK v3.x —Å–æ–≥–ª–∞—Å–Ω–æ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
import { useLaunchParams, useRawInitData } from '@telegram-apps/sdk-react';

interface MobileAuthHandlerProps {
  children: React.ReactNode;
  isLoading: boolean;
  error: string | null;
  isAuthenticated: boolean;
}

/**
 * –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ª—É—á—à–∏–π UX –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å Telegram Mini App –Ω–∞ —Å–º–∞—Ä—Ç—Ñ–æ–Ω–∞—Ö
 */
export function MobileAuthHandler({ 
  children, 
  isLoading, 
  error, 
  isAuthenticated 
}: MobileAuthHandlerProps) {
  const [retryCount, setRetryCount] = useState(0);
  const [showAdvancedHelp, setShowAdvancedHelp] = useState(false);
  const [platform, setPlatform] = useState<{
    isMobile: boolean;
    isAndroid: boolean;
    isIOS: boolean;
    isTelegramApp: boolean;
    platform: string;
  }>({
    isMobile: false,
    isAndroid: false,
    isIOS: false,
    isTelegramApp: false,
    platform: 'unknown'
  });

  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ SDK v3.x –±–µ–∑ —É—Å–ª–æ–≤–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤ (Rules of Hooks)
  const launchParams = useLaunchParams(true); // SSR-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Ä–µ–∂–∏–º
  const initDataRaw = useRawInitData();

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    if (typeof window === 'undefined') return;

    const userAgent = navigator.userAgent.toLowerCase();
    const isMobile = /android|webos|iphone|ipad|ipod|blackberry|iemobile|opera mini/i.test(userAgent);
    const isAndroid = /android/i.test(userAgent);
    const isIOS = /iphone|ipad|ipod/i.test(userAgent);
    const isTelegramApp = userAgent.includes('telegram');
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –∏–∑ launchParams (SDK v3.x)
    const sdkPlatform = launchParams?.tgWebAppPlatform || 'unknown';

    setPlatform({
      isMobile,
      isAndroid,
      isIOS,
      isTelegramApp,
      platform: sdkPlatform
    });

    console.log('üì± Platform detection:', {
      isMobile,
      isAndroid,
      isIOS,
      isTelegramApp,
      platform: sdkPlatform,
      userAgent: userAgent.substring(0, 100),
      hasLaunchParams: !!launchParams,
      hasInitDataRaw: !!initDataRaw
    });
  }, [launchParams, initDataRaw]);

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
  useEffect(() => {
    if (error && platform.isMobile && retryCount < 2) {
      console.log(`üîÑ Auto-retry ${retryCount + 1}/2 for mobile device in 3 seconds...`);
      
      const timeout = setTimeout(() => {
        setRetryCount(prev => prev + 1);
        window.location.reload();
      }, 3000);

      return () => clearTimeout(timeout);
    }
  }, [error, platform.isMobile, retryCount]);

  const handleRetry = () => {
    setRetryCount(prev => prev + 1);
    console.log('üîÑ Manual retry attempt:', retryCount + 1);
    window.location.reload();
  };

  const handleAdvancedRetry = () => {
    console.log('üßπ Advanced retry: clearing storage...');
    // –û—á–∏—â–∞–µ–º localStorage –∏ –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞
    try {
      localStorage.clear();
      sessionStorage.clear();
    } catch (e) {
      console.warn('Cannot clear storage:', e);
    }
    setRetryCount(prev => prev + 1);
    window.location.reload();
  };

  // –ï—Å–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
  if (isAuthenticated) {
    return <>{children}</>;
  }

  // Loading state —Å —É—á–µ—Ç–æ–º –º–æ–±–∏–ª—å–Ω–æ–π —Å–ø–µ—Ü–∏—Ñ–∏–∫–∏
  if (isLoading) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 to-indigo-100">
        <div className="text-center p-6 bg-white rounded-2xl shadow-xl max-w-sm w-full mx-4">
          <div className="flex flex-col items-center space-y-4">
            <div className="relative">
              <Loader2 className="h-16 w-16 animate-spin text-blue-500" />
              <div className="absolute -inset-4 bg-blue-500/10 rounded-full animate-ping"></div>
            </div>
            
            <div className="space-y-2">
              <h2 className="text-2xl font-bold text-gray-900">
                3<span className="text-yellow-500">GIS</span>
              </h2>
              <p className="text-gray-600 text-sm">
                {platform.isMobile ? '–ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Telegram...' : '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...'}
              </p>
            </div>

            {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ */}
            <div className="flex items-center space-x-2 text-blue-500 bg-blue-50 px-3 py-2 rounded-lg">
              <Smartphone className="h-4 w-4" />
              <span className="text-xs font-medium">
                {platform.isMobile 
                  ? `Mobile ‚Ä¢ ${platform.platform}`
                  : 'Desktop'
                }
              </span>
            </div>
            
            {/* –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä */}
            <div className="w-full bg-gray-200 rounded-full h-1.5">
              <div className="bg-blue-500 h-1.5 rounded-full animate-pulse transition-all duration-1000" 
                   style={{ width: `${Math.min(100, (retryCount + 1) * 33)}%` }}></div>
            </div>
            
            {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
            <div className="text-xs text-gray-500 text-center leading-relaxed space-y-1">
              <p>
                {platform.isMobile 
                  ? '–ù–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏'
                  : '–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ Telegram'
                }
              </p>
              
              {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ */}
              {(retryCount > 0 || process.env.NODE_ENV === 'development') && (
                <div className="bg-gray-50 rounded p-2 mt-2 text-left">
                  <p className="text-xs text-gray-600">Debug:</p>
                  <ul className="text-xs text-gray-500 space-y-0.5">
                    <li>Platform: {platform.platform}</li>
                    <li>Launch params: {launchParams ? '‚úì' : '‚úó'}</li>
                    <li>Init data: {initDataRaw ? '‚úì' : '‚úó'}</li>
                    <li>Telegram app: {platform.isTelegramApp ? '‚úì' : '‚úó'}</li>
                  </ul>
                </div>
              )}
            </div>
          </div>
        </div>
      </div>
    );
  }

  // Error state —Å –º–æ–±–∏–ª—å–Ω—ã–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
  if (error) {
    const isDataNotAvailable = error.includes('Telegram data not available') || 
                               error.includes('–û–∂–∏–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö Telegram');
    
    return (
      <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-red-50 to-pink-100 p-4">
        <div className="text-center max-w-md w-full bg-white rounded-2xl shadow-xl p-6">
          <div className="flex flex-col items-center space-y-6">
            <div className="relative">
              <AlertCircle className="h-16 w-16 text-red-500" />
              <div className="absolute -inset-4 bg-red-500/10 rounded-full animate-pulse"></div>
            </div>
            
            <div className="space-y-2">
              <h2 className="text-xl font-bold text-gray-900">
                {platform.isMobile ? '–ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º' : '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏'}
              </h2>
              <p className="text-gray-600 text-sm leading-relaxed">
                {isDataNotAvailable
                  ? (platform.isMobile 
                      ? 'Telegram –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–æ —á–µ—Ä–µ–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞.'
                      : '–î–∞–Ω–Ω—ã–µ Telegram –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –±–æ—Ç–∞ @ThreeGIS_bot.'
                    )
                  : error
                }
              </p>
            </div>

            {/* –°—Ç–∞—Ç—É—Å –ø–æ–ø—ã—Ç–æ–∫ */}
            {retryCount > 0 && (
              <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-3 w-full">
                <p className="text-xs text-yellow-800">
                  –ü–æ–ø—ã—Ç–∫–∞ {retryCount + 1}/3
                  {platform.isMobile && ' ‚Ä¢ –ú–æ–±–∏–ª—å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ'}
                </p>
              </div>
            )}

            {/* –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
            <div className="bg-gray-50 rounded-lg p-3 w-full">
              <p className="text-xs text-gray-600 mb-2">–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</p>
              <div className="grid grid-cols-2 gap-2 text-xs">
                <div>
                  <span className="text-gray-500">–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:</span>
                  <br />
                  <span className="font-mono">{platform.platform}</span>
                </div>
                <div>
                  <span className="text-gray-500">–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:</span>
                  <br />
                  <span className="font-mono">
                    {platform.isMobile 
                      ? (platform.isIOS ? 'iOS' : platform.isAndroid ? 'Android' : 'Mobile')
                      : 'Desktop'
                    }
                  </span>
                </div>
                <div>
                  <span className="text-gray-500">Telegram App:</span>
                  <br />
                  <span className="font-mono">{platform.isTelegramApp ? '–î–∞' : '–ù–µ—Ç'}</span>
                </div>
                <div>
                  <span className="text-gray-500">SDK Data:</span>
                  <br />
                  <span className="font-mono">
                    {launchParams && initDataRaw ? 'OK' : '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}
                  </span>
                </div>
              </div>
            </div>
            
            <div className="space-y-3 w-full">
              <Button
                onClick={handleRetry}
                className="w-full bg-blue-500 hover:bg-blue-600 text-white"
                disabled={retryCount >= 3}
              >
                <RefreshCw className="h-4 w-4 mr-2" />
                {retryCount >= 3 ? '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫' : '–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞'}
              </Button>

              {platform.isMobile && retryCount >= 1 && (
                <Button
                  onClick={() => setShowAdvancedHelp(!showAdvancedHelp)}
                  variant="outline"
                  className="w-full"
                >
                  {showAdvancedHelp ? '–°–∫—Ä—ã—Ç—å —Å–ø—Ä–∞–≤–∫—É' : '–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?'}
                </Button>
              )}
            </div>

            {/* –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ */}
            {showAdvancedHelp && (
              <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 w-full space-y-3">
                <h3 className="font-medium text-blue-900 text-sm flex items-center">
                  <Wifi className="h-4 w-4 mr-2" />
                  –®–∞–≥–∏ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã:
                </h3>
                <ul className="text-xs text-blue-800 space-y-2">
                  <li>1. –ü–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–∫—Ä–æ–π—Ç–µ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ Telegram</li>
                  <li>2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è</li>
                  <li>3. –ù–∞–π–¥–∏—Ç–µ –±–æ—Ç–∞ @ThreeGIS_bot –∏ –Ω–∞–∂–º–∏—Ç–µ "–ó–∞–ø—É—Å—Ç–∏—Ç—å"</li>
                  <li>4. –û–±–Ω–æ–≤–∏—Ç–µ Telegram –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏</li>
                  {platform.isAndroid && (
                    <li>5. –ù–∞ Android: –æ—á–∏—Å—Ç–∏—Ç–µ –∫—ç—à Telegram –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö</li>
                  )}
                  {platform.isIOS && (
                    <li>5. –ù–∞ iOS: –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Telegram –∏–∑ App Store</li>
                  )}
                </ul>
                <Button
                  onClick={handleAdvancedRetry}
                  variant="outline"
                  size="sm"
                  className="w-full mt-3"
                >
                  –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å
                </Button>
              </div>
            )}
            
            <p className="text-xs text-gray-500 text-center leading-relaxed">
              {platform.isMobile 
                ? '–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤–Ω—É—Ç—Ä–∏ Telegram —á–µ—Ä–µ–∑ –±–æ—Ç–∞ @ThreeGIS_bot'
                : '–≠—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ Telegram Mini Apps'
              }
            </p>
          </div>
        </div>
      </div>
    );
  }

  // Fallback - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–µ–π, –µ—Å–ª–∏ –Ω–µ—Ç –æ—à–∏–±–æ–∫ –∏ –∑–∞–≥—Ä—É–∑–∫–∏
  return <>{children}</>;
}

/**
 * –•—É–∫ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ Telegram SDK v3.x
 */
export function useTelegramPlatform() {
  const [platformInfo, setPlatformInfo] = useState<{
    isMobile: boolean;
    isAndroid: boolean;
    isIOS: boolean;
    isDesktop: boolean;
    isTelegramApp: boolean;
    platform: string;
    hasWebAppData: boolean;
    hasInitData: boolean;
    debugInfo: string;
  }>({
    isMobile: false,
    isAndroid: false,
    isIOS: false,
    isDesktop: false,
    isTelegramApp: false,
    platform: 'unknown',
    hasWebAppData: false,
    hasInitData: false,
    debugInfo: ''
  });

  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ SDK v3.x –±–µ–∑ —É—Å–ª–æ–≤–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤ (Rules of Hooks)
  const launchParams = useLaunchParams(true);
  const initDataRaw = useRawInitData();

  useEffect(() => {
    if (typeof window === 'undefined') return;

    const userAgent = navigator.userAgent.toLowerCase();
    
    const isMobile = /android|webos|iphone|ipad|ipod|blackberry|iemobile|opera mini/i.test(userAgent);
    const isAndroid = /android/i.test(userAgent);
    const isIOS = /iphone|ipad|ipod/i.test(userAgent);
    const isDesktop = !isMobile;
    const isTelegramApp = userAgent.includes('telegram');
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –∏–∑ SDK v3.x
    const sdkPlatform = launchParams?.tgWebAppPlatform || 'unknown';
    const hasWebAppData = !!(launchParams?.tgWebAppData);
    const hasInitData = !!initDataRaw;

    const debugInfo = JSON.stringify({
      userAgent: userAgent.substring(0, 50) + '...',
      launchParamsKeys: launchParams ? Object.keys(launchParams) : [],
      initDataLength: initDataRaw?.length || 0,
      timestamp: new Date().toISOString()
    }, null, 2);

    setPlatformInfo({
      isMobile,
      isAndroid,
      isIOS,
      isDesktop,
      isTelegramApp,
      platform: sdkPlatform,
      hasWebAppData,
      hasInitData,
      debugInfo
    });
  }, [launchParams, initDataRaw]);

  return platformInfo;
}

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ
 */
export function PlatformDebugInfo() {
  const platformInfo = useTelegramPlatform();

  if (process.env.NODE_ENV !== 'development') {
    return null;
  }

  return (
    <div className="fixed bottom-4 right-4 bg-black/80 text-white text-xs p-3 rounded-lg max-w-xs">
      <h4 className="font-bold mb-2">Platform Debug (Dev Only)</h4>
      <div className="space-y-1">
        <div>Device: {platformInfo.isMobile ? 'Mobile' : 'Desktop'}</div>
        <div>OS: {platformInfo.isIOS ? 'iOS' : platformInfo.isAndroid ? 'Android' : 'Other'}</div>
        <div>Platform: {platformInfo.platform}</div>
        <div>Telegram: {platformInfo.isTelegramApp ? 'Yes' : 'No'}</div>
        <div>WebApp Data: {platformInfo.hasWebAppData ? 'Yes' : 'No'}</div>
        <div>Init Data: {platformInfo.hasInitData ? 'Yes' : 'No'}</div>
      </div>
    </div>
  );
}
