// components/admin/BusinessChatSelector.tsx\n'use client';\n\nimport { useState, useEffect } from 'react';\nimport { Search, Copy, ExternalLink, MapPin, MessageCircle, Check } from 'lucide-react';\nimport { Input } from '@/components/ui/input';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Badge } from '@/components/ui/badge';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport { toast } from 'sonner';\n\ninterface Business {\n  id: number;\n  name: string;\n  nameEn?: string;\n  address: string;\n  phone?: string;\n  category: {\n    name: string;\n    slug: string;\n  };\n  city: {\n    name: string;\n    stateId: string;\n  };\n  rating: number;\n  viewCount: number;\n}\n\ninterface TelegramChat {\n  id: number;\n  title: string;\n  description?: string;\n  inviteLink?: string;\n  topic?: string;\n  city?: {\n    name: string;\n    stateId: string;\n  };\n  memberCount: number;\n}\n\ninterface BusinessChatSelectorProps {\n  onLinkSelect: (link: string, type: 'business' | 'chat', item: Business | TelegramChat) => void;\n  className?: string;\n}\n\nexport function BusinessChatSelector({ onLinkSelect, className = '' }: BusinessChatSelectorProps) {\n  const [businesses, setBusinesses] = useState<Business[]>([]);\n  const [chats, setChats] = useState<TelegramChat[]>([]);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [copiedId, setCopiedId] = useState<string | null>(null);\n\n  // Загрузка данных при изменении поискового запроса\n  useEffect(() => {\n    const fetchData = async () => {\n      if (searchQuery.length < 2) {\n        setBusinesses([]);\n        setChats([]);\n        return;\n      }\n\n      setLoading(true);\n      try {\n        const response = await fetch(`/api/admin/blog/search?q=${encodeURIComponent(searchQuery)}`);\n        if (!response.ok) throw new Error('Ошибка поиска');\n        \n        const data = await response.json();\n        setBusinesses(data.businesses || []);\n        setChats(data.chats || []);\n      } catch (error) {\n        console.error('Ошибка при поиске:', error);\n        toast.error('Не удалось загрузить данные');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    const timeoutId = setTimeout(fetchData, 300);\n    return () => clearTimeout(timeoutId);\n  }, [searchQuery]);\n\n  // Копирование ссылки в буфер обмена\n  const copyToClipboard = async (text: string, id: string) => {\n    try {\n      await navigator.clipboard.writeText(text);\n      setCopiedId(id);\n      setTimeout(() => setCopiedId(null), 2000);\n      \n      toast.success('Ссылка скопирована в буфер обмена');\n    } catch (error) {\n      console.error('Ошибка копирования:', error);\n      toast.error('Не удалось скопировать ссылку');\n    }\n  };\n\n  // Генерация ссылки на заведение\n  const generateBusinessLink = (business: Business): string => {\n    return `https://t.me/ThreeGIS_bot/app?startapp=business_${business.id}`;\n  };\n\n  // Генерация ссылки на чат  \n  const generateChatLink = (chat: TelegramChat): string => {\n    return chat.inviteLink || `https://t.me/ThreeGIS_bot/app?startapp=chat_${chat.id}`;\n  };\n\n  // Обработчик выбора заведения\n  const handleBusinessSelect = (business: Business) => {\n    const link = generateBusinessLink(business);\n    onLinkSelect(link, 'business', business);\n  };\n\n  // Обработчик выбора чата\n  const handleChatSelect = (chat: TelegramChat) => {\n    const link = generateChatLink(chat);\n    onLinkSelect(link, 'chat', chat);\n  };\n\n  return (\n    <Card className={className}>\n      <CardHeader>\n        <CardTitle className=\"text-lg flex items-center gap-2\">\n          <ExternalLink className=\"h-5 w-5\" />\n          Добавить ссылки на заведения и чаты\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        {/* Поисковая строка */}\n        <div className=\"relative mb-4\">\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n          <Input\n            placeholder=\"Поиск заведений и чатов...\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            className=\"pl-10\"\n          />\n        </div>\n\n        {searchQuery.length < 2 ? (\n          <div className=\"text-center py-8 text-muted-foreground\">\n            <Search className=\"h-12 w-12 mx-auto mb-3 opacity-50\" />\n            <p>Введите минимум 2 символа для поиска</p>\n          </div>\n        ) : loading ? (\n          <div className=\"text-center py-8\">\n            <div className=\"animate-spin h-6 w-6 border-2 border-primary border-t-transparent rounded-full mx-auto mb-3\"></div>\n            <p className=\"text-muted-foreground\">Поиск...</p>\n          </div>\n        ) : (\n          <Tabs defaultValue=\"businesses\" className=\"w-full\">\n            <TabsList className=\"grid w-full grid-cols-2\">\n              <TabsTrigger value=\"businesses\" className=\"flex items-center gap-2\">\n                <MapPin className=\"h-4 w-4\" />\n                Заведения ({businesses.length})\n              </TabsTrigger>\n              <TabsTrigger value=\"chats\" className=\"flex items-center gap-2\">\n                <MessageCircle className=\"h-4 w-4\" />\n                Чаты ({chats.length})\n              </TabsTrigger>\n            </TabsList>\n\n            {/* Заведения */}\n            <TabsContent value=\"businesses\">\n              <ScrollArea className=\"h-80 business-selector\">\n                {businesses.length === 0 ? (\n                  <div className=\"text-center py-8 text-muted-foreground\">\n                    <MapPin className=\"h-12 w-12 mx-auto mb-3 opacity-50\" />\n                    <p>Заведения не найдены</p>\n                  </div>\n                ) : (\n                  <div className=\"space-y-3 pr-2\">\n                    {businesses.map((business) => {\n                      const link = generateBusinessLink(business);\n                      const copyId = `business-${business.id}`;\n                      \n                      return (\n                        <div key={business.id} className=\"border rounded-lg p-3 hover:bg-muted/50 transition-colors\">\n                          <div className=\"flex items-start justify-between\">\n                            <div className=\"flex-1 min-w-0\">\n                              <h4 className=\"font-medium truncate\">{business.name}</h4>\n                              {business.nameEn && (\n                                <p className=\"text-sm text-muted-foreground truncate\">{business.nameEn}</p>\n                              )}\n                              <div className=\"flex items-center gap-2 mt-1\">\n                                <Badge variant=\"secondary\" className=\"text-xs\">\n                                  {business.category.name}\n                                </Badge>\n                                <span className=\"text-xs text-muted-foreground\">\n                                  {business.city.name}, {business.city.stateId}\n                                </span>\n                              </div>\n                              <p className=\"text-xs text-muted-foreground mt-1 truncate\">\n                                {business.address}\n                              </p>\n                              <div className=\"flex items-center gap-3 mt-2 text-xs text-muted-foreground\">\n                                <span>★ {business.rating.toFixed(1)}</span>\n                                <span>{business.viewCount} просмотров</span>\n                                {business.phone && <span>{business.phone}</span>}\n                              </div>\n                            </div>\n                            \n                            <div className=\"flex flex-col gap-1 ml-3\">\n                              <Button\n                                size=\"sm\"\n                                variant=\"outline\"\n                                onClick={() => copyToClipboard(link, copyId)}\n                                className=\"text-xs\"\n                              >\n                                {copiedId === copyId ? (\n                                  <Check className=\"h-3 w-3\" />\n                                ) : (\n                                  <Copy className=\"h-3 w-3\" />\n                                )}\n                              </Button>\n                              <Button\n                                size=\"sm\"\n                                onClick={() => handleBusinessSelect(business)}\n                                className=\"text-xs\"\n                              >\n                                Выбрать\n                              </Button>\n                            </div>\n                          </div>\n                        </div>\n                      );\n                    })}\n                  </div>\n                )}\n              </ScrollArea>\n            </TabsContent>\n\n            {/* Чаты */}\n            <TabsContent value=\"chats\">\n              <ScrollArea className=\"h-80 business-selector\">\n                {chats.length === 0 ? (\n                  <div className=\"text-center py-8 text-muted-foreground\">\n                    <MessageCircle className=\"h-12 w-12 mx-auto mb-3 opacity-50\" />\n                    <p>Чаты не найдены</p>\n                  </div>\n                ) : (\n                  <div className=\"space-y-3 pr-2\">\n                    {chats.map((chat) => {\n                      const link = generateChatLink(chat);\n                      const copyId = `chat-${chat.id}`;\n                      \n                      return (\n                        <div key={chat.id} className=\"border rounded-lg p-3 hover:bg-muted/50 transition-colors\">\n                          <div className=\"flex items-start justify-between\">\n                            <div className=\"flex-1 min-w-0\">\n                              <h4 className=\"font-medium truncate\">{chat.title}</h4>\n                              {chat.description && (\n                                <p className=\"text-sm text-muted-foreground line-clamp-2\">{chat.description}</p>\n                              )}\n                              <div className=\"flex items-center gap-2 mt-1\">\n                                {chat.topic && (\n                                  <Badge variant=\"secondary\" className=\"text-xs\">\n                                    {chat.topic}\n                                  </Badge>\n                                )}\n                                {chat.city && (\n                                  <span className=\"text-xs text-muted-foreground\">\n                                    {chat.city.name}, {chat.city.stateId}\n                                  </span>\n                                )}\n                              </div>\n                              <div className=\"flex items-center gap-3 mt-2 text-xs text-muted-foreground\">\n                                <span>👥 {chat.memberCount} участников</span>\n                                {chat.inviteLink && (\n                                  <span className=\"text-blue-600\">Есть ссылка</span>\n                                )}\n                              </div>\n                            </div>\n                            \n                            <div className=\"flex flex-col gap-1 ml-3\">\n                              <Button\n                                size=\"sm\"\n                                variant=\"outline\"\n                                onClick={() => copyToClipboard(link, copyId)}\n                                className=\"text-xs\"\n                              >\n                                {copiedId === copyId ? (\n                                  <Check className=\"h-3 w-3\" />\n                                ) : (\n                                  <Copy className=\"h-3 w-3\" />\n                                )}\n                              </Button>\n                              <Button\n                                size=\"sm\"\n                                onClick={() => handleChatSelect(chat)}\n                                className=\"text-xs\"\n                              >\n                                Выбрать\n                              </Button>\n                            </div>\n                          </div>\n                        </div>\n                      );\n                    })}\n                  </div>\n                )}\n              </ScrollArea>\n            </TabsContent>\n          </Tabs>\n        )}\n      </CardContent>\n    </Card>\n  );\n}"