// components/admin/MarkdownEditor.tsx\n'use client';\n\nimport { useState, useEffect, useCallback } from 'react';\nimport dynamic from 'next/dynamic';\nimport { useDebounce } from 'use-debounce';\nimport { Save, Clock, CheckCircle, AlertCircle } from 'lucide-react';\nimport { Badge } from '@/components/ui/badge';\n\n// Динамический импорт @uiw/react-md-editor для Next.js 15\nconst MDEditor = dynamic(\n  () => import('@uiw/react-md-editor').then(mod => mod.default),\n  { \n    ssr: false,\n    loading: () => (\n      <div className=\"border rounded-lg p-4 h-96 flex items-center justify-center bg-muted/50\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin h-6 w-6 border-2 border-primary border-t-transparent rounded-full mx-auto mb-2\"></div>\n          <p className=\"text-sm text-muted-foreground\">Загрузка редактора...</p>\n        </div>\n      </div>\n    )\n  }\n);\n\ninterface MarkdownEditorProps {\n  value: string;\n  onChange: (value: string) => void;\n  onSave?: (value: string) => Promise<boolean>;\n  placeholder?: string;\n  height?: number;\n  autoSave?: boolean;\n  autoSaveDelay?: number;\n}\n\ntype SaveStatus = 'idle' | 'saving' | 'saved' | 'error';\n\nexport function MarkdownEditor({\n  value,\n  onChange,\n  onSave,\n  placeholder = \"Начните писать статью...\",\n  height = 500,\n  autoSave = true,\n  autoSaveDelay = 30000 // 30 секунд\n}: MarkdownEditorProps) {\n  const [saveStatus, setSaveStatus] = useState<SaveStatus>('idle');\n  const [lastSaved, setLastSaved] = useState<Date | null>(null);\n  const [debouncedValue] = useDebounce(value, autoSaveDelay);\n\n  // Автосохранение при изменении debounced значения\n  useEffect(() => {\n    if (!autoSave || !onSave || debouncedValue === '' || saveStatus === 'saving') {\n      return;\n    }\n\n    const performAutoSave = async () => {\n      setSaveStatus('saving');\n      \n      try {\n        const success = await onSave(debouncedValue);\n        if (success) {\n          setSaveStatus('saved');\n          setLastSaved(new Date());\n          \n          // Сбросить статус через 3 секунды\n          setTimeout(() => setSaveStatus('idle'), 3000);\n        } else {\n          setSaveStatus('error');\n          setTimeout(() => setSaveStatus('idle'), 5000);\n        }\n      } catch (error) {\n        console.error('Ошибка автосохранения:', error);\n        setSaveStatus('error');\n        setTimeout(() => setSaveStatus('idle'), 5000);\n      }\n    };\n\n    performAutoSave();\n  }, [debouncedValue, autoSave, onSave]);\n\n  // Ручное сохранение\n  const handleManualSave = useCallback(async () => {\n    if (!onSave || saveStatus === 'saving') return;\n\n    setSaveStatus('saving');\n    \n    try {\n      const success = await onSave(value);\n      if (success) {\n        setSaveStatus('saved');\n        setLastSaved(new Date());\n        setTimeout(() => setSaveStatus('idle'), 3000);\n      } else {\n        setSaveStatus('error');\n        setTimeout(() => setSaveStatus('idle'), 5000);\n      }\n    } catch (error) {\n      console.error('Ошибка сохранения:', error);\n      setSaveStatus('error');\n      setTimeout(() => setSaveStatus('idle'), 5000);\n    }\n  }, [value, onSave, saveStatus]);\n\n  // Форматирование времени последнего сохранения\n  const formatLastSaved = (date: Date) => {\n    const now = new Date();\n    const diff = Math.floor((now.getTime() - date.getTime()) / 1000);\n    \n    if (diff < 60) return 'только что';\n    if (diff < 3600) return `${Math.floor(diff / 60)} мин назад`;\n    if (diff < 86400) return `${Math.floor(diff / 3600)} ч назад`;\n    return date.toLocaleDateString('ru-RU', { \n      day: 'numeric', \n      month: 'short', \n      hour: '2-digit', \n      minute: '2-digit' \n    });\n  };\n\n  // Горячие клавиши\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if ((e.ctrlKey || e.metaKey) && e.key === 's') {\n        e.preventDefault();\n        handleManualSave();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown);\n    return () => document.removeEventListener('keydown', handleKeyDown);\n  }, [handleManualSave]);\n\n  return (\n    <div className=\"relative\">\n      {/* Индикатор автосохранения */}\n      {autoSave && (\n        <div className=\"flex items-center justify-between mb-4\">\n          <div className=\"flex items-center gap-2\">\n            <SaveStatusBadge status={saveStatus} />\n            {lastSaved && (\n              <span className=\"text-xs text-muted-foreground\">\n                Сохранено {formatLastSaved(lastSaved)}\n              </span>\n            )}\n          </div>\n          \n          <div className=\"flex items-center gap-2\">\n            <span className=\"text-xs text-muted-foreground\">\n              Автосохранение каждые {autoSaveDelay / 1000}с\n            </span>\n            {onSave && (\n              <button\n                onClick={handleManualSave}\n                disabled={saveStatus === 'saving'}\n                className=\"flex items-center gap-1 px-2 py-1 text-xs bg-primary text-primary-foreground rounded hover:bg-primary/90 disabled:opacity-50\"\n                title=\"Сохранить сейчас (Ctrl+S)\"\n              >\n                <Save className=\"h-3 w-3\" />\n                Сохранить\n              </button>\n            )}\n          </div>\n        </div>\n      )}\n\n      {/* Markdown редактор */}\n      <div className=\"border rounded-lg overflow-hidden\">\n        <MDEditor\n          value={value}\n          onChange={(val) => onChange(val || '')}\n          height={height}\n          visibleDragBar={false}\n          textareaProps={{\n            placeholder,\n            style: {\n              fontSize: 14,\n              lineHeight: 1.6,\n              fontFamily: \"'Inter', sans-serif\"\n            }\n          }}\n          preview=\"edit\"\n          hideToolbar={false}\n          data-color-mode=\"light\"\n        />\n      </div>\n\n      {/* Счетчик символов */}\n      <div className=\"flex justify-between items-center mt-2 text-xs text-muted-foreground\">\n        <span>\n          {value.length} символов, ≈{Math.ceil(value.length / 1500)} мин чтения\n        </span>\n        <span>\n          Tip: Ctrl+S для сохранения\n        </span>\n      </div>\n    </div>\n  );\n}\n\n// Компонент индикатора статуса сохранения\nfunction SaveStatusBadge({ status }: { status: SaveStatus }) {\n  const configs = {\n    idle: {\n      icon: Clock,\n      text: 'Готов',\n      variant: 'secondary' as const,\n      className: ''\n    },\n    saving: {\n      icon: Save,\n      text: 'Сохранение...',\n      variant: 'default' as const,\n      className: 'animate-pulse'\n    },\n    saved: {\n      icon: CheckCircle,\n      text: 'Сохранено',\n      variant: 'default' as const,\n      className: 'bg-green-500 hover:bg-green-600'\n    },\n    error: {\n      icon: AlertCircle,\n      text: 'Ошибка',\n      variant: 'destructive' as const,\n      className: ''\n    }\n  };\n\n  const config = configs[status];\n  const Icon = config.icon;\n\n  return (\n    <Badge variant={config.variant} className={`flex items-center gap-1 ${config.className}`}>\n      <Icon className=\"h-3 w-3\" />\n      {config.text}\n    </Badge>\n  );\n}