// src/lib/prisma.ts
import { PrismaClient } from '@prisma/client';

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π singleton –¥–ª—è Prisma –∫–ª–∏–µ–Ω—Ç–∞
const globalForPrisma = globalThis as unknown as {
  prisma: PrismaClient | undefined;
};

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è Supabase —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –ø—É–ª–∞
const prismaConfig = {
  log: process.env.NODE_ENV === 'development' ? ['error', 'warn'] : ['error'],
  datasources: {
    db: {
      url: process.env.DATABASE_URL,
    },
  },
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∏—Å—á–µ—Ä–ø–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
  __internal: {
    engine: {
      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –¥–ª—è Vercel Serverless
      connection_limit: 5,
      pool_timeout: 10, // 10 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
    },
  },
} as const;

// –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä Prisma
export const prisma = globalForPrisma.prisma ?? new PrismaClient({
  log: process.env.NODE_ENV === 'development' ? ['error', 'warn'] : ['error'],
});

// –í development —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –¥–ª—è Hot Reload
if (process.env.NODE_ENV !== 'production') {
  globalForPrisma.prisma = prisma;
}

// Graceful shutdown –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞
if (typeof process !== 'undefined') {
  process.on('beforeExit', async () => {
    console.log('üîå Disconnecting Prisma...');
    await prisma.$disconnect();
  });

  process.on('SIGINT', async () => {
    console.log('üîå SIGINT received, disconnecting Prisma...');
    await prisma.$disconnect();
    process.exit(0);
  });

  process.on('SIGTERM', async () => {
    console.log('üîå SIGTERM received, disconnecting Prisma...');
    await prisma.$disconnect();
    process.exit(0);
  });
}

/**
 * –°–æ–∑–¥–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π Prisma –∫–ª–∏–µ–Ω—Ç —Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è RLS
 * –í–ê–ñ–ù–û: –í—Å–µ–≥–¥–∞ –≤—ã–∑—ã–≤–∞–π—Ç–µ $disconnect() –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!
 */
export async function createPrismaWithUser(telegramId: string): Promise<PrismaClient> {
  const client = new PrismaClient({
    log: process.env.NODE_ENV === 'development' ? ['error'] : [],
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –ø—É–ª–æ–º
    datasources: {
      db: {
        url: process.env.DATABASE_URL,
      },
    },
  });
  
  try {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º telegram_id —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è RLS –ø–æ–ª–∏—Ç–∏–∫
    await client.$executeRaw`SELECT public.set_current_user_telegram_id(${telegramId})`;
    return client;
  } catch (error) {
    console.error('Failed to set user context in Prisma:', error);
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    await client.$disconnect();
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∏–µ–Ω—Ç –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç
    return prisma;
  }
}

/**
 * –í—ã–ø–æ–ª–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∏ –∑–∞–∫—Ä—ã—Ç–∏–µ–º
 */
export async function withUserContext<T>(
  telegramId: string, 
  operation: (client: PrismaClient) => Promise<T>
): Promise<T> {
  let client: PrismaClient | null = null;
  
  try {
    client = await createPrismaWithUser(telegramId);
    return await operation(client);
  } finally {
    // –í–°–ï–ì–î–ê –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    if (client && client !== prisma) {
      await client.$disconnect();
    }
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 */
export async function checkDatabaseConnection(): Promise<boolean> {
  try {
    await prisma.$queryRaw`SELECT 1`;
    return true;
  } catch (error) {
    console.error('Database connection failed:', error);
    return false;
  }
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π (–¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞)
 */
export async function getConnectionStats() {
  try {
    const [activeConnections, totalConnections, maxConnections] = await Promise.all([
      prisma.$queryRaw<[{ active_connections: number }]>`
        SELECT count(*) as active_connections 
        FROM pg_stat_activity 
        WHERE state = 'active'
      `,
      prisma.$queryRaw<[{ total_connections: number }]>`
        SELECT count(*) as total_connections 
        FROM pg_stat_activity
      `,
      prisma.$queryRaw<[{ max_connections: string }]>`
        SHOW max_connections
      `
    ]);

    return {
      active: activeConnections[0].active_connections,
      total: totalConnections[0].total_connections,
      max: parseInt(maxConnections[0].max_connections),
      usage: (totalConnections[0].total_connections / parseInt(maxConnections[0].max_connections)) * 100
    };
  } catch (error) {
    console.error('Failed to get connection stats:', error);
    return null;
  }
}

/**
 * Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ë–î –≤ API routes
 */
export async function ensureDatabaseConnection() {
  try {
    // –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    await prisma.$queryRaw`SELECT 1`;
    
    // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –ª–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ development
    if (process.env.NODE_ENV === 'development') {
      const stats = await getConnectionStats();
      if (stats && stats.usage > 80) {
        console.warn(`‚ö†Ô∏è High DB connection usage: ${stats.usage.toFixed(1)}% (${stats.total}/${stats.max})`);
      }
    }
    
    return true;
  } catch (error) {
    console.error('‚ùå Database connection failed:', error);
    throw new Error('Database unavailable');
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
export default prisma;