/**
 * AWS S3 Client –¥–ª—è 3GIS
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ WebP —Ñ–æ—Ä–º–∞—Ç
 * –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤ –∏ –∫–∞—á–µ—Å—Ç–≤–∞
 */

import { S3Client, PutObjectCommand, DeleteObjectCommand } from '@aws-sdk/client-s3';
import { v4 as uuidv4 } from 'uuid';
import sharp from 'sharp';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è S3 Client
const s3Client = new S3Client({
  region: process.env.AWS_REGION || 'us-east-1',
  credentials: {
    accessKeyId: process.env.AWS_ACCESS_KEY_ID!,
    secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY!,
  },
});

const BUCKET_NAME = process.env.S3_BUCKET_NAME || '3gis-photos';
const S3_BASE_URL = process.env.NEXT_PUBLIC_S3_BASE_URL || `https://${BUCKET_NAME}.s3.${process.env.AWS_REGION}.amazonaws.com`;

/**
 * –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
 */
export const IMAGE_CONFIGS = {
  USER_AVATAR: {
    width: 200,
    height: 200,
    quality: 80,
    format: 'webp' as const,
    fit: 'cover' as const
  },
  BUSINESS_PHOTO: {
    width: 800,
    height: 600,
    quality: 85,
    format: 'webp' as const,
    fit: 'cover' as const
  },
  BUSINESS_THUMBNAIL: {
    width: 300,
    height: 200,
    quality: 75,
    format: 'webp' as const,
    fit: 'cover' as const
  }
};

/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ WebP
 */
async function processImageToWebP(
  buffer: Buffer,
  config: typeof IMAGE_CONFIGS.USER_AVATAR
): Promise<Buffer> {
  console.log(`üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${config.width}x${config.height}, –∫–∞—á–µ—Å—Ç–≤–æ ${config.quality}%`);
  
  return await sharp(buffer)
    .resize({
      width: config.width,
      height: config.height,
      fit: config.fit,
      withoutEnlargement: true,
      background: { r: 255, g: 255, b: 255, alpha: 1 } // –ë–µ–ª—ã–π —Ñ–æ–Ω –¥–ª—è –ø—Ä–æ–∑—Ä–∞—á–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    })
    .webp({ 
      quality: config.quality,
      effort: 6, // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Å–∂–∞—Ç–∏–µ
      smartSubsample: true
    })
    .toBuffer();
}

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ –∞–≤–∞—Ç–∞—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram –≤ S3 (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ WebP)
 */
export async function uploadUserAvatar(
  imageUrl: string,
  telegramId: string
): Promise<string> {
  try {
    console.log(`üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–≤–∞—Ç–∞—Ä –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegramId} –∏–∑ ${imageUrl}`);
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ URL –∏–∑ Telegram
    const response = await fetch(imageUrl);
    if (!response.ok) {
      throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${response.status}`);
    }
    
    const arrayBuffer = await response.arrayBuffer();
    const buffer = Buffer.from(arrayBuffer);
    
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ WebP —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π
    const webpBuffer = await processImageToWebP(buffer, IMAGE_CONFIGS.USER_AVATAR);
    
    const fileName = `${telegramId}.webp`;
    const key = `user-avatars/${fileName}`;
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ S3
    const command = new PutObjectCommand({
      Bucket: BUCKET_NAME,
      Key: key,
      Body: webpBuffer,
      ContentType: 'image/webp',
      CacheControl: 'public, max-age=31536000', // –ö—ç—à –Ω–∞ –≥–æ–¥
      Metadata: {
        'telegram-id': telegramId,
        'upload-date': new Date().toISOString(),
        'source': 'telegram-avatar',
        'format': 'webp',
        'processed': 'true'
      }
    });
    
    await s3Client.send(command);
    const avatarUrl = `${S3_BASE_URL}/${key}`;
    
    console.log(`‚úÖ –ê–≤–∞—Ç–∞—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ WebP: ${avatarUrl}`);
    return avatarUrl;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–≤–∞—Ç–∞—Ä–∞ –≤ S3:', error);
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –∞–≤–∞—Ç–∞—Ä –ø—Ä–∏ –æ—à–∏–±–∫–µ
    return `${S3_BASE_URL}/defaults/default-avatar.webp`;
  }
}

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∑–∞–≤–µ–¥–µ–Ω–∏—è –≤ S3 (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ WebP)
 */
export async function uploadBusinessPhoto(
  buffer: Buffer,
  category: string,
  businessId: number,
  originalName?: string
): Promise<string> {
  try {
    console.log(`üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è ${businessId} –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é ${category}`);
    
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ WebP —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π
    const webpBuffer = await processImageToWebP(buffer, IMAGE_CONFIGS.BUSINESS_PHOTO);
    
    const fileName = `${uuidv4()}.webp`;
    const key = `business-photos/${category}/${businessId}/${fileName}`;
    
    const command = new PutObjectCommand({
      Bucket: BUCKET_NAME,
      Key: key,
      Body: webpBuffer,
      ContentType: 'image/webp',
      CacheControl: 'public, max-age=31536000', // –ö—ç—à –Ω–∞ –≥–æ–¥
      Metadata: {
        'business-id': businessId.toString(),
        'category': category,
        'original-name': originalName || 'unknown',
        'upload-date': new Date().toISOString(),
        'format': 'webp',
        'processed': 'true'
      }
    });
    
    await s3Client.send(command);
    const photoUrl = `${S3_BASE_URL}/${key}`;
    
    console.log(`‚úÖ –§–æ—Ç–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤ WebP: ${photoUrl}`);
    return photoUrl;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è –≤ S3:', error);
    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∑–∞–≤–µ–¥–µ–Ω–∏—è');
  }
}

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ –∞–≤–∞—Ç–∞—Ä–∞ –∏–∑ Buffer (–¥–ª—è —Ñ–æ—Ä–º—ã –∑–∞–≥—Ä—É–∑–∫–∏) –≤ WebP
 */
export async function uploadUserAvatarFromBuffer(
  buffer: Buffer,
  telegramId: string
): Promise<string> {
  try {
    console.log(`üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–≤–∞—Ç–∞—Ä –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegramId} –∏–∑ —Ñ–∞–π–ª–∞`);
    
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ WebP —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π
    const webpBuffer = await processImageToWebP(buffer, IMAGE_CONFIGS.USER_AVATAR);
    
    const fileName = `${telegramId}.webp`;
    const key = `user-avatars/${fileName}`;
    
    const command = new PutObjectCommand({
      Bucket: BUCKET_NAME,
      Key: key,
      Body: webpBuffer,
      ContentType: 'image/webp',
      CacheControl: 'public, max-age=31536000',
      Metadata: {
        'telegram-id': telegramId,
        'upload-date': new Date().toISOString(),
        'source': 'user-upload',
        'format': 'webp',
        'processed': 'true'
      }
    });
    
    await s3Client.send(command);
    const avatarUrl = `${S3_BASE_URL}/${key}`;
    
    console.log(`‚úÖ –ê–≤–∞—Ç–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ WebP: ${avatarUrl}`);
    return avatarUrl;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–≤–∞—Ç–∞—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ S3:', error);
    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞–≤–∞—Ç–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
  }
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –º–∏–Ω–∏–∞—Ç—é—Ä—ã –¥–ª—è –∑–∞–≤–µ–¥–µ–Ω–∏—è –≤ WebP
 */
export async function createBusinessThumbnail(
  originalBuffer: Buffer,
  category: string,
  businessId: number
): Promise<string> {
  try {
    console.log(`üîÑ –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–∞—Ç—é—Ä—É –¥–ª—è –∑–∞–≤–µ–¥–µ–Ω–∏—è ${businessId}`);
    
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ WebP –º–∏–Ω–∏–∞—Ç—é—Ä—É
    const thumbnailBuffer = await processImageToWebP(originalBuffer, IMAGE_CONFIGS.BUSINESS_THUMBNAIL);
    
    const fileName = `${uuidv4()}_thumb.webp`;
    const key = `business-photos/${category}/${businessId}/thumbnails/${fileName}`;
    
    const command = new PutObjectCommand({
      Bucket: BUCKET_NAME,
      Key: key,
      Body: thumbnailBuffer,
      ContentType: 'image/webp',
      CacheControl: 'public, max-age=31536000',
      Metadata: {
        'business-id': businessId.toString(),
        'category': category,
        'type': 'thumbnail',
        'upload-date': new Date().toISOString(),
        'format': 'webp',
        'processed': 'true'
      }
    });
    
    await s3Client.send(command);
    const thumbnailUrl = `${S3_BASE_URL}/${key}`;
    
    console.log(`‚úÖ –ú–∏–Ω–∏–∞—Ç—é—Ä–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –≤ WebP: ${thumbnailUrl}`);
    return thumbnailUrl;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–∏–Ω–∏–∞—Ç—é—Ä—ã:', error);
    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –º–∏–Ω–∏–∞—Ç—é—Ä—É');
  }
}

/**
 * –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ S3
 */
export async function deleteImageFromS3(imageUrl: string): Promise<boolean> {
  try {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º key –∏–∑ URL
    const key = imageUrl.replace(`${S3_BASE_URL}/`, '');
    
    const command = new DeleteObjectCommand({
      Bucket: BUCKET_NAME,
      Key: key,
    });
    
    await s3Client.send(command);
    console.log(`‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –∏–∑ S3: ${key}`);
    return true;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ S3:', error);
    return false;
  }
}

/**
 * –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–∏–ø–æ–≤ —Ñ–∞–π–ª–æ–≤
 */
export function validateImageFile(file: File): boolean {
  const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/webp'];
  const maxSize = 10 * 1024 * 1024; // 10MB
  
  if (!allowedTypes.includes(file.type)) {
    throw new Error('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞. –†–∞–∑—Ä–µ—à–µ–Ω—ã: JPEG, PNG, WebP');
  }
  
  if (file.size > maxSize) {
    throw new Error('–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 10MB');
  }
  
  return true;
}

/**
 * –î–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
export const DEFAULT_IMAGES = {
  BUSINESS: `${S3_BASE_URL}/defaults/default-business.webp`,
  AVATAR: `${S3_BASE_URL}/defaults/default-avatar.webp`
};

/**
 * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∑–∞–≤–µ–¥–µ–Ω–∏—è
 */
export async function uploadMultipleBusinessPhotos(
  files: File[],
  category: string,
  businessId: number
): Promise<{ urls: string[]; thumbnails: string[] }> {
  const uploadPromises = files.map(async (file) => {
    const bytes = await file.arrayBuffer();
    const buffer = Buffer.from(bytes);
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Ñ–æ—Ç–æ
    const photoUrl = await uploadBusinessPhoto(buffer, category, businessId, file.name);
    
    // –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–∞—Ç—é—Ä—É
    const thumbnailUrl = await createBusinessThumbnail(buffer, category, businessId);
    
    return { photoUrl, thumbnailUrl };
  });
  
  const results = await Promise.all(uploadPromises);
  
  return {
    urls: results.map(r => r.photoUrl),
    thumbnails: results.map(r => r.thumbnailUrl)
  };
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
 */
export function getImageInfo(imageUrl: string): {
  key: string;
  type: 'avatar' | 'business' | 'thumbnail' | 'unknown';
  category?: string;
  businessId?: number;
  telegramId?: string;
} {
  const key = imageUrl.replace(`${S3_BASE_URL}/`, '');
  const parts = key.split('/');
  
  if (parts[0] === 'user-avatars') {
    return {
      key,
      type: 'avatar',
      telegramId: parts[1]?.replace('.webp', '')
    };
  }
  
  if (parts[0] === 'business-photos') {
    const category = parts[1];
    const businessId = parseInt(parts[2]);
    const isThumb = parts[3] === 'thumbnails';
    
    return {
      key,
      type: isThumb ? 'thumbnail' : 'business',
      category,
      businessId
    };
  }
  
  return { key, type: 'unknown' };
}

/**
 * –≠–∫—Å–ø–æ—Ä—Ç S3 –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
 */
export { s3Client, BUCKET_NAME, S3_BASE_URL };
