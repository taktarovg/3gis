import { NextResponse } from 'next/server';
import type { NextRequest } from 'next/server';

/**
 * ‚úÖ HYBRID MIDDLEWARE v15 - –§–ò–ù–ê–õ–¨–ù–û–ï –†–ï–®–ï–ù–ò–ï
 * 
 * –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –£–õ–£–ß–®–ï–ù–ò–Ø v15:
 * - 3-—É—Ä–æ–≤–Ω–µ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏
 * - JavaScript runtime –¥–µ—Ç–µ–∫—Ü–∏—è –¥–ª—è —Å–ø–æ—Ä–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
 * - –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ /tg-detect –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
 * - –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ User-Agent –ø–∞—Ç—Ç–µ—Ä–Ω—ã (2024-2025)
 */

/**
 * ‚úÖ –£–†–û–í–ï–ù–¨ 1: –ü–ê–†–ê–ú–ï–¢–†–ò–ß–ï–°–ö–ê–Ø –î–ï–¢–ï–ö–¶–ò–Ø (100% –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å)
 */
function hasExplicitTelegramParams(request: NextRequest): boolean {
  const url = request.nextUrl;
  
  // –Ø–≤–Ω—ã–µ Telegram –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
  const telegramParams = [
    'startapp',           // –û—Å–Ω–æ–≤–Ω–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è Mini Apps
    'start_param',        // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å—Ç–∞—Ä—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä
    'tgWebAppData',       // Init data –≤ URL
    'tgWebAppVersion',    // –í–µ—Ä—Å–∏—è WebApp API
    'tgWebAppStartParam', // –ü–∞—Ä–∞–º–µ—Ç—Ä –∑–∞–ø—É—Å–∫–∞
    'tgWebAppPlatform',   // –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ (ios/android/web/desktop)
    'tgWebAppThemeParams',// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–µ–º—ã
    'tg',                 // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –æ–±—Ö–æ–¥
    'telegram',           // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –æ–±—Ö–æ–¥
    '_telegramApp'        // –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–∞—Ä–∫–µ—Ä
  ];
  
  for (const param of telegramParams) {
    if (url.searchParams.has(param)) {
      const value = url.searchParams.get(param);
      console.log(`[TG Detection v15] ‚úÖ LEVEL 1 - Explicit Telegram parameter: ${param}=${value}`);
      return true;
    }
  }
  
  return false;
}

/**
 * ‚úÖ –£–†–û–í–ï–ù–¨ 2: USER-AGENT –î–ï–¢–ï–ö–¶–ò–Ø (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã 2024-2025)
 */
function hasTelegramUserAgent(request: NextRequest): boolean {
  const userAgentString = request.headers.get('user-agent') || '';
  
  // –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
  const patterns = [
    // Android (–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç): Telegram-Android/{version} ({device}; Android {version}; SDK {version}; {performance})
    /Telegram-Android\/[\d.]+/,
    
    // iOS (–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç): Safari/{version} Telegram {version}  
    /Safari\/[\d.]+ Telegram [\d.]+/,
    
    // Desktop patterns (—Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã)
    /TelegramDesktop/i,
    /tdesktop/i,
    
    // Bot API requests
    /^TelegramBot/,
    
    // WebView patterns (–±–æ–ª–µ–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã–µ)
    /Telegram.*WebView/i,
    /TelegramWebview/i
  ];
  
  for (let i = 0; i < patterns.length; i++) {
    if (patterns[i].test(userAgentString)) {
      console.log(`[TG Detection v15] ‚úÖ LEVEL 2 - User-Agent pattern ${i + 1} matched`);
      return true;
    }
  }
  
  return false;
}

/**
 * ‚úÖ –£–†–û–í–ï–ù–¨ 3: –°–¢–†–û–ì–ò–ï –ó–ê–ì–û–õ–û–í–ö–ò –ò REFERER
 */
function hasTelegramHeaders(request: NextRequest): boolean {
  const referer = request.headers.get('referer') || '';
  
  // –°—Ç—Ä–æ–≥–∏–µ Telegram –∑–∞–≥–æ–ª–æ–≤–∫–∏
  const telegramHeaders = [
    'x-telegram-bot-api-secret-token',
    'x-telegram-app',
    'x-telegram-init-data'
  ];
  
  for (const header of telegramHeaders) {
    const value = request.headers.get(header);
    if (value) {
      console.log(`[TG Detection v15] ‚úÖ LEVEL 3 - Telegram header: ${header}`);
      return true;
    }
  }
  
  // –°—Ç—Ä–æ–≥–∏–µ referer –ø–∞—Ç—Ç–µ—Ä–Ω—ã
  const strictRefererPatterns = [
    'tg://',
    't.me/',
    'telegram.org',
    'web.telegram.org'
  ];
  
  for (const pattern of strictRefererPatterns) {
    if (referer.includes(pattern)) {
      console.log(`[TG Detection v15] ‚úÖ LEVEL 3 - Referer pattern: ${pattern}`);
      return true;
    }
  }
  
  return false;
}

/**
 * ‚úÖ –ö–û–ú–ü–õ–ï–ö–°–ù–ê–Ø –î–ï–¢–ï–ö–¶–ò–Ø TELEGRAM
 */
function isTelegramRequest(request: NextRequest): 'CONFIRMED' | 'UNKNOWN' | 'NOT_TELEGRAM' {
  const userAgentString = request.headers.get('user-agent') || '';
  const url = request.nextUrl;
  
  console.log(`[Middleware v15] –ê–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞:`, {
    userAgent: userAgentString.substring(0, 80) + '...',
    pathname: url.pathname,
    searchParams: Object.fromEntries(url.searchParams.entries())
  });
  
  // –£–†–û–í–ï–ù–¨ 1: –ü–∞—Ä–∞–º–µ—Ç—Ä–∏—á–µ—Å–∫–∞—è –¥–µ—Ç–µ–∫—Ü–∏—è (100% –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å)
  if (hasExplicitTelegramParams(request)) {
    console.log(`[TG Detection v15] ‚úÖ CONFIRMED via Level 1 (Parameters)`);
    return 'CONFIRMED';
  }
  
  // –£–†–û–í–ï–ù–¨ 2: User-Agent –¥–µ—Ç–µ–∫—Ü–∏—è
  if (hasTelegramUserAgent(request)) {
    console.log(`[TG Detection v15] ‚úÖ CONFIRMED via Level 2 (User-Agent)`);
    return 'CONFIRMED';
  }
  
  // –£–†–û–í–ï–ù–¨ 3: –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∏ referer
  if (hasTelegramHeaders(request)) {
    console.log(`[TG Detection v15] ‚úÖ CONFIRMED via Level 3 (Headers/Referer)`);
    return 'CONFIRMED';
  }
  
  // –ê–ù–ê–õ–ò–ó –ù–ï–û–ü–†–ï–î–ï–õ–ï–ù–ù–´–• –°–õ–£–ß–ê–ï–í
  // –ï—Å–ª–∏ —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å Telegram Desktop (Chrome-like UA, –Ω–æ –±–µ–∑ —è–≤–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤)
  const isLikelyDesktop = userAgentString.includes('Chrome') && 
                          userAgentString.includes('Safari') &&
                          !userAgentString.includes('Mobile') &&
                          (userAgentString.includes('Windows') || userAgentString.includes('macOS') || userAgentString.includes('Linux'));
  
  if (isLikelyDesktop) {
    console.log(`[TG Detection v15] ü§î UNKNOWN - Possible Telegram Desktop, needs JavaScript detection`);
    return 'UNKNOWN';
  }
  
  // –ï—Å–ª–∏ —ç—Ç–æ –º–æ–±–∏–ª—å–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä –±–µ–∑ —è–≤–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
  const isMobile = userAgentString.includes('Mobile') || userAgentString.includes('Android') || userAgentString.includes('iPhone');
  if (isMobile) {
    console.log(`[TG Detection v15] ü§î UNKNOWN - Mobile browser, needs JavaScript detection`);
    return 'UNKNOWN';
  }
  
  console.log(`[TG Detection v15] ‚ùå NOT_TELEGRAM - –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–≤–∞–ª–µ–Ω—ã`);
  return 'NOT_TELEGRAM';
}

export async function middleware(request: NextRequest) {
  const pathname = request.nextUrl.pathname;
  
  // ‚úÖ –û–ë–†–ê–ë–ê–¢–´–í–ê–ï–ú –¢–û–õ–¨–ö–û /tg –ü–£–¢–ò
  if (!pathname.startsWith('/tg')) {
    return NextResponse.next();
  }
  
  // ‚úÖ –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ï –û–ë–•–û–î–´ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∏ —Å–ª—É–∂–µ–±–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
  const url = request.nextUrl;
  if (
    url.searchParams.has('_forceBrowser') ||
    url.searchParams.has('_fromTelegram') ||
    url.searchParams.has('_browser') ||
    url.searchParams.has('_redirected') ||
    url.searchParams.has('_noRedirect') ||
    url.searchParams.has('_debug') ||
    url.searchParams.has('_detected')
  ) {
    console.log(`[Middleware v15] Special bypass detected for ${pathname} - serving as is`);
    return NextResponse.next();
  }
  
  // ‚úÖ –ü–†–û–ü–£–°–ö–ê–ï–ú —Å–ª—É–∂–µ–±–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  if (pathname.startsWith('/tg-redirect') || 
      pathname.startsWith('/tg-debug') || 
      pathname.startsWith('/tg-detect')) {
    console.log(`[Middleware v15] Serving utility page as is: ${pathname}`);
    return NextResponse.next();
  }
  
  // ‚úÖ –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê: –æ–ø—Ä–µ–¥–µ–ª—è–µ–º Telegram –∫–ª–∏–µ–Ω—Ç
  const detectionResult = isTelegramRequest(request);
  
  console.log(`[Middleware v15] DETECTION RESULT –¥–ª—è ${pathname}:`, {
    result: detectionResult,
    nextAction: detectionResult === 'CONFIRMED' ? 'ALLOW' : 
                detectionResult === 'UNKNOWN' ? 'DETECT_PAGE' : 
                'REDIRECT_TO_TG_REDIRECT'
  });
  
  // ‚úÖ CONFIRMED - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø—Ä–æ—Å
  if (detectionResult === 'CONFIRMED') {
    console.log(`[Middleware v15] ‚úÖ Telegram client confirmed - allowing access to ${pathname}`);
    
    const response = NextResponse.next();
    
    // –û—Ç–∫–ª—é—á–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
    response.headers.set('Cache-Control', 'no-store, must-revalidate');
    response.headers.set('Pragma', 'no-cache');
    response.headers.set('Expires', '0');
    
    return response;
  }
  
  // ‚úÖ UNKNOWN - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ JavaScript –¥–µ—Ç–µ–∫—Ü–∏—é
  if (detectionResult === 'UNKNOWN') {
    console.log(`[Middleware v15] ü§î Unknown client - redirecting to JavaScript detection page`);
    
    const detectUrl = new URL('/tg-detect', request.url);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø—É—Ç—å
    detectUrl.searchParams.set('redirect', pathname);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º start –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    const startParam = url.searchParams.get('startapp') || 
                      url.searchParams.get('start') || 
                      url.searchParams.get('startParam');
    
    if (startParam) {
      detectUrl.searchParams.set('startapp', startParam);
    }
    
    // –ü–µ—Ä–µ–¥–∞–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    url.searchParams.forEach((value, key) => {
      if (!detectUrl.searchParams.has(key)) {
        detectUrl.searchParams.set(key, value);
      }
    });
    
    return NextResponse.redirect(detectUrl);
  }
  
  // ‚úÖ NOT_TELEGRAM - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ /tg-redirect  
  console.log(`[Middleware v15] ‚ùå Non-Telegram request to ${pathname}, redirecting to /tg-redirect`);
  
  const redirectUrl = new URL('/tg-redirect', request.url);
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º start –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
  const startParam = url.searchParams.get('startapp') || 
                    url.searchParams.get('start') || 
                    url.searchParams.get('startParam');
  
  if (startParam) {
    redirectUrl.searchParams.set('startapp', startParam);
  }
  
  // –§–ª–∞–≥ –ø—Ä–æ—Ç–∏–≤ –∑–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏—è
  redirectUrl.searchParams.set('_redirected', 'true');
  
  return NextResponse.redirect(redirectUrl);
}

export const config = {
  // ‚úÖ –ü–†–ò–ú–ï–ù–Ø–ï–ú –¢–û–õ–¨–ö–û –ö /tg –ü–£–¢–Ø–ú
  matcher: ['/tg/:path*'],
};
