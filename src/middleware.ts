import { NextResponse } from 'next/server';
import type { NextRequest } from 'next/server';

/**
 * ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–†–ê–í–ò–õ–¨–ù–û–ï –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï TELEGRAM –ö–õ–ò–ï–ù–¢–û–í
 * 
 * –û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å Telegram Desktop
 * 
 * –õ–û–ì–ò–ö–ê:
 * 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º User Agent –Ω–∞ –ø—Ä–∏–∑–Ω–∞–∫–∏ Telegram
 * 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º URL –ø–∞—Ä–∞–º–µ—Ç—Ä—ã WebApp
 * 3. –û—Å–æ–±—ã–µ —Å–ª—É—á–∞–∏ (–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞, —Ñ–ª–∞–≥–∏)
 * 4. –ò–ù–ê–ß–ï: –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ /tg-redirect —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
 */
export function middleware(request: NextRequest) {
  const { pathname, searchParams } = request.nextUrl;
  const userAgent = request.headers.get('user-agent') || '';
  
  // ‚úÖ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ /tg –ø—É—Ç—å
  if (pathname === '/tg') {
    // ‚úÖ –û–°–û–ë–´–ï –°–õ–£–ß–ê–ò: –ù–∏–∫–æ–≥–¥–∞ –Ω–µ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∏–º
    const neverRedirectCases = [
      // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
      pathname.includes('/diagnostic'),
      // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ñ–ª–∞–≥–∏
      searchParams.has('_forceBrowser'),
      searchParams.has('_fromTelegram'),
      searchParams.has('_browser'),
      searchParams.has('_redirected'),
      searchParams.has('_noRedirect'),
      searchParams.has('_debug'),
      // Development —Ä–µ–∂–∏–º
      process.env.NODE_ENV === 'development' && searchParams.has('dev')
    ];
    
    if (neverRedirectCases.some(condition => condition)) {
      console.log(`[middleware] –ù–∏–∫–æ–≥–¥–∞ –Ω–µ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∏–º ${pathname} - –æ—Å–æ–±—ã–π —Å–ª—É—á–∞–π`);
      return NextResponse.next();
    }
    
    // ‚úÖ –£–õ–£–ß–®–ï–ù–ù–û–ï –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï TELEGRAM –ö–õ–ò–ï–ù–¢–û–í
    const telegramIndicators = {
      // –ú–µ—Ç–æ–¥ 1: WebApp –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–Ω–∞–¥–µ–∂–Ω—ã–µ)
      hasWebAppParams: searchParams.has('tgWebAppData') ||
                      searchParams.has('tgWebAppVersion') ||
                      searchParams.has('tgWebAppStartParam') ||
                      searchParams.has('tgWebAppPlatform') ||
                      searchParams.has('tgWebAppThemeParams'),
      
      // –ú–µ—Ç–æ–¥ 2: User Agent –ø–∞—Ç—Ç–µ—Ä–Ω—ã
      hasTelegramUA: [
        'TelegramDesktop',
        'Telegram Desktop', 
        'Telegram/',
        'TelegramBot',
        'TelegramWebView',
        'TgWebView'
      ].some(pattern => userAgent.includes(pattern)),
      
      // –ú–µ—Ç–æ–¥ 3: –û—Å–æ–±—ã–µ Telegram –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
      hasTelegramSpecific: userAgent.toLowerCase().includes('telegram') ||
                          searchParams.has('tg') ||
                          request.headers.get('referer')?.includes('telegram'),
    };
    
    // ‚úÖ –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫ Telegram –∫–ª–∏–µ–Ω—Ç
    const isTelegramClient = telegramIndicators.hasWebAppParams ||
                            telegramIndicators.hasTelegramUA ||
                            telegramIndicators.hasTelegramSpecific;
    
    // ‚úÖ –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –î–õ–Ø –û–¢–õ–ê–î–ö–ò
    console.log(`[middleware] –£–õ–£–ß–®–ï–ù–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê ${pathname}:`, {
      userAgent: userAgent.substring(0, 80) + (userAgent.length > 80 ? '...' : ''),
      telegramIndicators,
      decision: isTelegramClient ? '‚úÖ TELEGRAM_CLIENT' : 'üîÑ REDIRECT_TO_TG_REDIRECT',
      referer: request.headers.get('referer') || 'none',
      startParam: searchParams.get('startapp') || searchParams.get('start') || 'none'
    });
    
    // ‚úÖ –ï—Å–ª–∏ –ù–ï Telegram –∫–ª–∏–µ–Ω—Ç - —Ä–µ–¥–∏—Ä–µ–∫—Ç–∏–º
    if (!isTelegramClient) {
      const redirectUrl = new URL('/tg-redirect', request.url);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º start –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
      const startParam = searchParams.get('startapp') || 
                        searchParams.get('start') || 
                        searchParams.get('startParam');
      
      if (startParam) {
        redirectUrl.searchParams.set('startapp', startParam);
      }
      
      // –§–ª–∞–≥ –ø—Ä–æ—Ç–∏–≤ –∑–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏—è
      redirectUrl.searchParams.set('_redirected', 'true');
      
      console.log(`[middleware] –†–ï–î–ò–†–ï–ö–¢: –û–±—ã—á–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä -> /tg-redirect`, {
        redirectUrl: redirectUrl.toString(),
        reason: '–Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω Telegram –∫–ª–∏–µ–Ω—Ç'
      });
      
      return NextResponse.redirect(redirectUrl);
    } else {
      console.log(`[middleware] –ü–†–û–ü–£–°–ö: Telegram –∫–ª–∏–µ–Ω—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω -> —Ä–∞–∑—Ä–µ—à–∞–µ–º –¥–æ—Å—Ç—É–ø`);
    }
  }
  
  // ‚úÖ –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
  return NextResponse.next();
}

export const config = {
  // ‚úÖ –ü—Ä–∏–º–µ–Ω—è–µ–º middleware –¢–û–õ–¨–ö–û –∫ /tg –ø—É—Ç–∏
  matcher: ['/tg']
};
