'use client';

import { useEffect, useState, useCallback } from 'react';
import { useSearchParams, useRouter } from 'next/navigation';
import { Loader2, Smartphone, Monitor } from 'lucide-react';

/**
 * ‚úÖ –°–¢–†–ê–ù–ò–¶–ê JAVASCRIPT –î–ï–¢–ï–ö–¶–ò–ò v15
 * 
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è Telegram Mini App —á–µ—Ä–µ–∑ JavaScript API
 * –∫–æ–≥–¥–∞ server-side –¥–µ—Ç–µ–∫—Ü–∏—è –¥–∞–µ—Ç –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
 */

interface DetectionResult {
  isTelegram: boolean;
  method: string;
  details: Record<string, any>;
}

export default function TelegramDetectionPage() {
  const [isLoading, setIsLoading] = useState(true);
  const [detectionResult, setDetectionResult] = useState<DetectionResult | null>(null);
  const [countdown, setCountdown] = useState(5);
  const searchParams = useSearchParams();
  const router = useRouter();
  
  const redirectPath = searchParams.get('redirect') || '/tg';
  const startApp = searchParams.get('startapp');
  
  /**
   * ‚úÖ –ü–ï–†–ï–ù–ê–ü–†–ê–í–õ–ï–ù–ò–ï –ù–ê –û–°–ù–û–í–ï –†–ï–ó–£–õ–¨–¢–ê–¢–ê
   */
  const handleRedirect = useCallback((isTelegram: boolean): void => {
    if (isTelegram) {
      // Telegram –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω - –∏–¥–µ–º –∫ —Ü–µ–ª–µ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å —Ñ–ª–∞–≥–æ–º
      const targetUrl = new URL(redirectPath, window.location.origin);
      targetUrl.searchParams.set('_detected', 'telegram');
      
      if (startApp) {
        targetUrl.searchParams.set('startapp', startApp);
      }
      
      console.log('[TG Detection JS] ‚úÖ Redirecting to Telegram Mini App:', targetUrl.pathname);
      router.push(targetUrl.pathname + targetUrl.search);
    } else {
      // –û–±—ã—á–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä - –∏–¥–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞
      const redirectUrl = new URL('/tg-redirect', window.location.origin);
      redirectUrl.searchParams.set('_detected', 'browser');
      
      if (startApp) {
        redirectUrl.searchParams.set('startapp', startApp);
      }
      
      console.log('[TG Detection JS] ‚ùå Redirecting to browser redirect page');
      router.push(redirectUrl.pathname + redirectUrl.search);
    }
  }, [redirectPath, startApp, router]);
  
  useEffect(() => {
    performTelegramDetection();
  }, []);
  
  useEffect(() => {
    if (detectionResult && !isLoading) {
      const timer = setInterval(() => {
        setCountdown(prev => {
          if (prev <= 1) {
            clearInterval(timer);
            handleRedirect(detectionResult.isTelegram);
            return 0;
          }
          return prev - 1;
        });
      }, 1000);
      
      return () => clearInterval(timer);
    }
  }, [detectionResult, isLoading, handleRedirect]);
  
  /**
   * ‚úÖ JAVASCRIPT –î–ï–¢–ï–ö–¶–ò–Ø TELEGRAM (–∫–ª–∏–µ–Ω—Ç—Å–∫–∞—è —Å—Ç–æ—Ä–æ–Ω–∞)
   */
  async function performTelegramDetection(): Promise<void> {
    console.log('[TG Detection JS] Starting JavaScript-based detection...');
    
    const result: DetectionResult = {
      isTelegram: false,
      method: 'unknown',
      details: {}
    };
    
    try {
      // –ú–µ—Ç–æ–¥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ window.Telegram.WebApp (–æ—Å–Ω–æ–≤–Ω–æ–π)
      if (typeof window !== 'undefined' && window.Telegram?.WebApp) {
        console.log('[TG Detection JS] ‚úÖ Method 1: window.Telegram.WebApp detected');
        
        result.isTelegram = true;
        result.method = 'WebApp_API';
        result.details = {
          version: window.Telegram.WebApp.version,
          platform: window.Telegram.WebApp.platform,
          isExpanded: window.Telegram.WebApp.isExpanded,
          colorScheme: window.Telegram.WebApp.colorScheme,
          initData: !!window.Telegram.WebApp.initData
        };
        
        setDetectionResult(result);
        setIsLoading(false);
        return;
      }
      
      // –ú–µ—Ç–æ–¥ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ TelegramWebviewProxy (iOS)
      if (typeof window !== 'undefined' && 
          ((window as any).TelegramWebviewProxy || (window as any).TelegramWebviewProxyProto)) {
        console.log('[TG Detection JS] ‚úÖ Method 2: TelegramWebviewProxy detected (iOS)');
        
        result.isTelegram = true;
        result.method = 'iOS_WebviewProxy';
        result.details = {
          hasProxy: !!(window as any).TelegramWebviewProxy,
          hasProxyProto: !!(window as any).TelegramWebviewProxyProto
        };
        
        setDetectionResult(result);
        setIsLoading(false);
        return;
      }
      
      // –ú–µ—Ç–æ–¥ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ TelegramWebview (Android)
      if (typeof window !== 'undefined' && (window as any).TelegramWebview) {
        console.log('[TG Detection JS] ‚úÖ Method 3: TelegramWebview detected (Android)');
        
        result.isTelegram = true;
        result.method = 'Android_Webview';
        result.details = {
          hasWebview: !!(window as any).TelegramWebview
        };
        
        setDetectionResult(result);
        setIsLoading(false);
        return;
      }
      
      // –ú–µ—Ç–æ–¥ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ postMessage API
      try {
        const messagePromise = new Promise((resolve) => {
          const messageHandler = (event: MessageEvent) => {
            if (event.data?.type === 'telegram_ping_response') {
              window.removeEventListener('message', messageHandler);
              resolve(true);
            }
          };
          
          window.addEventListener('message', messageHandler);
          
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ping —Å–æ–æ–±—â–µ–Ω–∏–µ
          window.postMessage({ type: 'telegram_ping' }, '*');
          
          // –¢–∞–π–º–∞—É—Ç —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
          setTimeout(() => {
            window.removeEventListener('message', messageHandler);
            resolve(false);
          }, 1000);
        });
        
        const hasPostMessage = await messagePromise;
        if (hasPostMessage) {
          console.log('[TG Detection JS] ‚úÖ Method 4: PostMessage API responded');
          
          result.isTelegram = true;
          result.method = 'PostMessage_API';
          result.details = { postMessageResponse: true };
          
          setDetectionResult(result);
          setIsLoading(false);
          return;
        }
      } catch (error) {
        console.log('[TG Detection JS] Method 4 failed:', error);
      }
      
      // –ú–µ—Ç–æ–¥ 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ WebRTC (fallback)
      const supportsWebRTC = !!(window.RTCPeerConnection);
      if (!supportsWebRTC) {
        console.log('[TG Detection JS] ü§î Method 5: No WebRTC support (might be Telegram)');
        
        result.isTelegram = true;
        result.method = 'WebRTC_Absence';
        result.details = { 
          webRTCSupport: false,
          note: 'Telegram WebApp often lacks WebRTC support' 
        };
        
        setDetectionResult(result);
        setIsLoading(false);
        return;
      }
      
      // –ú–µ—Ç–æ–¥ 6: –ê–Ω–∞–ª–∏–∑ navigator –∏ window –æ–±—ä–µ–∫—Ç–æ–≤
      // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã—Ö API
      const navigatorFeatures = {
        mediaDevices: !!navigator.mediaDevices,
        serviceWorker: !!navigator.serviceWorker,
        permissions: !!navigator.permissions,
        bluetooth: !!(navigator as any).bluetooth, // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Ç–∏–ø–∞
        usb: !!(navigator as any).usb // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Ç–∏–ø–∞
      };
      
      const windowFeatures = {
        localStorage: (() => {
          try {
            return !!window.localStorage;
          } catch {
            return false;
          }
        })(),
        indexedDB: !!window.indexedDB,
        webGL: (() => {
          try {
            const canvas = document.createElement('canvas');
            return !!(canvas.getContext('webgl') || canvas.getContext('experimental-webgl'));
          } catch {
            return false;
          }
        })()
      };
      
      // –ï—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ –±—Ä–∞—É–∑–µ—Ä–Ω—ã—Ö API - –≤–æ–∑–º–æ–∂–Ω–æ Telegram WebView
      const missingFeatures = Object.values({...navigatorFeatures, ...windowFeatures}).filter(v => !v).length;
      
      if (missingFeatures >= 3) {
        console.log('[TG Detection JS] ü§î Method 6: Multiple browser features missing (might be Telegram WebView)');
        
        result.isTelegram = true;
        result.method = 'Feature_Analysis';
        result.details = {
          navigatorFeatures,
          windowFeatures,
          missingFeaturesCount: missingFeatures
        };
        
        setDetectionResult(result);
        setIsLoading(false);
        return;
      }
      
      // –í—Å–µ –º–µ—Ç–æ–¥—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã - —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –æ–±—ã—á–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä
      console.log('[TG Detection JS] ‚ùå All detection methods failed - likely regular browser');
      
      result.isTelegram = false;
      result.method = 'Regular_Browser';
      result.details = {
        navigatorFeatures,
        windowFeatures,
        userAgent: navigator.userAgent
      };
      
    } catch (error) {
      console.error('[TG Detection JS] Detection error:', error);
      
      result.isTelegram = false;
      result.method = 'Error';
      result.details = { error: (error as Error).message };
    }
    
    setDetectionResult(result);
    setIsLoading(false);
  }
  
  /**
   * ‚úÖ –†–£–ß–ù–û–ô –û–ë–•–û–î –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  const manualOverride = useCallback((forceTelegram: boolean): void => {
    console.log(`[TG Detection JS] Manual override: ${forceTelegram ? 'Telegram' : 'Browser'}`);
    handleRedirect(forceTelegram);
  }, [handleRedirect]);
  
  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center p-4">
      <div className="bg-white rounded-lg shadow-lg p-8 max-w-md w-full">
        <div className="text-center">
          {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
          <div className="mb-6">
            <div className="mx-auto w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mb-4">
              {isLoading ? (
                <Loader2 className="w-8 h-8 text-blue-600 animate-spin" />
              ) : detectionResult?.isTelegram ? (
                <Smartphone className="w-8 h-8 text-green-600" />
              ) : (
                <Monitor className="w-8 h-8 text-orange-600" />
              )}
            </div>
            
            <h1 className="text-2xl font-bold text-gray-900 mb-2">
              –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
            </h1>
            
            <p className="text-gray-600">
              –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –ª–∏ –≤—ã Telegram Mini App
            </p>
          </div>
          
          {/* –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏ */}
          {isLoading && (
            <div className="mb-6">
              <div className="text-sm text-gray-500 mb-3">
                –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∞—à–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ...
              </div>
              
              <div className="w-full bg-gray-200 rounded-full h-2">
                <div className="bg-blue-600 h-2 rounded-full animate-pulse" style={{ width: '60%' }}></div>
              </div>
            </div>
          )}
          
          {/* –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ—Ç–µ–∫—Ü–∏–∏ */}
          {detectionResult && !isLoading && (
            <div className="mb-6">
              <div className={`p-4 rounded-lg mb-4 ${
                detectionResult.isTelegram 
                  ? 'bg-green-50 border border-green-200' 
                  : 'bg-orange-50 border border-orange-200'
              }`}>
                <div className={`font-semibold ${
                  detectionResult.isTelegram ? 'text-green-800' : 'text-orange-800'
                }`}>
                  {detectionResult.isTelegram ? '‚úÖ Telegram Mini App' : '‚ùå –û–±—ã—á–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä'}
                </div>
                
                <div className={`text-sm mt-1 ${
                  detectionResult.isTelegram ? 'text-green-600' : 'text-orange-600'
                }`}>
                  –ú–µ—Ç–æ–¥: {detectionResult.method}
                </div>
              </div>
              
              <div className="text-sm text-gray-600 mb-4">
                {detectionResult.isTelegram 
                  ? `–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ ${countdown} —Å–µ–∫...`
                  : `–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ ${countdown} —Å–µ–∫...`
                }
              </div>
              
              <div className="w-full bg-gray-200 rounded-full h-2 mb-4">
                <div 
                  className="bg-blue-600 h-2 rounded-full transition-all duration-1000"
                  style={{ width: `${(5 - countdown) * 20}%` }}
                ></div>
              </div>
            </div>
          )}
          
          {/* –ö–Ω–æ–ø–∫–∏ —Ä—É—á–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
          {detectionResult && !isLoading && (
            <div className="space-y-3">
              <button
                onClick={() => manualOverride(true)}
                className="w-full bg-green-600 text-white py-2 px-4 rounded-lg hover:bg-green-700 transition-colors"
              >
                üì± –Ø –∏—Å–ø–æ–ª—å–∑—É—é Telegram
              </button>
              
              <button
                onClick={() => manualOverride(false)}
                className="w-full bg-gray-600 text-white py-2 px-4 rounded-lg hover:bg-gray-700 transition-colors"
              >
                üåê –Ø –∏—Å–ø–æ–ª—å–∑—É—é –±—Ä–∞—É–∑–µ—Ä
              </button>
            </div>
          )}
          
          {/* –î–µ—Ç–∞–ª–∏ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ */}
          {detectionResult && process.env.NODE_ENV === 'development' && (
            <details className="mt-6 text-left">
              <summary className="cursor-pointer text-sm text-gray-500 hover:text-gray-700">
                üîß –î–µ—Ç–∞–ª–∏ –¥–µ—Ç–µ–∫—Ü–∏–∏ (dev mode)
              </summary>
              <pre className="mt-2 text-xs bg-gray-100 p-2 rounded overflow-auto max-h-32">
                {JSON.stringify(detectionResult.details, null, 2)}
              </pre>
            </details>
          )}
        </div>
      </div>
    </div>
  );
}

// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±—Ä–∞–Ω—ã –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –¥–µ–∫–ª–∞—Ä–∞—Ü–∏–∏ —Ç–∏–ø–æ–≤
// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∏–ø—ã –∏–∑ /src/types/telegram.ts
