'use client';

import React, { useEffect, useState } from 'react';
import { usePathname } from 'next/navigation';
import { Suspense } from 'react';
import { QueryClient, QueryClientProvider } from '@tanstack/react-query';
import { initAuthStore } from '@/store/auth-store';
import { toast } from 'sonner';
import { Loader2 } from 'lucide-react';

// Telegram SDK v3.x imports
import { init, mockTelegramEnv, retrieveLaunchParams } from '@telegram-apps/sdk-react';

// –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤
const createQueryClient = (context: 'website' | 'telegram' | 'admin') => new QueryClient({
  defaultOptions: {
    queries: {
      staleTime: context === 'website' ? 5 * 60 * 1000 : 60 * 1000,
      gcTime: context === 'website' ? 10 * 60 * 1000 : 5 * 60 * 1000,
      retry: context === 'telegram' ? 1 : 2,
      refetchOnWindowFocus: context === 'website',
    },
    mutations: {
      retry: 0,
      onError: (error) => {
        const errorMessage = error instanceof Error
          ? error.message
          : '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º console.error –≤–º–µ—Å—Ç–æ toast –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        console.error('3GIS Mutation Error:', errorMessage);
      },
    },
  },
});

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
function determineContext(pathname: string): 'website' | 'telegram' | 'admin' {
  if (pathname.startsWith('/admin')) return 'admin'; 
  if (pathname.startsWith('/tg')) return 'telegram';
  return 'website';
}

// Telegram SDK v3.x –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
function TelegramInitializer() {
  const [isInitialized, setIsInitialized] = useState(false);
  const [initError, setInitError] = useState<string | null>(null);
  
  // ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º ref –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π
  const initAttempted = React.useRef(false);

  useEffect(() => {
    // ‚úÖ –ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    if (initAttempted.current) {
      console.log('üîÑ TelegramInitializer: —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
      return;
    }
    
    initAttempted.current = true;
    let mounted = true;

    const initializeTelegramSDK = async () => {
      try {
        console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram SDK v3.x...');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–±–æ—Ç–∞–µ–º –ª–∏ –º—ã –≤ Telegram
        let isInTelegram = false;
        let launchParams: any = null;
        
        try {
        // –î–∞–µ–º –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö
        await new Promise(resolve => setTimeout(resolve, 500));
        
        // –í v3 –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        launchParams = retrieveLaunchParams();
        
        // –í v3 —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å - –≤—Å–µ —Å–≤–æ–π—Å—Ç–≤–∞ –∏–º–µ—é—Ç –ø—Ä–µ—Ñ–∏–∫—Å tgWebApp
        isInTelegram = !!(launchParams?.tgWebAppData || launchParams?.tgWebAppBotInline !== undefined);
        
        console.log('üì± Telegram environment check:', {
            isInTelegram,
            hasWebAppData: !!launchParams?.tgWebAppData,
            platform: launchParams?.tgWebAppPlatform || 'unknown',
            version: launchParams?.tgWebAppVersion || 'unknown',
            launchParamsKeys: launchParams ? Object.keys(launchParams) : []
          });
        } catch (error) {
          console.log('üîß –ù–µ –≤ Telegram –æ–∫—Ä—É–∂–µ–Ω–∏–∏, –≤–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏:', error);
          isInTelegram = false;
        }
        
        if (!isInTelegram) {
          if (process.env.NODE_ENV === 'development') {
            console.log('üîß –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏: –º–æ–∫–∞–µ–º Telegram –æ–∫—Ä—É–∂–µ–Ω–∏–µ');
            
            // –ú–æ–∫–∞–µ–º Telegram –æ–∫—Ä—É–∂–µ–Ω–∏–µ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
            const randomId = Math.floor(Math.random() * 1000000000);
            
            // –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è SDK v3.x —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
            const themeParams = {
              accent_text_color: '#6ab2f2' as `#${string}`,
              bg_color: '#17212b' as `#${string}`,
              button_color: '#5288c1' as `#${string}`,
              button_text_color: '#ffffff' as `#${string}`,
              destructive_text_color: '#ec3942' as `#${string}`,
              header_bg_color: '#17212b' as `#${string}`,
              hint_color: '#708499' as `#${string}`,
              link_color: '#6ab3f3' as `#${string}`,
              secondary_bg_color: '#232e3c' as `#${string}`,
              section_bg_color: '#17212b' as `#${string}`,
              section_header_text_color: '#6ab3f3' as `#${string}`,
              subtitle_text_color: '#708499' as `#${string}`,
              text_color: '#f5f5f5' as `#${string}`,
            };

            // –í v3 tgWebAppData –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π JSON –¥–ª—è mockTelegramEnv
            const mockWebAppData = JSON.stringify({
              user: {
                id: randomId,
                first_name: '–ì–µ–æ—Ä–≥–∏–π',
                last_name: '–¢–∞–∫—Ç–∞—Ä–æ–≤',
                username: 'taktarovgv',
                language_code: 'ru',
                is_premium: false,
                allows_write_to_pm: true,
                photo_url: 'https://t.me/i/userpic/320/4FPEE4tmP3ATHa57u6MqTDih13LTOiMoKoLDRG4PnSA.svg'
              },
              auth_date: Math.floor(Date.now() / 1000),
              hash: '89d6079ad6762351f38c6dbbc41bb53048019256a9443988af7a48bcad16ba31',
              start_param: 'debug',
              chat_type: 'sender',
              chat_instance: '8428209589180549439'
            });

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É v3.x
            mockTelegramEnv({
              launchParams: {
                tgWebAppThemeParams: themeParams,
                tgWebAppData: mockWebAppData, // JSON —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã
                tgWebAppVersion: '8.0',
                tgWebAppPlatform: 'tdesktop',
                tgWebAppStartParam: 'debug',
                tgWebAppBotInline: false
              }
            });
          } else {
            // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏
            console.log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram Mini App...');
          }
        }
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º SDK —Å retry –ª–æ–≥–∏–∫–æ–π –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        let initAttempts = 0;
        const maxAttempts = 3;
        
        while (initAttempts < maxAttempts && mounted) {
          try {
            await init();
            break; // –£—Å–ø–µ—à–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
          } catch (error) {
            initAttempts++;
            console.warn(`‚ùå –ü–æ–ø—ã—Ç–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ${initAttempts}/${maxAttempts} –Ω–µ —É–¥–∞–ª–∞—Å—å:`, error);
            
            if (initAttempts < maxAttempts) {
              // –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
              await new Promise(resolve => setTimeout(resolve, 1000 * initAttempts));
            } else {
              throw error; // –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å
            }
          }
        }
        
        if (mounted) {
          console.log('‚úÖ Telegram SDK v3.x —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
          setIsInitialized(true);
        }
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram SDK:', error);
        if (mounted) {
          setInitError(error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
        }
      }
    };

    initializeTelegramSDK();

    return () => {
      mounted = false;
    };
  }, []);

  if (initError) {
    return (
      <div className="fixed inset-0 flex items-center justify-center bg-red-50 z-50">
        <div className="flex flex-col items-center max-w-md p-6 bg-white rounded-lg shadow-lg">
          <div className="text-red-500 text-2xl mb-4">‚ö†Ô∏è</div>
          <h3 className="text-lg font-semibold text-red-800 mb-2">–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏</h3>
          <p className="text-sm text-red-600 text-center mb-4">{initError}</p>
          <button 
            onClick={() => window.location.reload()}
            className="px-4 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600 transition-colors"
          >
            –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å
          </button>
        </div>
      </div>
    );
  }

  if (!isInitialized) {
    return (
      <div className="fixed inset-0 flex items-center justify-center bg-white bg-opacity-90 z-50">
        <div className="flex flex-col items-center">
          <Loader2 className="h-8 w-8 animate-spin text-blue-500 mb-3" />
          <p className="text-sm font-medium text-gray-600">
            –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è 3GIS...
          </p>
        </div>
      </div>
    );
  }

  return null;
}

// ‚úÖ –ú–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è QueryClient

// –ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è —Å–∞–π—Ç–∞
const WebsiteProvider = React.memo(({ children }: { children: React.ReactNode }) => {
  const queryClient = React.useMemo(() => createQueryClient('website'), []);
  
  console.log('üåê WebsiteProvider: —Å–æ–∑–¥–∞–Ω QueryClient');
  
  return (
    <QueryClientProvider client={queryClient}>
      {children}
    </QueryClientProvider>
  );
});
WebsiteProvider.displayName = 'WebsiteProvider';

// –ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const TelegramProvider = React.memo(({ children }: { children: React.ReactNode }) => {
  const queryClient = React.useMemo(() => createQueryClient('telegram'), []);
  
  console.log('üì± TelegramProvider: —Å–æ–∑–¥–∞–Ω QueryClient');
  
  return (
    <QueryClientProvider client={queryClient}>
      <TelegramInitializer />
      {children}
    </QueryClientProvider>
  );
});
TelegramProvider.displayName = 'TelegramProvider';

// –ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è –∞–¥–º–∏–Ω–∫–∏
const AdminProvider = React.memo(({ children }: { children: React.ReactNode }) => {
  const queryClient = React.useMemo(() => createQueryClient('admin'), []);
  
  console.log('üîß AdminProvider: —Å–æ–∑–¥–∞–Ω QueryClient');
  
  return (
    <QueryClientProvider client={queryClient}>
      {children}
    </QueryClientProvider>
  );
});
AdminProvider.displayName = 'AdminProvider';

// –ì–ª–∞–≤–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä
export function ClientProvider({ children }: { children: React.ReactNode }) {
  const pathname = usePathname();
  const [isMounted, setIsMounted] = useState(false);
  
  // ‚úÖ –°–¢–ê–ë–ò–õ–ò–ó–ò–†–£–ï–ú –∫–æ–Ω—Ç–µ–∫—Å—Ç - –º–µ–º–æ–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  const context = React.useMemo(() => determineContext(pathname), [pathname]);
  
  // ‚úÖ –ö–†–ò–¢–ò–ß–ù–û: –†–∞–∑–¥–µ–ª—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –Ω–∞ –¥–≤–∞ —ç—Ñ—Ñ–µ–∫—Ç–∞
  // 1. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º isMounted —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
  useEffect(() => {
    setIsMounted(true);
  }, []); // ‚úÖ –ü–£–°–¢–´–ï –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ - –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ mount
  
  // 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º auth store —Ç–æ–ª—å–∫–æ –¥–ª—è telegram –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
  useEffect(() => {
    if (isMounted && context === 'telegram') {
      console.log(`üîß Initializing auth store for telegram context: ${pathname}`);
      initAuthStore();
    }
  }, [isMounted, context, pathname]); // ‚úÖ –ó–∞–≤–∏—Å–∏—Ç –æ—Ç isMounted

  // ‚úÖ –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –æ—Ç–¥–µ–ª—å–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  useEffect(() => {
    if (isMounted) {
      console.log(`üìç 3GIS ClientProvider: context=${context}, path=${pathname}`);
    }
  }, [isMounted, context, pathname]);

  if (!isMounted) {
    return null;
  }

  // –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ Suspense –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
  return (
    <Suspense fallback={
      <div className="flex items-center justify-center min-h-screen">
        <Loader2 className="h-10 w-10 animate-spin text-blue-500" />
      </div>
    }>
      {context === 'website' && <WebsiteProvider>{children}</WebsiteProvider>}
      {context === 'telegram' && <TelegramProvider>{children}</TelegramProvider>}
      {context === 'admin' && <AdminProvider>{children}</AdminProvider>}
    </Suspense>
  );
}
