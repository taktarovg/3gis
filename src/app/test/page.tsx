'use client';

import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { ClientButton } from '@/components/ui/client-button';
import { ImageUpload } from '@/components/ui/image-upload';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { CheckCircle2, AlertCircle, Clock, ArrowLeft } from 'lucide-react';
import Link from 'next/link';

export default function TestPage() {
  const [testResults, setTestResults] = useState<{[key: string]: 'pending' | 'success' | 'error'}>({
    clientButton: 'pending',
    imageUpload: 'pending',
    localStorage: 'pending',
    blogAPI: 'pending'
  });

  const [uploadedImage, setUploadedImage] = useState<string>('');

  const runTest = async (testName: string, testFn: () => Promise<void>) => {
    setTestResults(prev => ({ ...prev, [testName]: 'pending' }));
    try {
      await testFn();
      setTestResults(prev => ({ ...prev, [testName]: 'success' }));
    } catch (error) {
      console.error(`Test ${testName} failed:`, error);
      setTestResults(prev => ({ ...prev, [testName]: 'error' }));
    }
  };

  const testClientButton = async () => {
    // –ü—Ä–æ—Å—Ç–æ —Ç–µ—Å—Ç–∏—Ä—É–µ–º —á—Ç–æ –∫–Ω–æ–ø–∫–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∞–∂–∞—Ç–∞ –±–µ–∑ –æ—à–∏–±–æ–∫
    await new Promise(resolve => setTimeout(resolve, 500));
  };

  const testLocalStorage = async () => {
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é —Ä–∞–±–æ—Ç—É —Å localStorage
    if (typeof window !== 'undefined' && window.localStorage) {
      localStorage.setItem('test', 'value');
      const value = localStorage.getItem('test');
      if (value !== 'value') throw new Error('localStorage not working');
      localStorage.removeItem('test');
    }
  };

  const testBlogAPI = async () => {
    const response = await fetch('/api/blog/posts?limit=5');
    if (!response.ok) {
      throw new Error(`API returned ${response.status}`);
    }
    const data = await response.json();
    if (!data.posts || !Array.isArray(data.posts)) {
      throw new Error('Invalid API response');
    }
  };

  const getStatusIcon = (status: 'pending' | 'success' | 'error') => {
    switch (status) {
      case 'pending':
        return <Clock className="w-5 h-5 text-yellow-500" />;
      case 'success':
        return <CheckCircle2 className="w-5 h-5 text-green-500" />;
      case 'error':
        return <AlertCircle className="w-5 h-5 text-red-500" />;
    }
  };

  const getStatusText = (status: 'pending' | 'success' | 'error') => {
    switch (status) {
      case 'pending':
        return '–û–∂–∏–¥–∞–Ω–∏–µ...';
      case 'success':
        return '‚úÖ –£—Å–ø–µ—à–Ω–æ';
      case 'error':
        return '‚ùå –û—à–∏–±–∫–∞';
    }
  };

  const runAllTests = async () => {
    await runTest('localStorage', testLocalStorage);
    await runTest('clientButton', testClientButton);
    await runTest('blogAPI', testBlogAPI);
    setTestResults(prev => ({ ...prev, imageUpload: uploadedImage ? 'success' : 'pending' }));
  };

  return (
    <div className="p-6 max-w-4xl mx-auto space-y-6">
      {/* Header */}
      <div className="flex items-center gap-4">
        <Link href="/admin">
          <Button variant="outline" size="sm">
            <ArrowLeft className="w-4 h-4 mr-2" />
            –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É
          </Button>
        </Link>
        <div>
          <h1 className="text-2xl font-bold">üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π 3GIS</h1>
          <p className="text-gray-600">–ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –≤—Å–µ –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã</p>
        </div>
      </div>

      {/* –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π */}
      <Card>
        <CardHeader>
          <CardTitle>–û–±—â–∏–π —Ç–µ—Å—Ç</CardTitle>
        </CardHeader>
        <CardContent>
          <ClientButton onClick={runAllTests} className="w-full" size="lg">
            üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã
          </ClientButton>
        </CardContent>
      </Card>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        {/* –¢–µ—Å—Ç ClientButton */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center justify-between">
              <span>ClientButton –∫–æ–º–ø–æ–Ω–µ–Ω—Ç</span>
              {getStatusIcon(testResults.clientButton)}
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <p className="text-sm text-gray-600">
              –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –∫–Ω–æ–ø–∫–∏ —Å onClick —Ä–∞–±–æ—Ç–∞—é—Ç –±–µ–∑ –æ—à–∏–±–æ–∫ Server/Client
            </p>
            <ClientButton 
              onClick={() => runTest('clientButton', testClientButton)}
              className="w-full"
            >
              –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å ClientButton
            </ClientButton>
            <p className="text-sm font-medium">
              –°—Ç–∞—Ç—É—Å: {getStatusText(testResults.clientButton)}
            </p>
          </CardContent>
        </Card>

        {/* –¢–µ—Å—Ç localStorage */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center justify-between">
              <span>localStorage (SSR Safe)</span>
              {getStatusIcon(testResults.localStorage)}
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <p className="text-sm text-gray-600">
              –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å localStorage –±–µ–∑ –æ—à–∏–±–æ–∫ hydration
            </p>
            <ClientButton 
              onClick={() => runTest('localStorage', testLocalStorage)}
              className="w-full"
            >
              –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å localStorage
            </ClientButton>
            <p className="text-sm font-medium">
              –°—Ç–∞—Ç—É—Å: {getStatusText(testResults.localStorage)}
            </p>
          </CardContent>
        </Card>

        {/* –¢–µ—Å—Ç ImageUpload */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center justify-between">
              <span>ImageUpload –∫–æ–º–ø–æ–Ω–µ–Ω—Ç</span>
              {getStatusIcon(testResults.imageUpload)}
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <p className="text-sm text-gray-600">
              –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å drag & drop —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é
            </p>
            <ImageUpload
              onImageUpload={(url) => {
                setUploadedImage(url);
                setTestResults(prev => ({ ...prev, imageUpload: 'success' }));
              }}
              onImageRemove={() => {
                setUploadedImage('');
                setTestResults(prev => ({ ...prev, imageUpload: 'pending' }));
              }}
              currentImage={uploadedImage}
              maxSize={5}
            />
            <p className="text-sm font-medium">
              –°—Ç–∞—Ç—É—Å: {getStatusText(testResults.imageUpload)}
            </p>
          </CardContent>
        </Card>

        {/* –¢–µ—Å—Ç Blog API */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center justify-between">
              <span>Blog API</span>
              {getStatusIcon(testResults.blogAPI)}
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <p className="text-sm text-gray-600">
              –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ API –±–ª–æ–≥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ 404 –æ—à–∏–±–æ–∫
            </p>
            <ClientButton 
              onClick={() => runTest('blogAPI', testBlogAPI)}
              className="w-full"
            >
              –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å Blog API
            </ClientButton>
            <p className="text-sm font-medium">
              –°—Ç–∞—Ç—É—Å: {getStatusText(testResults.blogAPI)}
            </p>
          </CardContent>
        </Card>
      </div>

      {/* –°—Ç–∞—Ç—É—Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π */}
      <Card>
        <CardHeader>
          <CardTitle>üìä –û—Ç—á–µ—Ç –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-3">
            <div className="flex items-center justify-between p-3 border rounded-lg">
              <span>üîß Event handlers –≤ Client Component props</span>
              <span className="text-green-600 font-medium">‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ</span>
            </div>
            <div className="flex items-center justify-between p-3 border rounded-lg">
              <span>üíæ localStorage warnings (SSR)</span>
              <span className="text-green-600 font-medium">‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ</span>
            </div>
            <div className="flex items-center justify-between p-3 border rounded-lg">
              <span>üì∑ ImageUpload —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å</span>
              <span className="text-green-600 font-medium">‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ</span>
            </div>
            <div className="flex items-center justify-between p-3 border rounded-lg">
              <span>üîó API endpoints –±–ª–æ–≥–∞</span>
              <span className="text-green-600 font-medium">‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ</span>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* –°—Å—ã–ª–∫–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */}
      <Card>
        <CardHeader>
          <CardTitle>üîó –î–∞–ª—å–Ω–µ–π—à–µ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-3">
            <Link href="/admin/blog">
              <Button variant="outline" className="w-full">
                –ê–¥–º–∏–Ω–∫–∞ –±–ª–æ–≥–∞
              </Button>
            </Link>
            <Link href="/admin/blog/create">
              <Button variant="outline" className="w-full">
                –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏
              </Button>
            </Link>
            <Link href="/blog">
              <Button variant="outline" className="w-full">
                –ü—É–±–ª–∏—á–Ω—ã–π –±–ª–æ–≥
              </Button>
            </Link>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}