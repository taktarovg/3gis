// src/app/tg/diagnostic/page.tsx
'use client';

import { useEffect, useState } from 'react';

interface DiagnosticData {
  userAgent: string;
  url: string;
  timestamp: string;
  telegramAPI: {
    available: boolean;
    version?: string;
    platform?: string;
    initData?: string;
    initDataUnsafe?: any;
  };
  environment: {
    isMainFrame: boolean;
    hasWebApp: boolean;
    hasParent: boolean;
  };
  urlParams: Record<string, string>;
}

export default function TelegramDiagnosticPage() {
  const [diagnostic, setDiagnostic] = useState<DiagnosticData | null>(null);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    try {
      const webApp = (window as any)?.Telegram?.WebApp;
      const urlParams = new URLSearchParams(window.location.search);
      const paramsObj: Record<string, string> = {};
      
      for (const [key, value] of urlParams.entries()) {
        paramsObj[key] = value;
      }

      const data: DiagnosticData = {
        userAgent: navigator.userAgent,
        url: window.location.href,
        timestamp: new Date().toISOString(),
        telegramAPI: {
          available: !!webApp,
          version: webApp?.version,
          platform: webApp?.platform,
          initData: webApp?.initData || '–Ω–µ –Ω–∞–π–¥–µ–Ω',
          initDataUnsafe: webApp?.initDataUnsafe
        },
        environment: {
          isMainFrame: window.self === window.top,
          hasWebApp: !!webApp,
          hasParent: window.parent !== window
        },
        urlParams: paramsObj
      };

      setDiagnostic(data);
      
      // ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ middleware
      fetch('/api/diagnostic', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(data)
      }).catch(err => console.log('‚ÑπÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:', err));
      
      // –¢–∞–∫–∂–µ –ª–æ–≥–∏—Ä—É–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
      console.log('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê TELEGRAM DESKTOP:', data);
    } catch (err) {
      const errorMsg = err instanceof Error ? err.message : String(err);
      setError(errorMsg);
      console.error('‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', err);
    }
  }, []);

  if (error) {
    return (
      <div className="min-h-screen p-4 bg-red-50">
        <div className="max-w-4xl mx-auto">
          <h1 className="text-2xl font-bold text-red-800 mb-4">–û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏</h1>
          <div className="bg-white p-4 rounded-lg border border-red-200">
            <pre className="text-sm text-red-600">{error}</pre>
          </div>
        </div>
      </div>
    );
  }

  if (!diagnostic) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-4"></div>
          <p>–°–±–æ—Ä –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen p-4 bg-gray-50">
      <div className="max-w-4xl mx-auto">
        <h1 className="text-3xl font-bold text-gray-800 mb-6">üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ Telegram Desktop</h1>
        
        <div className="bg-white rounded-lg shadow-md p-6 mb-6">
          <h2 className="text-xl font-semibold mb-4 text-blue-600">–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h2>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <h3 className="font-medium text-gray-700">URL:</h3>
              <p className="text-sm font-mono bg-gray-100 p-2 rounded break-all">{diagnostic.url}</p>
            </div>
            <div>
              <h3 className="font-medium text-gray-700">–í—Ä–µ–º—è:</h3>
              <p className="text-sm">{diagnostic.timestamp}</p>
            </div>
          </div>
        </div>

        <div className="bg-white rounded-lg shadow-md p-6 mb-6">
          <h2 className="text-xl font-semibold mb-4 text-green-600">User Agent</h2>
          <div className="bg-gray-100 p-4 rounded">
            <p className="text-sm font-mono break-all">{diagnostic.userAgent}</p>
          </div>
          <div className="mt-4 grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
            <div className={`p-2 rounded ${diagnostic.userAgent.includes('TelegramDesktop') ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}`}>
              TelegramDesktop: {diagnostic.userAgent.includes('TelegramDesktop') ? '‚úÖ' : '‚ùå'}
            </div>
            <div className={`p-2 rounded ${diagnostic.userAgent.includes('Telegram Desktop') ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}`}>
              Telegram Desktop: {diagnostic.userAgent.includes('Telegram Desktop') ? '‚úÖ' : '‚ùå'}
            </div>
            <div className={`p-2 rounded ${diagnostic.userAgent.includes('Telegram/') ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}`}>
              Telegram/: {diagnostic.userAgent.includes('Telegram/') ? '‚úÖ' : '‚ùå'}
            </div>
            <div className={`p-2 rounded ${diagnostic.userAgent.includes('TelegramBot') ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}`}>
              TelegramBot: {diagnostic.userAgent.includes('TelegramBot') ? '‚úÖ' : '‚ùå'}
            </div>
          </div>
        </div>

        <div className="bg-white rounded-lg shadow-md p-6 mb-6">
          <h2 className="text-xl font-semibold mb-4 text-purple-600">Telegram WebApp API</h2>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <h3 className="font-medium text-gray-700 mb-2">–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API:</h3>
              <div className={`p-3 rounded ${diagnostic.telegramAPI.available ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}`}>
                {diagnostic.telegramAPI.available ? '‚úÖ WebApp API –¥–æ—Å—Ç—É–ø–µ–Ω' : '‚ùå WebApp API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}
              </div>
            </div>
            {diagnostic.telegramAPI.available && (
              <>
                <div>
                  <h3 className="font-medium text-gray-700 mb-2">–í–µ—Ä—Å–∏—è:</h3>
                  <p className="bg-gray-100 p-2 rounded">{diagnostic.telegramAPI.version || '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞'}</p>
                </div>
                <div>
                  <h3 className="font-medium text-gray-700 mb-2">–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:</h3>
                  <p className="bg-gray-100 p-2 rounded">{diagnostic.telegramAPI.platform || '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞'}</p>
                </div>
                <div>
                  <h3 className="font-medium text-gray-700 mb-2">Init Data:</h3>
                  <p className="bg-gray-100 p-2 rounded text-sm break-all">
                    {diagnostic.telegramAPI.initData ? '–ï—Å—Ç—å –¥–∞–Ω–Ω—ã–µ' : '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}
                  </p>
                </div>
              </>
            )}
          </div>
          
          {diagnostic.telegramAPI.initDataUnsafe && (
            <div className="mt-4">
              <h3 className="font-medium text-gray-700 mb-2">Init Data Unsafe:</h3>
              <pre className="bg-gray-100 p-4 rounded text-xs overflow-auto">
                {JSON.stringify(diagnostic.telegramAPI.initDataUnsafe, null, 2)}
              </pre>
            </div>
          )}
        </div>

        <div className="bg-white rounded-lg shadow-md p-6 mb-6">
          <h2 className="text-xl font-semibold mb-4 text-orange-600">–°—Ä–µ–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è</h2>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div className={`p-3 rounded ${diagnostic.environment.isMainFrame ? 'bg-green-100 text-green-800' : 'bg-yellow-100 text-yellow-800'}`}>
              –ì–ª–∞–≤–Ω—ã–π —Ñ—Ä–µ–π–º: {diagnostic.environment.isMainFrame ? '‚úÖ –î–∞' : '‚ö†Ô∏è –ù–µ—Ç'}
            </div>
            <div className={`p-3 rounded ${diagnostic.environment.hasWebApp ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}`}>
              WebApp API: {diagnostic.environment.hasWebApp ? '‚úÖ –ï—Å—Ç—å' : '‚ùå –ù–µ—Ç'}
            </div>
            <div className={`p-3 rounded ${!diagnostic.environment.hasParent ? 'bg-green-100 text-green-800' : 'bg-yellow-100 text-yellow-800'}`}>
              –í–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç—å: {!diagnostic.environment.hasParent ? '‚úÖ –û—Å–Ω–æ–≤–Ω–æ–µ –æ–∫–Ω–æ' : '‚ö†Ô∏è –í–æ —Ñ—Ä–µ–π–º–µ'}
            </div>
          </div>
        </div>

        {Object.keys(diagnostic.urlParams).length > 0 && (
          <div className="bg-white rounded-lg shadow-md p-6 mb-6">
            <h2 className="text-xl font-semibold mb-4 text-indigo-600">URL –ø–∞—Ä–∞–º–µ—Ç—Ä—ã</h2>
            <div className="space-y-2">
              {Object.entries(diagnostic.urlParams).map(([key, value]) => (
                <div key={key} className="flex flex-col md:flex-row">
                  <span className="font-medium text-gray-700 md:w-32">{key}:</span>
                  <span className="bg-gray-100 p-1 rounded flex-1 font-mono text-sm break-all">{value}</span>
                </div>
              ))}
            </div>
          </div>
        )}

        <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
          <h3 className="font-semibold text-blue-800 mb-2">üí° –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</h3>
          <ol className="text-sm text-blue-700 space-y-1">
            <li>1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç—É –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é</li>
            <li>2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ User Agent —Å–æ–¥–µ—Ä–∂–∏—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ Telegram</li>
            <li>3. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ WebApp API –¥–æ—Å—Ç—É–ø–µ–Ω (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å ‚úÖ)</li>
            <li>4. –ï—Å–ª–∏ WebApp API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –ø—Ä–æ–±–ª–µ–º–∞ –≤ —Ç–æ–º, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –æ—Ç–∫—Ä—ã—Ç–∞ –∫–∞–∫ Mini App</li>
            <li>5. –û—Ç–∫—Ä–æ–π—Ç–µ –≤ Telegram Desktop —á–µ—Ä–µ–∑: t.me/ThreeGIS_bot/app</li>
          </ol>
        </div>

        <div className="mt-6 text-center">
          <button
            onClick={() => navigator.clipboard.writeText(JSON.stringify(diagnostic, null, 2))}
            className="bg-blue-500 hover:bg-blue-600 text-white px-6 py-2 rounded-lg transition-colors"
          >
            üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å JSON –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
          </button>
        </div>
      </div>
    </div>
  );
}
