'use client';

import { useEffect, useState } from 'react';
import { CheckCircle, XCircle, AlertTriangle, Loader2, RefreshCw, Settings, Copy } from 'lucide-react';

/**
 * ‚úÖ –°–¢–†–ê–ù–ò–¶–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø MIDDLEWARE v15
 * 
 * –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–±–æ—Ç—É Hybrid Middleware v15
 * —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ user-agent –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
 */

interface TestResult {
  url: string;
  method: string;
  userAgent: string;
  expectedResult: string;
  actualResult: string;
  passed: boolean;
  notes?: string;
}

export default function MiddlewareTestPage() {
  const [results, setResults] = useState<TestResult[]>([]);
  const [isRunning, setIsRunning] = useState(false);
  const [currentUserAgent, setCurrentUserAgent] = useState('');
  const [customUserAgent, setCustomUserAgent] = useState('');
  const [useCustomUA, setUseCustomUA] = useState(false);

  useEffect(() => {
    if (typeof window !== 'undefined') {
      setCurrentUserAgent(navigator.userAgent);
    }
  }, []);

  // –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ User-Agent –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const testUserAgents = [
    {
      name: 'Chrome Desktop (–û–±—ã—á–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä)',
      ua: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
      expected: 'redirect-to-tg-redirect'
    },
    {
      name: 'Telegram Desktop (–¥–æ–ª–∂–µ–Ω –ø—Ä–æ—Ö–æ–¥–∏—Ç—å)',
      ua: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36 TelegramDesktop/4.12.4',
      expected: 'allow-access'
    },
    {
      name: 'Telegram Android',
      ua: 'Mozilla/5.0 (Linux; Android 13; SM-G991B) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Mobile Safari/537.36 Telegram-Android/10.5.2 (Samsung SM-G991B; Android 13; SDK 33; AVERAGE)',
      expected: 'allow-access'
    },
    {
      name: 'Telegram iOS',
      ua: 'Mozilla/5.0 (iPhone; CPU iPhone OS 17_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.0 Mobile/15E148 Safari/604.1 Telegram 10.3.1',
      expected: 'allow-access'
    },
    {
      name: 'Safari Mobile (–æ–±—ã—á–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä)',
      ua: 'Mozilla/5.0 (iPhone; CPU iPhone OS 17_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.0 Mobile/15E148 Safari/604.1',
      expected: 'redirect-to-tg-detect'
    },
    {
      name: 'Chrome Android (–æ–±—ã—á–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä)',
      ua: 'Mozilla/5.0 (Linux; Android 13; SM-G991B) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Mobile Safari/537.36',
      expected: 'redirect-to-tg-detect'
    },
    {
      name: 'Firefox Desktop',
      ua: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:121.0) Gecko/20100101 Firefox/121.0',
      expected: 'redirect-to-tg-redirect'
    },
    {
      name: 'Edge Desktop',
      ua: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36 Edg/120.0.0.0',
      expected: 'redirect-to-tg-redirect'
    }
  ];

  // –¢–∏–ø–∏–∑–∞—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
  interface TestScenario {
    name: string;
    url: string;
    params: Record<string, string | undefined>;
    description: string;
  }

  // –¢–µ—Å—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
  const testScenarios: TestScenario[] = [
    {
      name: '–û–±—ã—á–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ /tg',
      url: '/tg',
      params: {},
      description: '–ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç middleware –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤'
    },
    {
      name: '–° –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º startapp',
      url: '/tg',
      params: { startapp: 'test123' },
      description: '–¢–µ—Å—Ç —Å —è–≤–Ω—ã–º Telegram –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º (–¥–æ–ª–∂–µ–Ω –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –≤—Å–µ–≥–¥–∞)'
    },
    {
      name: '–° –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º tg=1',
      url: '/tg',
      params: { tg: '1' },
      description: '–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –æ–±—Ö–æ–¥ middleware'
    },
    {
      name: '–î–æ—Å—Ç—É–ø –∫ /tg/businesses',
      url: '/tg/businesses',
      params: {},
      description: '–¢–µ—Å—Ç –≥–ª—É–±–æ–∫–æ–π —Å—Å—ã–ª–∫–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏'
    },
    {
      name: '–°–ª—É–∂–µ–±–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ /tg-redirect',
      url: '/tg-redirect',
      params: {},
      description: '–°–ª—É–∂–µ–±–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–æ–ª–∂–Ω—ã –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –≤—Å–µ–≥–¥–∞'
    },
    {
      name: '–°–ª—É–∂–µ–±–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ /tg-detect',
      url: '/tg-detect',
      params: {},
      description: '–°—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏ –¥–æ–ª–∂–Ω–∞ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –≤—Å–µ–≥–¥–∞'
    }
  ];

  async function runSingleTest(
    userAgent: string,
    scenario: TestScenario,
    expectedForUA: string
  ): Promise<TestResult> {
    // –§–∏–ª—å—Ç—Ä—É–µ–º undefined –∑–Ω–∞—á–µ–Ω–∏—è –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ —Å—Ç—Ä–æ–∫–∞–º
    const filteredParams: Record<string, string> = {};
    Object.entries(scenario.params).forEach(([key, value]) => {
      if (value !== undefined) {
        filteredParams[key] = String(value);
      }
    });
    
    const params = new URLSearchParams(filteredParams);
    const testUrl = scenario.url + (params.toString() ? '?' + params.toString() : '');
    
    try {
      // –°–∏–º—É–ª–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å —Å –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–º User-Agent
      const response = await fetch(testUrl, {
        method: 'HEAD', // –ò—Å–ø–æ–ª—å–∑—É–µ–º HEAD —á—Ç–æ–±—ã –Ω–µ –∑–∞–≥—Ä—É–∂–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç
        headers: useCustomUA ? {
          'User-Agent': userAgent
        } : {},
        redirect: 'manual' // –ù–µ —Å–ª–µ–¥—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞–º
      });

      let actualResult = '';
      let notes = '';

      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
      if (response.status === 200) {
        actualResult = 'allow-access';
        notes = '–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ';
      } else if (response.status === 307 || response.status === 302) {
        const location = response.headers.get('location') || '';
        if (location.includes('/tg-redirect')) {
          actualResult = 'redirect-to-tg-redirect';
          notes = `–†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞: ${location}`;
        } else if (location.includes('/tg-detect')) {
          actualResult = 'redirect-to-tg-detect';
          notes = `–†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –¥–µ—Ç–µ–∫—Ü–∏—é: ${location}`;
        } else {
          actualResult = 'redirect-other';
          notes = `–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ä–µ–¥–∏—Ä–µ–∫—Ç: ${location}`;
        }
      } else {
        actualResult = 'error';
        notes = `HTTP ${response.status}`;
      }

      // –î–ª—è —Å–ª—É–∂–µ–±–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü –æ–∂–∏–¥–∞–µ–º –≤—Å–µ–≥–¥–∞ allow-access
      if (scenario.url.startsWith('/tg-redirect') || scenario.url.startsWith('/tg-detect')) {
        expectedForUA = 'allow-access';
      }

      // –î–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ —Å —è–≤–Ω—ã–º–∏ Telegram –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –æ–∂–∏–¥–∞–µ–º allow-access
      if (scenario.params.startapp || scenario.params.tg || scenario.params.tgWebAppData) {
        expectedForUA = 'allow-access';
      }

      const passed = actualResult === expectedForUA;

      return {
        url: testUrl,
        method: 'HEAD',
        userAgent: userAgent.substring(0, 60) + '...',
        expectedResult: expectedForUA,
        actualResult,
        passed,
        notes
      };

    } catch (error) {
      return {
        url: testUrl,
        method: 'HEAD',
        userAgent: userAgent.substring(0, 60) + '...',
        expectedResult: expectedForUA,
        actualResult: 'error',
        passed: false,
        notes: `–û—à–∏–±–∫–∞: ${error instanceof Error ? error.message : 'Unknown error'}`
      };
    }
  }

  async function runAllTests() {
    setIsRunning(true);
    setResults([]);

    const allResults: TestResult[] = [];

    for (const userAgentInfo of testUserAgents) {
      for (const scenario of testScenarios) {
        const result = await runSingleTest(
          userAgentInfo.ua,
          scenario,
          userAgentInfo.expected
        );
        
        result.notes = `${userAgentInfo.name} - ${scenario.description}${result.notes ? ` | ${result.notes}` : ''}`;
        allResults.push(result);
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ –º–µ—Ä–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        setResults(prev => [...prev, result]);
        
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
        await new Promise(resolve => setTimeout(resolve, 100));
      }
    }

    setIsRunning(false);
  }

  function copyResults() {
    const text = results.map(r => 
      `${r.passed ? '‚úÖ' : '‚ùå'} ${r.notes}\n` +
      `   URL: ${r.url}\n` +
      `   Expected: ${r.expectedResult}, Got: ${r.actualResult}\n`
    ).join('\n');
    
    navigator.clipboard.writeText(text);
  }

  const passedTests = results.filter(r => r.passed).length;
  const failedTests = results.filter(r => !r.passed).length;

  return (
    <div className="min-h-screen bg-gray-50 p-4">
      <div className="max-w-6xl mx-auto">
        <div className="bg-white rounded-lg shadow-lg p-6">
          {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
          <div className="mb-6">
            <h1 className="text-3xl font-bold text-gray-900 mb-2">
              üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Middleware v15
            </h1>
            <p className="text-gray-600">
              –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã Hybrid Middleware —Å 3-—É—Ä–æ–≤–Ω–µ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π –¥–µ—Ç–µ–∫—Ü–∏–∏
            </p>
          </div>

          {/* –¢–µ–∫—É—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
          <div className="mb-6 grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="bg-blue-50 rounded-lg p-4">
              <h3 className="font-semibold text-blue-800 mb-2">
                üîç –¢–µ–∫—É—â–µ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
              </h3>
              <div className="text-sm text-blue-700 space-y-1">
                <p><strong>URL:</strong> {typeof window !== 'undefined' ? window.location.href : 'N/A'}</p>
                <p><strong>User-Agent:</strong></p>
                <p className="break-all text-xs bg-blue-100 p-2 rounded">
                  {currentUserAgent || '–ó–∞–≥—Ä—É–∑–∫–∞...'}
                </p>
              </div>
            </div>

            <div className="bg-green-50 rounded-lg p-4">
              <h3 className="font-semibold text-green-800 mb-2">
                üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ—Å—Ç–æ–≤
              </h3>
              <div className="text-sm text-green-700 space-y-1">
                <p><strong>–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤:</strong> {results.length}</p>
                <p><strong>–ü—Ä–æ–π–¥–µ–Ω–æ:</strong> <span className="text-green-600">‚úÖ {passedTests}</span></p>
                <p><strong>–ü—Ä–æ–≤–∞–ª–µ–Ω–æ:</strong> <span className="text-red-600">‚ùå {failedTests}</span></p>
                <p><strong>–£—Å–ø–µ—à–Ω–æ—Å—Ç—å:</strong> {results.length > 0 ? Math.round((passedTests / results.length) * 100) : 0}%</p>
              </div>
            </div>
          </div>

          {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */}
          <div className="mb-6 bg-gray-50 rounded-lg p-4">
            <h3 className="font-semibold text-gray-800 mb-3 flex items-center">
              <Settings className="w-5 h-5 mr-2" />
              –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            </h3>
            
            <div className="flex items-center space-x-4 mb-3">
              <label className="flex items-center">
                <input
                  type="checkbox"
                  checked={useCustomUA}
                  onChange={(e) => setUseCustomUA(e.target.checked)}
                  className="mr-2"
                />
                –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–π User-Agent
              </label>
            </div>

            {useCustomUA && (
              <div className="mb-3">
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  –ö–∞—Å—Ç–æ–º–Ω—ã–π User-Agent:
                </label>
                <input
                  type="text"
                  value={customUserAgent}
                  onChange={(e) => setCustomUserAgent(e.target.value)}
                  placeholder="–í–≤–µ–¥–∏—Ç–µ User-Agent –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è..."
                  className="w-full px-3 py-2 border border-gray-300 rounded-md text-sm"
                />
              </div>
            )}

            <div className="text-xs text-gray-500">
              <p>‚ö†Ô∏è –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ User-Agent –≤ –±—Ä–∞—É–∑–µ—Ä–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ –ø–æ–ª–∏—Ç–∏–∫–∞–º–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.</p>
              <p>–î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∏–ª–∏ –≤–Ω–µ—à–Ω–∏–µ —Å–µ—Ä–≤–∏—Å—ã.</p>
            </div>
          </div>

          {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
          <div className="mb-6 flex flex-wrap gap-3">
            <button
              onClick={runAllTests}
              disabled={isRunning}
              className="flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:bg-gray-400 disabled:cursor-not-allowed transition-colors"
            >
              {isRunning ? (
                <Loader2 className="w-4 h-4 mr-2 animate-spin" />
              ) : (
                <RefreshCw className="w-4 h-4 mr-2" />
              )}
              {isRunning ? '–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...' : '–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã'}
            </button>

            {results.length > 0 && (
              <button
                onClick={copyResults}
                className="flex items-center px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700 transition-colors"
              >
                <Copy className="w-4 h-4 mr-2" />
                –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
              </button>
            )}

            <button
              onClick={() => setResults([])}
              className="flex items-center px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors"
            >
              –û—á–∏—Å—Ç–∏—Ç—å
            </button>
          </div>

          {/* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ */}
          {results.length > 0 && (
            <div className="space-y-3">
              <h3 className="text-xl font-semibold text-gray-900">
                üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
              </h3>

              <div className="space-y-2">
                {results.map((result, index) => (
                  <div
                    key={index}
                    className={`border rounded-lg p-4 ${
                      result.passed 
                        ? 'border-green-200 bg-green-50' 
                        : 'border-red-200 bg-red-50'
                    }`}
                  >
                    <div className="flex items-start justify-between">
                      <div className="flex-1">
                        <div className="flex items-center mb-2">
                          {result.passed ? (
                            <CheckCircle className="w-5 h-5 text-green-600 mr-2" />
                          ) : (
                            <XCircle className="w-5 h-5 text-red-600 mr-2" />
                          )}
                          <span className="font-medium">
                            {result.notes}
                          </span>
                        </div>

                        <div className="text-sm space-y-1">
                          <p><strong>URL:</strong> <code className="bg-gray-100 px-2 py-1 rounded">{result.url}</code></p>
                          <p><strong>–û–∂–∏–¥–∞–ª—Å—è:</strong> <span className="text-blue-600">{result.expectedResult}</span></p>
                          <p><strong>–ü–æ–ª—É—á–µ–Ω:</strong> <span className={result.passed ? 'text-green-600' : 'text-red-600'}>{result.actualResult}</span></p>
                          <p><strong>User-Agent:</strong> <span className="text-gray-600 text-xs">{result.userAgent}</span></p>
                        </div>
                      </div>

                      <div className="ml-4">
                        {result.passed ? (
                          <span className="text-green-600 font-semibold">‚úÖ PASS</span>
                        ) : (
                          <span className="text-red-600 font-semibold">‚ùå FAIL</span>
                        )}
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          )}

          {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ—Å—Ç–∏—Ä—É–µ–º—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏—è—Ö */}
          <div className="mt-8 bg-gray-50 rounded-lg p-4">
            <h3 className="font-semibold text-gray-800 mb-3">
              üìã –¢–µ—Å—Ç–∏—Ä—É–µ–º—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
            </h3>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
              <div>
                <h4 className="font-medium text-gray-700 mb-2">User-Agent —Ç–µ—Å—Ç—ã:</h4>
                <ul className="space-y-1 text-gray-600">
                  {testUserAgents.map((ua, i) => (
                    <li key={i}>
                      ‚Ä¢ {ua.name} ‚Üí {ua.expected}
                    </li>
                  ))}
                </ul>
              </div>
              <div>
                <h4 className="font-medium text-gray-700 mb-2">URL —Å—Ü–µ–Ω–∞—Ä–∏–∏:</h4>
                <ul className="space-y-1 text-gray-600">
                  {testScenarios.map((scenario, i) => (
                    <li key={i}>
                      ‚Ä¢ {scenario.name} ({scenario.url})
                    </li>
                  ))}
                </ul>
              </div>
            </div>
          </div>

          {/* –ë—ã—Å—Ç—Ä—ã–µ —Å—Å—ã–ª–∫–∏ */}
          <div className="mt-6 pt-6 border-t">
            <h3 className="font-semibold text-gray-800 mb-3">
              üîó –ë—ã—Å—Ç—Ä—ã–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            </h3>
            <div className="grid grid-cols-2 md:grid-cols-4 gap-2 text-sm">
              <a href="/tg" className="px-3 py-2 bg-blue-100 text-blue-700 rounded hover:bg-blue-200 transition-colors text-center">
                /tg
              </a>
              <a href="/tg?startapp=test" className="px-3 py-2 bg-green-100 text-green-700 rounded hover:bg-green-200 transition-colors text-center">
                /tg?startapp=test
              </a>
              <a href="/tg-redirect" className="px-3 py-2 bg-orange-100 text-orange-700 rounded hover:bg-orange-200 transition-colors text-center">
                /tg-redirect
              </a>
              <a href="/tg-detect" className="px-3 py-2 bg-purple-100 text-purple-700 rounded hover:bg-purple-200 transition-colors text-center">
                /tg-detect
              </a>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}
