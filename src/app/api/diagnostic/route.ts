// src/app/api/diagnostic/route.ts
import { NextRequest, NextResponse } from 'next/server';

/**
 * ‚úÖ API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
 * –ü–æ–º–æ–∂–µ—Ç –ø–æ–Ω—è—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π User Agent –æ—Ç Telegram Desktop
 */
export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    
    // –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    console.log('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –û–¢ –ö–õ–ò–ï–ù–¢–ê:', {
      timestamp: new Date().toISOString(),
      clientData: body,
      serverHeaders: {
        userAgent: request.headers.get('user-agent'),
        referer: request.headers.get('referer'),
        xForwardedFor: request.headers.get('x-forwarded-for'),
        secFetchSite: request.headers.get('sec-fetch-site'),
        secFetchMode: request.headers.get('sec-fetch-mode'),
        secFetchDest: request.headers.get('sec-fetch-dest'),
      }
    });

    return NextResponse.json({ 
      status: 'success',
      message: '–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã',
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ API –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', error);
    
    return NextResponse.json(
      { 
        status: 'error', 
        message: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö' 
      },
      { status: 500 }
    );
  }
}

export async function GET() {
  return NextResponse.json({
    message: 'Diagnostic API endpoint. Use POST to send diagnostic data.',
    endpoints: {
      POST: '/api/diagnostic - send diagnostic data',
      GET: '/tg/diagnostic - web diagnostic page'
    }
  });
}
