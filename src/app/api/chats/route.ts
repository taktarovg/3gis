import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '@/lib/prisma';
import { z } from 'zod';

export const dynamic = 'force-dynamic';
export const maxDuration = 10;

// –°—Ö–µ–º–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞
const CreateChatSchema = z.object({
  title: z.string().min(3).max(100),
  description: z.string().optional(),
  username: z.string().optional(),
  inviteLink: z.string().url().optional(),
  type: z.enum(['GROUP', 'CHAT', 'CHANNEL']).default('GROUP'),
  cityId: z.number().optional(),
  stateId: z.string().optional(),
  topic: z.string().optional(),
  memberCount: z.number().min(0).default(0),
});

/**
 * GET /api/chats - –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
 */
export async function GET(request: NextRequest) {
  const requestId = Math.random().toString(36).substring(7);
  const startTime = Date.now();
  
  console.log(`üîç [${requestId}] CHATS API: Request started`);
  console.log(`üìã [${requestId}] URL: ${request.url}`);
  console.log(`üïê [${requestId}] Timestamp: ${new Date().toISOString()}`);
  
  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ë–î
    try {
      await prisma.$queryRaw`SELECT 1`;
      console.log(`‚úÖ [${requestId}] Database connection OK`);
    } catch (dbError) {
      console.error(`‚ùå [${requestId}] Database connection failed:`, dbError);
      return NextResponse.json(
        { error: 'Database unavailable' },
        { status: 503 }
      );
    }

    const { searchParams } = new URL(request.url);
    
    // –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
    const params = {
      type: searchParams.get('type'),
      cityId: searchParams.get('cityId'),
      stateId: searchParams.get('stateId'),
      topic: searchParams.get('topic'),
      search: searchParams.get('search'),
      status: searchParams.get('status'),
      isVerified: searchParams.get('isVerified'),
      page: searchParams.get('page') || '1',
      limit: searchParams.get('limit') || '20'
    };
    
    console.log(`üìä [${requestId}] Request params:`, params);
    
    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    const type = searchParams.get('type') as 'GROUP' | 'CHAT' | 'CHANNEL' | null;
    const cityId = searchParams.get('cityId');
    const stateId = searchParams.get('stateId');
    const topic = searchParams.get('topic');
    const search = searchParams.get('search');
    const status = searchParams.get('status') as 'PENDING' | 'ACTIVE' | 'REJECTED' | null;
    const isVerified = searchParams.get('isVerified');
    
    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    const page = parseInt(searchParams.get('page') || '1');
    const limit = Math.min(parseInt(searchParams.get('limit') || '20'), 50);
    const offset = (page - 1) * limit;
    
    console.log(`üìÑ [${requestId}] Pagination: page=${page}, limit=${limit}, offset=${offset}`);

    // –£—Å–ª–æ–≤–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    const where: any = {
      isActive: true,
      ...(status ? { status } : { status: 'ACTIVE' }), // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ
    };

    if (type) where.type = type;
    if (cityId) where.cityId = parseInt(cityId);
    if (stateId) where.stateId = stateId;
    if (topic) where.topic = { contains: topic, mode: 'insensitive' };
    if (isVerified) where.isVerified = isVerified === 'true';
    
    if (search) {
      where.OR = [
        { title: { contains: search, mode: 'insensitive' } },
        { description: { contains: search, mode: 'insensitive' } },
        { topic: { contains: search, mode: 'insensitive' } },
      ];
    }

    console.log(`üîç [${requestId}] WHERE clause:`, JSON.stringify(where, null, 2));

    // –ó–∞—Å–µ–∫–∞–µ–º –≤—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞ –∫ –ë–î
    const dbStartTime = Date.now();
    
    // –ó–∞–ø—Ä–æ—Å —á–∞—Ç–æ–≤
    const [chats, totalCount] = await Promise.all([
      prisma.telegramChat.findMany({
        where,
        select: {
          id: true,
          title: true,
          description: true,
          username: true,
          inviteLink: true,
          type: true,
          topic: true,
          memberCount: true,
          isVerified: true,
          isActive: true,
          viewCount: true,
          joinCount: true,
          status: true,
          createdAt: true,
          city: {
            select: { id: true, name: true, stateId: true }
          },
          state: {
            select: { id: true, name: true, fullName: true }
          },
          _count: {
            select: { favorites: true }
          }
        },
        orderBy: [
          { isVerified: 'desc' },  // –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–Ω–∞—á–∞–ª–∞
          { memberCount: 'desc' }, // –ë–æ–ª—å—à–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
          { createdAt: 'desc' }    // –ù–æ–≤—ã–µ —á–∞—Ç—ã
        ],
        skip: offset,
        take: limit,
      }),
      prisma.telegramChat.count({ where })
    ]);
    
    const dbDuration = Date.now() - dbStartTime;
    console.log(`‚ö° [${requestId}] Database query completed in ${dbDuration}ms`);
    console.log(`üìä [${requestId}] Found ${chats.length} chats, total: ${totalCount}`);

    // –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –º–æ–∂–µ—Ç —Ç–æ—Ä–º–æ–∑–∏—Ç—å)
    const statsStartTime = Date.now();
    const stats = await prisma.telegramChat.aggregate({
      where: { status: 'ACTIVE', isActive: true },
      _count: { _all: true },
      _sum: { memberCount: true },
    });
    const statsDuration = Date.now() - statsStartTime;
    console.log(`üìà [${requestId}] Stats query completed in ${statsDuration}ms`);

    const totalDuration = Date.now() - startTime;
    console.log(`üéâ [${requestId}] CHATS API: Request completed successfully in ${totalDuration}ms`);

    const response = {
      success: true,
      data: chats,
      pagination: {
        page,
        limit,
        totalCount,
        totalPages: Math.ceil(totalCount / limit),
        hasNextPage: offset + limit < totalCount,
        hasPreviousPage: page > 1,
      },
      stats: {
        totalChats: stats._count._all,
        totalMembers: stats._sum.memberCount || 0,
      },
      debug: {
        requestId,
        duration: totalDuration,
        dbDuration,
        statsDuration,
        timestamp: new Date().toISOString()
      }
    };

    return NextResponse.json(response);

  } catch (error) {
    const totalDuration = Date.now() - startTime;
    console.error(`‚ùå [${requestId}] CHATS API: Error after ${totalDuration}ms:`, error);
    
    if (error instanceof Error && error.message.includes('Max client connections')) {
      console.error(`üî• [${requestId}] DATABASE OVERLOAD - too many connections`);
      return NextResponse.json(
        { 
          success: false, 
          error: 'Server temporarily overloaded',
          requestId,
          duration: totalDuration
        },
        { status: 503, headers: { 'Retry-After': '5' } }
      );
    }
    
    return NextResponse.json(
      { 
        success: false, 
        error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤',
        requestId,
        duration: totalDuration
      },
      { status: 500 }
    );
  }
}

/**
 * POST /api/chats - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —á–∞—Ç (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
 */
export async function POST(request: NextRequest) {
  const requestId = Math.random().toString(36).substring(7);
  const startTime = Date.now();
  
  console.log(`üîç [${requestId}] CHATS POST: Create chat request started`);
  
  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ë–î
    try {
      await prisma.$queryRaw`SELECT 1`;
      console.log(`‚úÖ [${requestId}] Database connection OK`);
    } catch (dbError) {
      console.error(`‚ùå [${requestId}] Database connection failed:`, dbError);
      return NextResponse.json(
        { error: 'Database unavailable' },
        { status: 503 }
      );
    }

    const body = await request.json();
    console.log(`üìã [${requestId}] Request body:`, body);
    
    const validatedData = CreateChatSchema.parse(body);
    console.log(`‚úÖ [${requestId}] Data validation passed`);

    // TODO: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    // const { user } = await verifyAuth(request);
    // if (user?.role !== 'ADMIN') {
    //   return NextResponse.json({ error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤' }, { status: 403 });
    // }

    // –°–æ–∑–¥–∞–Ω–∏–µ —á–∞—Ç–∞
    const dbStartTime = Date.now();
    const chat = await prisma.telegramChat.create({
      data: {
        ...validatedData,
        status: 'PENDING', // –ù–æ–≤—ã–µ —á–∞—Ç—ã —Ç—Ä–µ–±—É—é—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏
      },
      include: {
        city: {
          select: { id: true, name: true, stateId: true }
        },
        state: {
          select: { id: true, name: true, fullName: true }
        }
      }
    });
    
    const dbDuration = Date.now() - dbStartTime;
    const totalDuration = Date.now() - startTime;
    
    console.log(`‚úÖ [${requestId}] Chat created successfully in ${dbDuration}ms`);
    console.log(`üéâ [${requestId}] CHATS POST: Request completed in ${totalDuration}ms`);

    return NextResponse.json({
      success: true,
      data: chat,
      message: '–ß–∞—Ç —Å–æ–∑–¥–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é',
      debug: {
        requestId,
        duration: totalDuration,
        dbDuration
      }
    });

  } catch (error) {
    const totalDuration = Date.now() - startTime;
    console.error(`‚ùå [${requestId}] CHATS POST: Error after ${totalDuration}ms:`, error);
    
    if (error instanceof z.ZodError) {
      console.error(`üìù [${requestId}] Validation error:`, error.errors);
      return NextResponse.json(
        { 
          success: false,
          error: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö',
          details: error.errors,
          requestId,
          duration: totalDuration
        },
        { status: 400 }
      );
    }

    if (error instanceof Error && error.message.includes('Max client connections')) {
      console.error(`üî• [${requestId}] DATABASE OVERLOAD during chat creation`);
      return NextResponse.json(
        { 
          success: false, 
          error: 'Server temporarily overloaded',
          requestId,
          duration: totalDuration
        },
        { status: 503, headers: { 'Retry-After': '5' } }
      );
    }

    return NextResponse.json(
      { 
        success: false, 
        error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞',
        requestId,
        duration: totalDuration
      },
      { status: 500 }
    );
  }
}