import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '@/lib/prisma';
import { z } from 'zod';

// –°—Ö–µ–º–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —á–∞—Ç–∞
const SuggestChatSchema = z.object({
  inviteLink: z.string().url('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É')
    .refine(url => url.startsWith('https://t.me/'), {
      message: '–°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å https://t.me/'
    }),
  comment: z.string().min(1, '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω').max(500, '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 500 —Å–∏–º–≤–æ–ª–æ–≤'),
  telegramUserId: z.string().min(1, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω')
});

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const { inviteLink, comment, telegramUserId } = SuggestChatSchema.parse(body);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –Ω–∞—à–µ–π –ë–î
    let user = await prisma.user.findFirst({
      where: { telegramId: telegramUserId }
    });

    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
    if (!user) {
      user = await prisma.user.create({
        data: {
          telegramId: telegramUserId,
          firstName: 'Telegram User',
          role: 'USER'
        }
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç —á–∞—Ç
    const existingChat = await prisma.telegramChat.findFirst({
      where: {
        OR: [
          { inviteLink: inviteLink },
          { username: extractUsernameFromLink(inviteLink) }
        ]
      }
    });

    if (existingChat) {
      return NextResponse.json(
        { error: '–≠—Ç–æ—Ç —á–∞—Ç —É–∂–µ –µ—Å—Ç—å –≤ –∫–∞—Ç–∞–ª–æ–≥–µ –∏–ª–∏ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏' },
        { status: 400 }
      );
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —á–∞—Ç–∞
    const suggestedChat = await prisma.telegramChat.create({
      data: {
        title: '–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–π —á–∞—Ç', // –ë—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ –ø—Ä–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        inviteLink: inviteLink,
        username: extractUsernameFromLink(inviteLink),
        description: comment,
        type: 'GROUP',
        status: 'PENDING',
        isActive: false,
        submittedById: user.id,
        submissionNote: comment,
        topic: '–û–±—â–µ–Ω–∏–µ' // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
      }
    });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É (@taktarovgv)
    await notifyAdmin(inviteLink, comment, telegramUserId);

    return NextResponse.json({
      success: true,
      message: '–í–∞—à —á–∞—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é. –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!',
      chatId: suggestedChat.id
    });

  } catch (error) {
    console.error('Error suggesting chat:', error);
    
    if (error instanceof z.ZodError) {
      return NextResponse.json(
        { error: error.errors[0].message },
        { status: 400 }
      );
    }

    return NextResponse.json(
      { error: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è' },
      { status: 500 }
    );
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è username –∏–∑ —Å—Å—ã–ª–∫–∏
function extractUsernameFromLink(link: string): string | null {
  try {
    const url = new URL(link);
    const pathname = url.pathname;
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º username –∏–∑ –ø—É—Ç–∏ /joinchat/... –∏–ª–∏ /+... –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ /username
    if (pathname.startsWith('/joinchat/') || pathname.startsWith('/+')) {
      return null; // –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ —Å—Å—ã–ª–∫–∏-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –Ω–µ –∏–º–µ—é—Ç username
    }
    
    const username = pathname.replace('/', '');
    return username || null;
  } catch {
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É
async function notifyAdmin(chatLink: string, comment: string, userId: string) {
  try {
    const botToken = process.env.TELEGRAM_BOT_TOKEN;
    if (!botToken) {
      console.warn('TELEGRAM_BOT_TOKEN not found, admin notification skipped');
      return;
    }

    // –ù–∞—Ö–æ–¥–∏–º –∞–¥–º–∏–Ω–∞ @taktarovgv –≤ –ë–î
    const admin = await prisma.user.findFirst({
      where: { username: 'taktarovgv' }
    });

    if (!admin?.telegramId) {
      console.warn('Admin @taktarovgv not found in database');
      return;
    }

    const message = `üîî *–ù–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —á–∞—Ç–∞ –≤ 3GIS*

üìé *–°—Å—ã–ª–∫–∞:* ${chatLink}
üí¨ *–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:* ${comment}
üë§ *–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:* ${userId}

üõ†Ô∏è –î–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å 3GIS`;

    await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: admin.telegramId,
        text: message,
        parse_mode: 'Markdown',
        disable_web_page_preview: true
      })
    });

    console.log(`Admin notification sent to @taktarovgv (${admin.telegramId})`);
  } catch (error) {
    console.error('Failed to send admin notification:', error);
    // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  }
}
