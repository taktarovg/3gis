import { NextRequest, NextResponse } from 'next/server';
import { updateExistingSlugs } from '@/lib/slug-generator';

export async function POST(request: NextRequest) {
  try {
    console.log('üöÄ Starting slug update process...');
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ slug'–æ–≤
    await updateExistingSlugs();
    
    console.log('‚úÖ Slug update completed successfully');
    
    return NextResponse.json({
      success: true,
      message: '–í—Å–µ slug\'—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ'
    });
    
  } catch (error) {
    console.error('‚ùå Error updating slugs:', error);
    
    return NextResponse.json(
      { 
        error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ slug\'–æ–≤',
        details: error instanceof Error ? error.message : 'Unknown error'
      },
      { status: 500 }
    );
  }
}

export async function GET(request: NextRequest) {
  try {
    const { prisma } = await import('@/lib/prisma');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π –Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
    const businessesWithoutSlugs = await prisma.business.count({
      where: { slug: null }
    });
    
    const chatsWithoutSlugs = await prisma.telegramChat.count({
      where: { slug: null }
    });
    
    return NextResponse.json({
      businessesNeedingUpdate: businessesWithoutSlugs,
      chatsNeedingUpdate: chatsWithoutSlugs,
      totalNeedingUpdate: businessesWithoutSlugs + chatsWithoutSlugs
    });
    
  } catch (error) {
    console.error('Error checking slug status:', error);
    
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ slug\'–æ–≤' },
      { status: 500 }
    );
  }
}