// app/api/admin/blog/categories/route.ts\nimport { NextRequest, NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\n\n// GET /api/admin/blog/categories - получение всех категорий блога\nexport async function GET(request: NextRequest) {\n  try {\n    const categories = await prisma.blogCategory.findMany({\n      include: {\n        _count: {\n          select: {\n            posts: true\n          }\n        }\n      },\n      orderBy: {\n        createdAt: 'asc'\n      }\n    });\n\n    return NextResponse.json(categories);\n  } catch (error) {\n    console.error('Ошибка получения категорий:', error);\n    return NextResponse.json(\n      { error: 'Не удалось загрузить категории' },\n      { status: 500 }\n    );\n  }\n}\n\n// POST /api/admin/blog/categories - создание новой категории\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json();\n    const { name, slug, description, color } = body;\n\n    // Валидация обязательных полей\n    if (!name || !slug) {\n      return NextResponse.json(\n        { error: 'Название и slug обязательны' },\n        { status: 400 }\n      );\n    }\n\n    // Проверяем уникальность названия и slug\n    const existingCategory = await prisma.blogCategory.findFirst({\n      where: {\n        OR: [\n          { name },\n          { slug }\n        ]\n      }\n    });\n\n    if (existingCategory) {\n      return NextResponse.json(\n        { error: 'Категория с таким названием или slug уже существует' },\n        { status: 400 }\n      );\n    }\n\n    // Создаем категорию\n    const category = await prisma.blogCategory.create({\n      data: {\n        name,\n        slug,\n        description,\n        color: color || '#3B82F6'\n      }\n    });\n\n    return NextResponse.json({ category }, { status: 201 });\n  } catch (error) {\n    console.error('Ошибка создания категории:', error);\n    return NextResponse.json(\n      { error: 'Не удалось создать категорию' },\n      { status: 500 }\n    );\n  }\n}"