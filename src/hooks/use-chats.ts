'use client';

import { useState, useEffect, useCallback, useMemo, useRef } from 'react';

interface Chat {
  id: number;
  title: string;
  description?: string;
  username?: string;
  type: 'GROUP' | 'CHAT' | 'CHANNEL';
  memberCount: number;
  topic?: string;
  isVerified: boolean;
  city?: { name: string };
  state?: { name: string };
  _count: { favorites: number };
}

interface ChatsResponse {
  success: boolean;
  data: Chat[];
  pagination: {
    page: number;
    limit: number;
    totalCount: number;
    totalPages: number;
    hasNextPage: boolean;
    hasPreviousPage: boolean;
  };
  stats: {
    totalChats: number;
    totalMembers: number;
  };
  debug?: {
    requestId: string;
    duration: number;
    dbDuration: number;
    timestamp: string;
  };
}

interface ChatsFilters {
  type?: 'GROUP' | 'CHAT' | 'CHANNEL';
  cityId?: number;
  stateId?: string;
  topic?: string;
  search?: string;
  isVerified?: boolean;
  page?: number;
  limit?: number;
}

interface UseChatsResult {
  chats: Chat[];
  loading: boolean;
  error: string | null;
  pagination: ChatsResponse['pagination'] | null;
  stats: ChatsResponse['stats'] | null;
  refetch: () => void;
  loadMore: () => void;
  hasNextPage: boolean;
  lastRequestId?: string;
}

/**
 * ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô —Ö—É–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞—Ç–∞–ª–æ–≥–æ–º —á–∞—Ç–æ–≤
 * –£—Å—Ç—Ä–∞–Ω—è–µ—Ç —Ü–∏–∫–ª–∏—á–µ—Å–∫—É—é –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
 * –°–æ–≤–º–µ—Å—Ç–∏–º —Å @telegram-apps/sdk-react v3.3.1
 */
export function useChats(filters: ChatsFilters = {}): UseChatsResult {
  const [chats, setChats] = useState<Chat[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [pagination, setPagination] = useState<ChatsResponse['pagination'] | null>(null);
  const [stats, setStats] = useState<ChatsResponse['stats'] | null>(null);
  const [lastRequestId, setLastRequestId] = useState<string>();
  
  // ‚úÖ –°—á–µ—Ç—á–∏–∫ —Ä–µ–Ω–¥–µ—Ä–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  const renderCount = useRef(0);
  renderCount.current += 1;

  // ‚úÖ Ref –¥–ª—è –æ—Ç–º–µ–Ω—ã –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
  const abortControllerRef = useRef<AbortController | null>(null);

  // ‚úÖ –ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
  // –ö–∞–∂–¥–æ–µ –ø–æ–ª–µ –æ—Ç–¥–µ–ª—å–Ω–æ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è—Ö –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è
  const stableFilters = useMemo(() => ({
    type: filters.type,
    cityId: filters.cityId,
    stateId: filters.stateId,
    topic: filters.topic,
    search: filters.search,
    isVerified: filters.isVerified,
    page: filters.page || 1,
    limit: filters.limit || 20
  }), [
    filters.type,
    filters.cityId,
    filters.stateId,
    filters.topic,
    filters.search,
    filters.isVerified,
    filters.page,
    filters.limit
  ]);

  // ‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π —ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
  // –ë–ï–ó —Ñ—É–Ω–∫—Ü–∏–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è—Ö - —Ç–æ–ª—å–∫–æ stableFilters!
  useEffect(() => {
    const hookRequestId = Math.random().toString(36).substring(7);
    console.log(`üé£ [HOOK-${hookRequestId}] useChats: Effect triggered (render ${renderCount.current})`);
    console.log(`üìã [HOOK-${hookRequestId}] Stable filters:`, stableFilters);

    // –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∑–∞–ø—Ä–æ—Å –µ—Å–ª–∏ –æ–Ω –µ—â–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è
    if (abortControllerRef.current) {
      console.log(`üö´ [HOOK-${hookRequestId}] Aborting previous request`);
      abortControllerRef.current.abort();
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π AbortController –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    const controller = new AbortController();
    abortControllerRef.current = controller;

    const fetchData = async () => {
      const startTime = Date.now();
      
      try {
        setLoading(true);
        setError(null);
        
        // –°—Ç—Ä–æ–∏–º URL —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        const searchParams = new URLSearchParams();
        Object.entries(stableFilters).forEach(([key, value]) => {
          if (value !== undefined && value !== null) {
            searchParams.set(key, value.toString());
          }
        });

        const url = `/api/chats?${searchParams.toString()}`;
        console.log(`üåê [HOOK-${hookRequestId}] Request URL: ${url}`);

        const fetchStartTime = Date.now();
        const response = await fetch(url, {
          signal: controller.signal,
          headers: {
            'Content-Type': 'application/json',
          }
        });
        const fetchDuration = Date.now() - fetchStartTime;
        
        console.log(`üì° [HOOK-${hookRequestId}] Fetch completed in ${fetchDuration}ms`);
        console.log(`üìä [HOOK-${hookRequestId}] Response status: ${response.status}`);

        if (!response.ok) {
          throw new Error(`–û—à–∏–±–∫–∞ ${response.status}: ${response.statusText}`);
        }

        const parseStartTime = Date.now();
        const data: ChatsResponse = await response.json();
        const parseDuration = Date.now() - parseStartTime;
        
        console.log(`üì¶ [HOOK-${hookRequestId}] JSON parsed in ${parseDuration}ms`);
        console.log(`‚úÖ [HOOK-${hookRequestId}] Response success: ${data.success}`);
        console.log(`üìä [HOOK-${hookRequestId}] Chats count: ${data.data?.length || 0}`);
        console.log(`üîç [HOOK-${hookRequestId}] Server requestId: ${data.debug?.requestId}`);

        if (!data.success) {
          throw new Error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤');
        }

        // ‚úÖ –í–°–ï–ì–î–ê –∑–∞–º–µ–Ω—è–µ–º —á–∞—Ç—ã (–ù–ï –¥–æ–±–∞–≤–ª—è–µ–º)
        // –ü–∞–≥–∏–Ω–∞—Ü–∏—è –±—É–¥–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
        console.log(`üîÑ [HOOK-${hookRequestId}] Setting ${data.data.length} chats`);
        setChats(data.data);
        setPagination(data.pagination);
        setStats(data.stats);
        setLastRequestId(data.debug?.requestId);
        
        const totalDuration = Date.now() - startTime;
        console.log(`üéâ [HOOK-${hookRequestId}] Successfully completed in ${totalDuration}ms`);
        
      } catch (err) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Ç–º–µ–Ω—ã –∑–∞–ø—Ä–æ—Å–∞
        if (err instanceof Error && err.name === 'AbortError') {
          console.log(`üö´ [HOOK-${hookRequestId}] Request was aborted`);
          return;
        }
        
        const totalDuration = Date.now() - startTime;
        const errorMessage = err instanceof Error ? err.message : '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —á–∞—Ç–æ–≤';
        
        console.error(`‚ùå [HOOK-${hookRequestId}] Error after ${totalDuration}ms:`, err);
        console.error(`üö® [HOOK-${hookRequestId}] Error message: ${errorMessage}`);
        
        setError(errorMessage);
      } finally {
        const finalDuration = Date.now() - startTime;
        console.log(`üèÅ [HOOK-${hookRequestId}] Finally block - total ${finalDuration}ms`);
        setLoading(false);
      }
    };

    fetchData();
    
    // ‚úÖ Cleanup —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–ø—Ä–æ—Å–∞
    return () => {
      console.log(`üßπ [HOOK-${hookRequestId}] Effect cleanup - aborting request`);
      controller.abort();
    };
  }, [stableFilters]); // ‚úÖ –¢–û–õ–¨–ö–û stableFilters –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è—Ö!

  // ‚úÖ –§—É–Ω–∫—Ü–∏—è refetch –ë–ï–ó –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç fetchData
  const refetch = useCallback(() => {
    const refetchId = Math.random().toString(36).substring(7);
    console.log(`üîÑ [REFETCH-${refetchId}] Manual refetch triggered`);
    
    // –ü—Ä–æ—Å—Ç–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ –≤—ã–∑–æ–≤–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã–π useEffect
    setChats([]);
    setLoading(true);
    setError(null);
    // useEffect —Å—Ä–∞–±–æ—Ç–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑-–∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è loading/error
  }, []);

  // ‚úÖ –§—É–Ω–∫—Ü–∏—è loadMore –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
  const loadMore = useCallback(async () => {
    const loadMoreId = Math.random().toString(36).substring(7);
    console.log(`üìÑ [LOADMORE-${loadMoreId}] Load more triggered`);
    console.log(`üìä [LOADMORE-${loadMoreId}] Has next page: ${pagination?.hasNextPage}`);
    console.log(`‚è≥ [LOADMORE-${loadMoreId}] Currently loading: ${loading}`);
    
    if (!pagination?.hasNextPage || loading) {
      console.log(`‚ö†Ô∏è [LOADMORE-${loadMoreId}] Load more skipped - no next page or currently loading`);
      return;
    }

    try {
      setLoading(true);
      
      const nextPageFilters = {
        ...stableFilters,
        page: (pagination.page || 1) + 1
      };
      
      const searchParams = new URLSearchParams();
      Object.entries(nextPageFilters).forEach(([key, value]) => {
        if (value !== undefined && value !== null) {
          searchParams.set(key, value.toString());
        }
      });

      const url = `/api/chats?${searchParams.toString()}`;
      console.log(`üåê [LOADMORE-${loadMoreId}] Request URL: ${url}`);

      const response = await fetch(url);
      
      if (!response.ok) {
        throw new Error(`–û—à–∏–±–∫–∞ ${response.status}: ${response.statusText}`);
      }

      const data: ChatsResponse = await response.json();
      
      if (!data.success) {
        throw new Error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤');
      }

      console.log(`‚ûï [LOADMORE-${loadMoreId}] Appending ${data.data.length} chats`);
      
      // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —á–∞—Ç—ã –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º
      setChats(prevChats => {
        const newChats = [...prevChats, ...data.data];
        console.log(`üìä [LOADMORE-${loadMoreId}] Total chats after append: ${newChats.length}`);
        return newChats;
      });
      
      setPagination(data.pagination);
      setStats(data.stats);
      setLastRequestId(data.debug?.requestId);
      
      console.log(`‚úÖ [LOADMORE-${loadMoreId}] Load more completed successfully`);
      
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã';
      console.error(`‚ùå [LOADMORE-${loadMoreId}] Error:`, err);
      setError(errorMessage);
    } finally {
      setLoading(false);
    }
  }, [pagination, loading, stableFilters]);

  // ‚úÖ –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  useEffect(() => {
    console.log(`üìä [STATE] useChats: chats.length = ${chats.length} (render ${renderCount.current})`);
  }, [chats.length]);

  useEffect(() => {
    console.log(`‚è≥ [STATE] useChats: loading = ${loading} (render ${renderCount.current})`);
  }, [loading]);

  useEffect(() => {
    if (error) {
      console.log(`‚ùå [STATE] useChats: error = ${error} (render ${renderCount.current})`);
    }
  }, [error]);

  // ‚úÖ Cleanup –ø—Ä–∏ unmount –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    return () => {
      if (abortControllerRef.current) {
        console.log(`üßπ [CLEANUP] useChats: Component unmount - aborting active request`);
        abortControllerRef.current.abort();
      }
    };
  }, []);

  return {
    chats,
    loading,
    error,
    pagination,
    stats,
    refetch,
    loadMore,
    hasNextPage: pagination?.hasNextPage || false,
    lastRequestId
  };
}

/**
 * ‚úÖ –•—É–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ—Ç–¥–µ–ª—å–Ω—ã–º —á–∞—Ç–æ–º
 */
export function useChat(chatId: number) {
  const [chat, setChat] = useState<Chat | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    if (!chatId) {
      console.warn(`‚ö†Ô∏è [useChat] No chatId provided`);
      setLoading(false);
      return;
    }

    const controller = new AbortController();
    
    const fetchChat = async () => {
      const hookRequestId = Math.random().toString(36).substring(7);
      console.log(`üé£ [CHAT-${hookRequestId}] useChat: Fetching chat ${chatId}`);
      
      try {
        setLoading(true);
        setError(null);

        const response = await fetch(`/api/chats/${chatId}`, {
          signal: controller.signal
        });
        
        if (!response.ok) {
          if (response.status === 404) {
            throw new Error('–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
          }
          throw new Error(`–û—à–∏–±–∫–∞ ${response.status}: ${response.statusText}`);
        }

        const data = await response.json();
        
        if (!data.success) {
          throw new Error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —á–∞—Ç–∞');
        }

        console.log(`‚úÖ [CHAT-${hookRequestId}] Chat ${chatId} loaded successfully`);
        setChat(data.data);
      } catch (err) {
        if (err instanceof Error && err.name === 'AbortError') {
          console.log(`üö´ [CHAT-${hookRequestId}] Request was aborted`);
          return;
        }
        
        const errorMessage = err instanceof Error ? err.message : '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —á–∞—Ç–∞';
        console.error(`‚ùå [CHAT-${hookRequestId}] Error loading chat ${chatId}:`, err);
        setError(errorMessage);
      } finally {
        setLoading(false);
      }
    };

    fetchChat();
    
    return () => {
      console.log(`üßπ [useChat] Cleanup for chat ${chatId}`);
      controller.abort();
    };
  }, [chatId]);

  return { chat, loading, error };
}

/**
 * ‚úÖ –•—É–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–∑–±—Ä–∞–Ω–Ω—ã–º–∏ —á–∞—Ç–∞–º–∏
 */
export function useFavoriteChats() {
  const [favoriteChats, setFavoriteChats] = useState<Chat[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  const fetchFavorites = useCallback(async () => {
    const controller = new AbortController();
    const hookRequestId = Math.random().toString(36).substring(7);
    console.log(`üé£ [FAVORITES-${hookRequestId}] useFavoriteChats: Fetching favorites`);
    
    try {
      setLoading(true);
      setError(null);

      const response = await fetch('/api/favorites/chats', {
        signal: controller.signal
      });
      
      if (!response.ok) {
        throw new Error(`–û—à–∏–±–∫–∞ ${response.status}: ${response.statusText}`);
      }

      const data = await response.json();
      console.log(`‚úÖ [FAVORITES-${hookRequestId}] Favorites loaded: ${data?.length || 0} chats`);
      setFavoriteChats(data || []);
    } catch (err) {
      if (err instanceof Error && err.name === 'AbortError') {
        console.log(`üö´ [FAVORITES-${hookRequestId}] Request was aborted`);
        return;
      }
      
      const errorMessage = err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤';
      console.error(`‚ùå [FAVORITES-${hookRequestId}] Error:`, err);
      setError(errorMessage);
    } finally {
      setLoading(false);
    }
  }, []);

  // ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ —Å –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–µ—Å–∫–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
  const addToFavorites = useCallback(async (chatId: number) => {
    const actionId = Math.random().toString(36).substring(7);
    console.log(`‚ûï [FAVORITE-ADD-${actionId}] Adding chat ${chatId} to favorites`);
    
    try {
      const response = await fetch('/api/favorites/chats', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ chatId })
      });

      if (!response.ok) {
        throw new Error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ');
      }

      const data = await response.json();
      
      if (data.success) {
        console.log(`‚úÖ [FAVORITE-ADD-${actionId}] Chat ${chatId} added to favorites`);
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö
        await fetchFavorites();
        return true;
      }
      
      return false;
    } catch (err) {
      console.error(`‚ùå [FAVORITE-ADD-${actionId}] Error adding chat ${chatId}:`, err);
      return false;
    }
  }, [fetchFavorites]);

  // ‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ —Å –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–µ—Å–∫–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
  const removeFromFavorites = useCallback(async (chatId: number) => {
    const actionId = Math.random().toString(36).substring(7);
    console.log(`‚ûñ [FAVORITE-REMOVE-${actionId}] Removing chat ${chatId} from favorites`);
    
    try {
      const response = await fetch('/api/favorites/chats', {
        method: 'DELETE',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ chatId })
      });

      if (!response.ok) {
        throw new Error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ');
      }

      const data = await response.json();
      
      if (data.success) {
        console.log(`‚úÖ [FAVORITE-REMOVE-${actionId}] Chat ${chatId} removed from favorites`);
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö
        await fetchFavorites();
        return true;
      }
      
      return false;
    } catch (err) {
      console.error(`‚ùå [FAVORITE-REMOVE-${actionId}] Error removing chat ${chatId}:`, err);
      return false;
    }
  }, [fetchFavorites]);

  useEffect(() => {
    fetchFavorites();
  }, [fetchFavorites]);

  return {
    favoriteChats,
    loading,
    error,
    addToFavorites,
    removeFromFavorites,
    refetch: fetchFavorites
  };
}