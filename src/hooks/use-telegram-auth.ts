// src/hooks/use-telegram-auth.ts
'use client';

import { useEffect, useState, useCallback } from 'react';
import { User, Prisma } from '@prisma/client';
import { useAuthStore } from '@/store/auth-store';
import { useTokenManager } from '@/hooks/use-token-manager';
import { TokenRefreshService } from '@/services/token-refresh-service';
import { apiClient, ApiError } from '@/lib/api-client';
import { AUTH_CONSTANTS } from '@/lib/auth';
import { logger } from '@/utils/logger';

// Telegram SDK v3.x imports
import { useRawInitData, useLaunchParams } from '@telegram-apps/sdk-react';

// –ò—Å–ø–æ–ª—å–∑—É–µ–º Prisma.UserGetPayload –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ç–∏–ø–∏—Ä–æ–≤–∞–Ω–∏—è
const userWithRelationsPayload = Prisma.validator<Prisma.UserDefaultArgs>()({
  include: {
    city: true,
    businesses: {
      include: {
        category: true,
        city: true
      }
    },
    favorites: {
      include: {
        business: {
          include: {
            category: true
          }
        }
      }
    }
  }
});

// –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –æ—Ç–Ω–æ—à–µ–Ω–∏—è–º–∏
type UserWithRelations = Prisma.UserGetPayload<typeof userWithRelationsPayload>;

interface AuthState {
  user: UserWithRelations | null;
  token: string | null;
  isLoading: boolean;
  error: string | null;
  isAuthenticated: boolean;
}

interface AuthActions {
  logout: () => void;
  refreshToken: () => Promise<boolean>;
  updateLocation: (latitude: number, longitude: number) => Promise<void>;
  clearError: () => void;
}

/**
 * –°–û–í–†–ï–ú–ï–ù–ù–´–ô –•–£–ö –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò –î–õ–Ø 3GIS
 * ‚úÖ –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω —Å —Å–∏—Å—Ç–µ–º–æ–π —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞–º–∏
 * ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–µ–∫–∞—é—â–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤
 * ‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
 * ‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ @telegram-apps/sdk v3.x
 * ‚úÖ SSR —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –¥–ª—è Next.js
 */
export function useTelegramAuth(): AuthState & AuthActions {
  const { setAuth, setLoading, setError, updateUserLocation, logout: clearAuth } = useAuthStore();
  const {
    token,
    payload,
    isValid,
    needsRefresh,
    setToken,
    clearToken,
    shouldRefreshToken,
    markRefreshTime,
  } = useTokenManager();

  const [authState, setAuthState] = useState<AuthState>({
    user: null,
    token: null,
    isLoading: true,
    error: null,
    isAuthenticated: false,
  });

  // –ü–æ–ª—É—á–∞–µ–º Telegram –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ SDK v3.x —Ö—É–∫–∏
  const initDataRaw = useRawInitData(); // –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å—Ç—Ä–æ–∫–∏
  const launchParams = useLaunchParams(true); // SSR-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Ä–µ–∂–∏–º –¥–ª—è Next.js
  
  // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ launchParams
  const webAppData = launchParams?.tgWebAppData || null;
  const telegramUser = webAppData?.user || null;
  
  // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
  useEffect(() => {
    if (initDataRaw) {
      logger.logAuth('‚úÖ Telegram initData –ø–æ–ª—É—á–µ–Ω —á–µ—Ä–µ–∑ SDK v3.x:', {
        hasInitData: !!initDataRaw,
        hasUser: !!telegramUser,
        initDataLength: initDataRaw.length
      });
    } else {
      logger.warn('‚ö†Ô∏è Telegram initData –ø–æ–∫–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω');
    }
  }, [initDataRaw, telegramUser]);

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–æ–∫–µ–Ω—É –∏–∑ –ë–î
   */
  const loadUserFromToken = useCallback(async (authToken: string): Promise<UserWithRelations | null> => {
    try {
      const user = await apiClient.get<UserWithRelations>('/api/auth/me', {
        headers: { Authorization: `Bearer ${authToken}` },
        skipAutoRefresh: true, // –ò–∑–±–µ–≥–∞–µ–º —Ä–µ–∫—É—Ä—Å–∏–∏
      });
      
      logger.logAuth('User loaded from token successfully');
      return user;
    } catch (error) {
      if (error instanceof ApiError && error.isAuthError) {
        logger.warn('Token invalid, user not found');
        return null;
      }
      
      logger.error('Error loading user from token:', error);
      throw error;
    }
  }, []);

  /**
   * –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram initData
   */
  const authenticateWithTelegram = useCallback(async (): Promise<{ user: UserWithRelations; token: string } | null> => {
    try {
      if (!initDataRaw) {
        throw new Error('No Telegram initData available');
      }

      logger.logAuth('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é —Å initData:', {
        hasInitData: !!initDataRaw,
        initDataLength: initDataRaw.length,
        hasWebAppData: !!webAppData?.user
      });

      // –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ API
      const response = await apiClient.post<{ user: UserWithRelations; token: string }>('/api/auth/telegram', {
        initData: initDataRaw,
      }, {
        skipAuth: true,
        skipAutoRefresh: true,
      });

      logger.logAuth('‚úÖ Telegram authentication successful');
      return response;
    } catch (error) {
      logger.error('‚ùå Telegram authentication failed:', error);
      
      if (error instanceof ApiError) {
        throw new Error(`–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${error.message}`);
      }
      
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ Telegram');
    }
  }, [initDataRaw, webAppData]);

  const refreshToken = useCallback(async (): Promise<boolean> => {
    try {
      setAuthState(prev => ({ ...prev, isLoading: true }));
      
      const newToken = await TokenRefreshService.refreshToken();
      
      if (newToken) {
        setToken(newToken);
        markRefreshTime();
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const user = await loadUserFromToken(newToken);
        if (user) {
          setAuth(user, newToken);
          setAuthState(prev => ({
            ...prev,
            user,
            token: newToken,
            isAuthenticated: true,
            error: null,
          }));
          
          logger.logAuth('Token refresh completed successfully');
          return true;
        }
      }
      
      // –ï—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –æ—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
      try {
        clearToken();
        clearAuth();
        setAuthState({
          user: null,
          token: null,
          isLoading: false,
          error: null,
          isAuthenticated: false,
        });
      } catch (logoutError) {
        logger.error('Error during logout:', logoutError);
      }
      
      return false;
    } catch (error) {
      logger.error('Token refresh failed:', error);
      setAuthState(prev => ({
        ...prev,
        error: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏',
        isLoading: false,
      }));
      return false;
    }
  }, [setToken, markRefreshTime, loadUserFromToken, setAuth, clearToken, clearAuth]);

  /**
   * –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
   */
  const logoutUser = useCallback(async () => {
    try {
      clearToken();
      clearAuth();
      
      setAuthState({
        user: null,
        token: null,
        isLoading: false,
        error: null,
        isAuthenticated: false,
      });
      
      logger.logAuth('User logged out successfully');
    } catch (error) {
      logger.error('Error during logout:', error);
    }
  }, [clearToken, clearAuth]);

  /**
   * –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã (–ø—Å–µ–≤–¥–æ–Ω–∏–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
   */
  const logout = logoutUser;

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  const updateLocation = useCallback(async (latitude: number, longitude: number) => {
    if (!authState.token) {
      logger.warn('Cannot update location: no auth token');
      return;
    }

    try {
      await apiClient.patch('/api/user/location', {
        latitude,
        longitude,
      });

      updateUserLocation(latitude, longitude);
      logger.logAuth('User location updated successfully');
    } catch (error) {
      logger.error('Error updating user location:', error);
    }
  }, [authState.token, updateUserLocation]);

  /**
   * –û—á–∏—Å—Ç–∫–∞ –æ—à–∏–±–æ–∫
   */
  const clearError = useCallback(() => {
    setAuthState(prev => ({ ...prev, error: null }));
    setError(null);
  }, [setError]);

  /**
   * –ü—Ä–æ–∞–∫—Ç–∏–≤–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
   */
  useEffect(() => {
    if (token && needsRefresh && isValid) {
      logger.logAuth('Token needs refresh, initiating proactive refresh');
      refreshToken();
    }
  }, [token, needsRefresh, isValid, refreshToken]);

  /**
   * –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
   */
  useEffect(() => {
    let isMounted = true;

    const initializeAuth = async () => {
      try {
        setAuthState(prev => ({ ...prev, isLoading: true, error: null }));
        setLoading(true);

        // –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–∫–µ–Ω
        if (token && isValid) {
          logger.logAuth('Valid token found, loading user data');
          
          const user = await loadUserFromToken(token);
          if (user && isMounted) {
            setAuth(user, token);
            setAuthState(prev => ({
              ...prev,
              user,
              token,
              isAuthenticated: true,
              isLoading: false,
            }));
            logger.logAuth('Authentication restored from stored token');
            return;
          }
        }

        // –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ initData –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Telegram
        if ((!token || !isValid || shouldRefreshToken()) && initDataRaw && telegramUser) {
          logger.logAuth('üîê –ù–µ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞, –ø—ã—Ç–∞–µ–º—Å—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ Telegram', {
            hasInitData: !!initDataRaw,
            hasUser: !!telegramUser,
            userId: telegramUser?.id
          });
          
          const authResult = await authenticateWithTelegram();
          if (authResult && isMounted) {
            const { user, token: newToken } = authResult;
            
            setToken(newToken);
            setAuth(user, newToken);
            markRefreshTime();
            
            setAuthState(prev => ({
              ...prev,
              user,
              token: newToken,
              isAuthenticated: true,
              isLoading: false,
              error: null,
            }));
            
            logger.logAuth('‚úÖ –ù–æ–≤–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
            return;
          }
        }

        // –®–∞–≥ 3: –ï—Å–ª–∏ –Ω–µ—Ç initData –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∂–¥–µ–º –∏—Ö –ø–æ–ª—É—á–µ–Ω–∏—è
        if ((!initDataRaw || !telegramUser) && isMounted) {
          setAuthState(prev => ({
            ...prev,
            isLoading: false,
            error: '–û–∂–∏–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö Telegram...',
          }));
          logger.warn('‚è≥ –û–∂–∏–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ Telegram initData –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', {
            hasInitData: !!initDataRaw,
            hasUser: !!telegramUser
          });
          return;
        }

        // –®–∞–≥ 4: –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å
        if (isMounted) {
          setAuthState(prev => ({
            ...prev,
            isLoading: false,
            error: '–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é',
          }));
          logger.warn('‚ùå Authentication failed');
        }

      } catch (error) {
        logger.error('Authentication initialization error:', error);
        
        if (isMounted) {
          const errorMessage = error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏';
          setAuthState(prev => ({
            ...prev,
            isLoading: false,
            error: errorMessage,
          }));
          setError(errorMessage);
        }
      } finally {
        if (isMounted) {
          setLoading(false);
        }
      }
    };

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
    if (typeof window !== 'undefined') {
      initializeAuth();
    }

    return () => {
      isMounted = false;
    };
  }, [
    token,
    isValid,
    initDataRaw,
    telegramUser,
    webAppData,
    setToken,
    setAuth,
    setLoading,
    setError,
    loadUserFromToken,
    authenticateWithTelegram,
    shouldRefreshToken,
    markRefreshTime,
  ]);

  /**
   * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
   */
  useEffect(() => {
    logger.logAuth(`Auth state changed: authenticated=${authState.isAuthenticated}, loading=${authState.isLoading}, hasError=${!!authState.error}`);
  }, [authState.isAuthenticated, authState.isLoading, authState.error]);

  return {
    // State
    ...authState,
    
    // Actions
    logout,
    refreshToken,
    updateLocation,
    clearError,
  };
}

/**
 * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
 */
export const AuthUtils = {
  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ª–æ–≥–∏–Ω–∞
   */
  requiresLogin(authState: AuthState): boolean {
    return !authState.isAuthenticated && !authState.isLoading;
  },

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  getWelcomeMessage(user: UserWithRelations | null): string {
    if (!user) return '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ 3GIS!';
    
    const name = user.firstName || user.username || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
    return `–ü—Ä–∏–≤–µ—Ç, ${name}!`;
  },

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å–∞
   */
  isPremiumUser(user: UserWithRelations | null): boolean {
    return user?.isPremium || false;
  },

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
   */
  formatLastSeen(user: UserWithRelations | null): string {
    if (!user?.lastSeenAt) return '–ù–∏–∫–æ–≥–¥–∞';
    
    return new Date(user.lastSeenAt).toLocaleString('ru-RU');
  },
};
