// src/hooks/use-telegram-auth.ts
'use client';

import { useEffect, useState, useCallback } from 'react';
import { User, Prisma } from '@prisma/client';
import { useAuthStore } from '@/store/auth-store';

// Telegram SDK v3.x imports - —É–±–∏—Ä–∞–µ–º —É—Å–ª–æ–≤–Ω—ã–µ –≤—ã–∑–æ–≤—ã
import { useRawInitData, useLaunchParams } from '@telegram-apps/sdk-react';

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –æ—Ç–Ω–æ—à–µ–Ω–∏—è–º–∏
const userWithRelationsPayload = Prisma.validator<Prisma.UserDefaultArgs>()({
  include: {
    city: true,
    businesses: {
      include: {
        category: true,
        city: true
      }
    },
    favorites: {
      include: {
        business: {
          include: {
            category: true
          }
        }
      }
    }
  }
});

type UserWithRelations = Prisma.UserGetPayload<typeof userWithRelationsPayload>;

interface AuthState {
  user: UserWithRelations | null;
  token: string | null;
  isLoading: boolean;
  error: string | null;
  isAuthenticated: boolean;
}

interface AuthActions {
  logout: () => void;
  refreshToken: () => Promise<boolean>;
  updateLocation: (latitude: number, longitude: number) => Promise<void>;
  clearError: () => void;
}

/**
 * –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô –•–£–ö –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò –î–õ–Ø 3GIS SDK v3.x
 * ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –≤—Å–µ React Hooks Rules –æ—à–∏–±–∫–∏
 * ‚úÖ –£–±—Ä–∞–Ω—ã —É—Å–ª–æ–≤–Ω—ã–µ –≤—ã–∑–æ–≤—ã —Ö—É–∫–æ–≤
 * ‚úÖ –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å @telegram-apps/sdk-react v3.3.1
 * ‚úÖ SSR –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–ª—è Next.js
 * ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ç–∏–ø–∏–∑–∞—Ü–∏—è UserWithRelations
 */
export function useTelegramAuth(): AuthState & AuthActions {
  const { setAuth, setLoading, setError, updateUserLocation, logout: clearAuth } = useAuthStore();

  const [authState, setAuthState] = useState<AuthState>({
    user: null,
    token: null,
    isLoading: true,
    error: null,
    isAuthenticated: false,
  });

  // –ë–µ–∑—É—Å–ª–æ–≤–Ω—ã–µ –≤—ã–∑–æ–≤—ã —Ö—É–∫–æ–≤ SDK v3.x —Å–æ–≥–ª–∞—Å–Ω–æ Rules of Hooks + SSR —Ñ–ª–∞–≥–∏
  const initDataRaw = useRawInitData(true); // ‚úÖ SSR —Ñ–ª–∞–≥ –¥–ª—è Next.js
  const launchParams = useLaunchParams(true); // ‚úÖ –í v3.x —Ç—Ä–µ–±—É–µ—Ç—Å—è SSR —Ñ–ª–∞–≥ –¥–ª—è Next.js
  
  // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ launchParams –¥–ª—è SDK v3.x
  // –í v3 –¥–∞–Ω–Ω—ã–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ tgWebAppData
  const webAppData = launchParams?.tgWebAppData;
  const telegramUser = webAppData?.user || null;
  
  // –í v3 –¥–æ—Å—Ç—É–ø–Ω—ã –∫–∞–∫ camelCase, —Ç–∞–∫ –∏ snake_case –≤–µ—Ä—Å–∏–∏
  const authDate = webAppData?.authDate || webAppData?.auth_date || null;
  const queryId = webAppData?.queryId || webAppData?.query_id || null;
  const hash = webAppData?.hash || null;

  /**
   * –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram initData –¥–ª—è SDK v3.x
   */
  const authenticateWithTelegram = useCallback(async (): Promise<{ user: UserWithRelations; token: string } | null> => {
    try {
      if (!initDataRaw) {
        throw new Error('No Telegram initData available');
      }

      console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é —Å initData (SDK v3.x):', {
        hasInitData: !!initDataRaw,
        initDataLength: initDataRaw.length,
        hasWebAppData: !!webAppData,
        hasUser: !!telegramUser,
        userId: telegramUser?.id,
        platform: launchParams?.tgWebAppPlatform || 'unknown'
      });

      // –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ API
      const response = await fetch('/api/auth/telegram', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          initData: initDataRaw,
          debug: {
            platform: launchParams?.tgWebAppPlatform,
            version: launchParams?.tgWebAppVersion,
            hasUser: !!telegramUser,
            userId: telegramUser?.id
          }
        }),
      });

      if (!response.ok) {
        const errorData = await response.text();
        throw new Error(`Authentication failed: ${response.status} ${errorData}`);
      }

      const authResult = await response.json();
      console.log('‚úÖ Telegram authentication successful (SDK v3.x)');
      return authResult;
    } catch (error) {
      console.error('‚ùå Telegram authentication failed:', error);
      
      if (error instanceof Error) {
        throw new Error(`–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${error.message}`);
      }
      
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ Telegram');
    }
  }, [initDataRaw, webAppData, telegramUser, launchParams]);

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–æ–∫–µ–Ω—É –∏–∑ localStorage
   */
  const loadUserFromToken = useCallback(async (authToken: string): Promise<UserWithRelations | null> => {
    try {
      const response = await fetch('/api/auth/me', {
        headers: { Authorization: `Bearer ${authToken}` },
      });

      if (!response.ok) {
        console.warn('Token invalid, user not found');
        return null;
      }

      const user = await response.json() as UserWithRelations;
      console.log('User loaded from token successfully');
      return user;
    } catch (error) {
      console.error('Error loading user from token:', error);
      return null;
    }
  }, []);

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
   */
  const refreshToken = useCallback(async (): Promise<boolean> => {
    try {
      setAuthState(prev => ({ ...prev, isLoading: true }));
      
      const response = await fetch('/api/auth/refresh', {
        method: 'POST',
        credentials: 'include',
      });

      if (!response.ok) {
        return false;
      }

      const { token: newToken, user } = await response.json();
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω
      localStorage.setItem('authToken', newToken);
      
      setAuth(user, newToken);
      setAuthState(prev => ({
        ...prev,
        user,
        token: newToken,
        isAuthenticated: true,
        error: null,
        isLoading: false,
      }));
      
      console.log('Token refresh completed successfully');
      return true;
    } catch (error) {
      console.error('Token refresh failed:', error);
      setAuthState(prev => ({
        ...prev,
        error: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏',
        isLoading: false,
      }));
      return false;
    }
  }, [setAuth]);

  /**
   * –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
   */
  const logout = useCallback(async () => {
    try {
      localStorage.removeItem('authToken');
      clearAuth();
      
      setAuthState({
        user: null,
        token: null,
        isLoading: false,
        error: null,
        isAuthenticated: false,
      });
      
      console.log('User logged out successfully');
    } catch (error) {
      console.error('Error during logout:', error);
    }
  }, [clearAuth]);

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  const updateLocation = useCallback(async (latitude: number, longitude: number) => {
    if (!authState.token) {
      console.warn('Cannot update location: no auth token');
      return;
    }

    try {
      await fetch('/api/user/location', {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${authState.token}`,
        },
        body: JSON.stringify({ latitude, longitude }),
      });

      updateUserLocation(latitude, longitude);
      console.log('User location updated successfully');
    } catch (error) {
      console.error('Error updating user location:', error);
    }
  }, [authState.token, updateUserLocation]);

  /**
   * –û—á–∏—Å—Ç–∫–∞ –æ—à–∏–±–æ–∫
   */
  const clearError = useCallback(() => {
    setAuthState(prev => ({ ...prev, error: null }));
    setError(null);
  }, [setError]);

  /**
   * –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
   */
  useEffect(() => {
    let isMounted = true;

    const initializeAuth = async () => {
      try {
        setAuthState(prev => ({ ...prev, isLoading: true, error: null }));
        setLoading(true);

        // –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–∫–µ–Ω –≤ localStorage
        const storedToken = localStorage.getItem('authToken');
        if (storedToken) {
          console.log('Found stored token, loading user data');
          
          const user = await loadUserFromToken(storedToken);
          if (user && isMounted) {
            setAuth(user, storedToken);
            setAuthState({
              user,
              token: storedToken,
              isAuthenticated: true,
              isLoading: false,
              error: null,
            });
            console.log('Authentication restored from stored token');
            return;
          } else {
            // –¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω, —É–¥–∞–ª—è–µ–º –µ–≥–æ
            localStorage.removeItem('authToken');
          }
        }

        // –®–∞–≥ 2: –ñ–¥–µ–º –ø–æ–ª—É—á–µ–Ω–∏—è Telegram –¥–∞–Ω–Ω—ã—Ö
        if (!initDataRaw || !telegramUser) {
          // –î–∞–µ–º –≤—Ä–µ–º—è SDK –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è
          const maxWaitTime = 5000; // 5 —Å–µ–∫—É–Ω–¥
          const startTime = Date.now();
          
          const waitForTelegramData = () => {
            return new Promise<boolean>((resolve) => {
              const checkData = () => {
                if (initDataRaw && telegramUser) {
                  resolve(true);
                  return;
                }
                
                if (Date.now() - startTime > maxWaitTime) {
                  resolve(false);
                  return;
                }
                
                setTimeout(checkData, 100);
              };
              
              checkData();
            });
          };
          
          const hasData = await waitForTelegramData();
          
          if (!hasData) {
            if (isMounted) {
              setAuthState({
                user: null,
                token: null,
                isLoading: false,
                error: '–û–∂–∏–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö Telegram... –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–æ —á–µ—Ä–µ–∑ –±–æ—Ç–∞ @ThreeGIS_bot',
                isAuthenticated: false,
              });
            }
            return;
          }
        }

        // –®–∞–≥ 3: –ü—ã—Ç–∞–µ–º—Å—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ Telegram
        if (initDataRaw && telegramUser) {
          console.log('üîê –ü—ã—Ç–∞–µ–º—Å—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ Telegram', {
            hasInitData: !!initDataRaw,
            hasUser: !!telegramUser,
            userId: telegramUser?.id
          });
          
          const authResult = await authenticateWithTelegram();
          if (authResult && isMounted) {
            const { user, token: newToken } = authResult;
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω
            localStorage.setItem('authToken', newToken);
            
            setAuth(user, newToken);
            
            setAuthState({
              user,
              token: newToken,
              isAuthenticated: true,
              isLoading: false,
              error: null,
            });
            
            console.log('‚úÖ –ù–æ–≤–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
            return;
          }
        }

        // –®–∞–≥ 4: –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å
        if (isMounted) {
          setAuthState({
            user: null,
            token: null,
            isLoading: false,
            error: '–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ Telegram',
            isAuthenticated: false,
          });
          console.warn('‚ùå Authentication failed');
        }

      } catch (error) {
        console.error('Authentication initialization error:', error);
        
        if (isMounted) {
          const errorMessage = error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏';
          setAuthState({
            user: null,
            token: null,
            isLoading: false,
            error: errorMessage,
            isAuthenticated: false,
          });
          setError(errorMessage);
        }
      } finally {
        if (isMounted) {
          setLoading(false);
        }
      }
    };

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
    if (typeof window !== 'undefined') {
      initializeAuth();
    }

    return () => {
      isMounted = false;
    };
  }, [
    initDataRaw,
    telegramUser,
    webAppData,
    setAuth,
    setLoading,
    setError,
    loadUserFromToken,
    authenticateWithTelegram,
  ]);

  /**
   * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
   */
  useEffect(() => {
    console.log(`Auth state changed: authenticated=${authState.isAuthenticated}, loading=${authState.isLoading}, hasError=${!!authState.error}`);
  }, [authState.isAuthenticated, authState.isLoading, authState.error]);

  return {
    // State
    ...authState,
    
    // Actions
    logout,
    refreshToken,
    updateLocation,
    clearError,
  };
}

/**
 * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
 */
export const AuthUtils = {
  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ª–æ–≥–∏–Ω–∞
   */
  requiresLogin(authState: AuthState): boolean {
    return !authState.isAuthenticated && !authState.isLoading;
  },

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  getWelcomeMessage(user: UserWithRelations | null): string {
    if (!user) return '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ 3GIS!';
    
    const name = user.firstName || user.username || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
    return `–ü—Ä–∏–≤–µ—Ç, ${name}!`;
  },

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å–∞
   */
  isPremiumUser(user: UserWithRelations | null): boolean {
    return user?.isPremium || false;
  },

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
   */
  formatLastSeen(user: UserWithRelations | null): string {
    if (!user?.lastSeenAt) return '–ù–∏–∫–æ–≥–¥–∞';
    
    return new Date(user.lastSeenAt).toLocaleString('ru-RU');
  },
};
