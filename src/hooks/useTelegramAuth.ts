// src/hooks/useTelegramAuth.ts
'use client';

import { useEffect, useState, useCallback } from 'react';
import { User, Prisma } from '@prisma/client';
import { useAuthStore } from '@/store/auth-store';
import { useRawInitData } from '@telegram-apps/sdk-react';

// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±–∏—Ä–∞–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏–µ –∏–º–ø–æ—Ä—Ç—ã —Ö—É–∫–æ–≤
// –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π TelegramProvider
import { useTelegram } from '@/components/providers/TelegramProvider';

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –æ—Ç–Ω–æ—à–µ–Ω–∏—è–º–∏
const userWithRelationsPayload = Prisma.validator<Prisma.UserDefaultArgs>()({
  include: {
    city: true,
    businesses: {
      include: {
        category: true,
        city: true
      }
    },
    favorites: {
      include: {
        business: {
          include: {
            category: true
          }
        }
      }
    }
  }
});

type UserWithRelations = Prisma.UserGetPayload<typeof userWithRelationsPayload>;

interface AuthState {
  user: UserWithRelations | null;
  token: string | null;
  isLoading: boolean;
  error: string | null;
  isAuthenticated: boolean;
}

interface AuthActions {
  logout: () => void;
  refreshToken: () => Promise<boolean>;
  updateLocation: (latitude: number, longitude: number) => Promise<void>;
  clearError: () => void;
}

/**
 * ‚úÖ –£–ü–†–û–©–ï–ù–ù–´–ô –•–£–ö –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò –î–õ–Ø 3GIS (—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Å –Ω–æ–≤—ã–º TelegramProvider)
 * –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ TelegramProvider –≤–º–µ—Å—Ç–æ –ø—Ä—è–º—ã—Ö —Ö—É–∫–æ–≤ SDK
 */
export function useTelegramAuth(): AuthState & AuthActions {
  const { setAuth, setLoading, setError, updateUserLocation, logout: clearAuth } = useAuthStore();
  
  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞ –∏–∑ TelegramContextValue
  const { user: telegramUser, isAuthenticated: isTelegramAuth, isReady } = useTelegram();
  
  // ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ö—É–∫ –¥–ª—è rawInitData
  const rawInitData = useRawInitData();

  const [authState, setAuthState] = useState<AuthState>({
    user: null,
    token: null,
    isLoading: true,
    error: null,
    isAuthenticated: false,
  });

  /**
   * –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram initData
   */
  const authenticateWithTelegram = useCallback(async (): Promise<{ user: UserWithRelations; token: string } | null> => {
    try {
      if (!rawInitData) {
        throw new Error('No Telegram rawInitData available');
      }

      console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é —Å rawInitData (–Ω–æ–≤—ã–π Provider):', {
        hasRawInitData: !!rawInitData,
        hasUser: !!telegramUser,
        userId: telegramUser?.id
      });

      // –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ API
      const response = await fetch('/api/auth/telegram', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          initData: rawInitData,
          debug: {
            hasUser: !!telegramUser,
            userId: telegramUser?.id
          }
        }),
      });

      if (!response.ok) {
        const errorData = await response.text();
        throw new Error(`Authentication failed: ${response.status} ${errorData}`);
      }

      const authResult = await response.json();
      console.log('‚úÖ Telegram authentication successful (–Ω–æ–≤—ã–π Provider)');
      return authResult;
    } catch (error) {
      console.error('‚ùå Telegram authentication failed:', error);
      
      if (error instanceof Error) {
        throw new Error(`–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${error.message}`);
      }
      
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ Telegram');
    }
  }, [rawInitData, telegramUser]);

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–æ–∫–µ–Ω—É –∏–∑ localStorage
   */
  const loadUserFromToken = useCallback(async (authToken: string): Promise<UserWithRelations | null> => {
    try {
      const response = await fetch('/api/auth/me', {
        headers: { Authorization: `Bearer ${authToken}` },
      });

      if (!response.ok) {
        console.warn('Token invalid, user not found');
        return null;
      }

      const user = await response.json() as UserWithRelations;
      console.log('User loaded from token successfully');
      return user;
    } catch (error) {
      console.error('Error loading user from token:', error);
      return null;
    }
  }, []);

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
   */
  const refreshToken = useCallback(async (): Promise<boolean> => {
    try {
      setAuthState(prev => ({ ...prev, isLoading: true }));
      
      const response = await fetch('/api/auth/refresh', {
        method: 'POST',
        credentials: 'include',
      });

      if (!response.ok) {
        return false;
      }

      const { token: newToken, user } = await response.json();
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω
      localStorage.setItem('authToken', newToken);
      
      setAuth(user, newToken);
      setAuthState(prev => ({
        ...prev,
        user,
        token: newToken,
        isAuthenticated: true,
        error: null,
        isLoading: false,
      }));
      
      console.log('Token refresh completed successfully');
      return true;
    } catch (error) {
      console.error('Token refresh failed:', error);
      setAuthState(prev => ({
        ...prev,
        error: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏',
        isLoading: false,
      }));
      return false;
    }
  }, [setAuth]);

  /**
   * –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
   */
  const logout = useCallback(async () => {
    try {
      localStorage.removeItem('authToken');
      clearAuth();
      
      setAuthState({
        user: null,
        token: null,
        isLoading: false,
        error: null,
        isAuthenticated: false,
      });
      
      console.log('User logged out successfully');
    } catch (error) {
      console.error('Error during logout:', error);
    }
  }, [clearAuth]);

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  const updateLocation = useCallback(async (latitude: number, longitude: number) => {
    if (!authState.token) {
      console.warn('Cannot update location: no auth token');
      return;
    }

    try {
      await fetch('/api/user/location', {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${authState.token}`,
        },
        body: JSON.stringify({ latitude, longitude }),
      });

      updateUserLocation(latitude, longitude);
      console.log('User location updated successfully');
    } catch (error) {
      console.error('Error updating user location:', error);
    }
  }, [authState.token, updateUserLocation]);

  /**
   * –û—á–∏—Å—Ç–∫–∞ –æ—à–∏–±–æ–∫
   */
  const clearError = useCallback(() => {
    setAuthState(prev => ({ ...prev, error: null }));
    setError(null);
  }, [setError]);

  /**
   * ‚úÖ –£–ü–†–û–©–ï–ù–ù–ê–Ø –ª–æ–≥–∏–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ - –æ—Å–Ω–æ–≤–∞–Ω–∞ –Ω–∞ TelegramProvider
   */
  useEffect(() => {
    let isMounted = true;

    const initializeAuth = async () => {
      try {
        setAuthState(prev => ({ ...prev, isLoading: true, error: null }));
        setLoading(true);

        // –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ TelegramProvider
        if (!isReady) {
          return;
        }

        // –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–∫–µ–Ω –≤ localStorage
        const storedToken = localStorage.getItem('authToken');
        if (storedToken) {
          console.log('Found stored token, loading user data');
          
          const user = await loadUserFromToken(storedToken);
          if (user && isMounted) {
            setAuth(user, storedToken);
            setAuthState({
              user,
              token: storedToken,
              isAuthenticated: true,
              isLoading: false,
              error: null,
            });
            console.log('Authentication restored from stored token');
            return;
          } else {
            // –¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω, —É–¥–∞–ª—è–µ–º –µ–≥–æ
            localStorage.removeItem('authToken');
          }
        }

        // –®–∞–≥ 2: –ü—ã—Ç–∞–µ–º—Å—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ Telegram (–µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ)
        if (isTelegramAuth && telegramUser && rawInitData) {
          console.log('üîê –ü—ã—Ç–∞–µ–º—Å—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ Telegram (–Ω–æ–≤—ã–π Provider)');
          
          const authResult = await authenticateWithTelegram();
          if (authResult && isMounted) {
            const { user, token: newToken } = authResult;
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω
            localStorage.setItem('authToken', newToken);
            
            setAuth(user, newToken);
            
            setAuthState({
              user,
              token: newToken,
              isAuthenticated: true,
              isLoading: false,
              error: null,
            });
            
            console.log('‚úÖ –ù–æ–≤–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
            return;
          }
        }

        // –®–∞–≥ 3: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        if (isMounted) {
          setAuthState({
            user: null,
            token: null,
            isLoading: false,
            error: telegramUser ? null : '–û–∂–∏–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö Telegram...',
            isAuthenticated: false,
          });
        }

      } catch (error) {
        console.error('Authentication initialization error:', error);
        
        if (isMounted) {
          const errorMessage = error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏';
          setAuthState({
            user: null,
            token: null,
            isLoading: false,
            error: errorMessage,
            isAuthenticated: false,
          });
          setError(errorMessage);
        }
      } finally {
        if (isMounted) {
          setLoading(false);
        }
      }
    };

    initializeAuth();

    return () => {
      isMounted = false;
    };
  }, [
    isReady,
    isTelegramAuth,
    telegramUser,
    rawInitData,
    setAuth,
    setLoading,
    setError,
    loadUserFromToken,
    authenticateWithTelegram,
  ]);

  return {
    // State
    ...authState,
    
    // Actions
    logout,
    refreshToken,
    updateLocation,
    clearError,
  };
}

/**
 * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
 */
export const AuthUtils = {
  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ª–æ–≥–∏–Ω–∞
   */
  requiresLogin(authState: AuthState): boolean {
    return !authState.isAuthenticated && !authState.isLoading;
  },

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  getWelcomeMessage(user: UserWithRelations | null): string {
    if (!user) return '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ 3GIS!';
    
    const name = user.firstName || user.username || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
    return `–ü—Ä–∏–≤–µ—Ç, ${name}!`;
  },

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å–∞
   */
  isPremiumUser(user: UserWithRelations | null): boolean {
    return user?.isPremium || false;
  },

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
   */
  formatLastSeen(user: UserWithRelations | null): string {
    if (!user?.lastSeenAt) return '–ù–∏–∫–æ–≥–¥–∞';
    
    return new Date(user.lastSeenAt).toLocaleString('ru-RU');
  },
};

// ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ö—É–∫–∏ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
export function useTelegramEnvironment() {
  const { isTelegramEnvironment } = useTelegram();
  
  return {
    isTelegramEnvironment,
    isWebApp: isTelegramEnvironment,
    isDevelopment: process.env.NODE_ENV === 'development'
  };
}

export function formatTelegramUser(user: UserWithRelations | null): string {
  if (!user) return '–ì–æ—Å—Ç—å';
  
  const parts = [user.firstName];
  if (user.lastName) parts.push(user.lastName);
  
  return parts.join(' ');
}

export function getTelegramAvatarUrl(user: UserWithRelations | null): string | null {
  return user?.avatar || null;
}