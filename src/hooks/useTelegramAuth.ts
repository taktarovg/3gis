'use client';

import { useLaunchParams, useRawInitData } from '@telegram-apps/sdk-react';
import { useEffect, useState } from 'react';

// ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ç–∏–ø—ã –¥–ª—è Telegram SDK v3.x –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
interface TelegramUser {
  id: number;
  first_name: string;
  last_name?: string;
  username?: string;
  language_code?: string;
  allows_write_to_pm?: boolean;
  photo_url?: string;
}

// ‚úÖ SDK v3.x –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º tgWebApp
interface LaunchParams {
  tgWebAppBotInline?: boolean;
  tgWebAppData?: {
    user?: TelegramUser;
    authDate?: Date;  // –≤ v3.x authDate –≤–º–µ—Å—Ç–æ auth_date
    queryId?: string; // –≤ v3.x queryId –≤–º–µ—Å—Ç–æ query_id  
    hash?: string;
  };
  tgWebAppStartParam?: string;
  tgWebAppThemeParams?: Record<string, string>;
  tgWebAppVersion?: string;
  tgWebAppPlatform?: string;
}

export function useTelegramAuth() {
  const [user, setUser] = useState<TelegramUser | null>(null);
  const [isInitialized, setIsInitialized] = useState(false);
  const [error, setError] = useState<string | null>(null);
  
  // ‚úÖ SDK v3.x: –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –±–µ–∑—É—Å–ª–æ–≤–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ö—É–∫–æ–≤
  // –í v3.x useLaunchParams –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç SSR –ø–∞—Ä–∞–º–µ—Ç—Ä - —ç—Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
  const launchParams = useLaunchParams() as LaunchParams;
  const rawInitData = useRawInitData();
  
  useEffect(() => {
    try {
      // ‚úÖ SDK v3.x: –ø—Ä–æ–≤–µ—Ä—è–µ–º tgWebAppData 
      if (launchParams?.tgWebAppData?.user) {
        setUser(launchParams.tgWebAppData.user);
        setIsInitialized(true);
        console.log('‚úÖ Telegram user loaded:', launchParams.tgWebAppData.user);
      } else if (typeof window !== 'undefined') {
        // Development mode - —Å–æ–∑–¥–∞–µ–º mock –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (process.env.NODE_ENV === 'development') {
          const mockUser: TelegramUser = {
            id: 123456789,
            first_name: '–¢–µ—Å—Ç',
            last_name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
            username: 'test_user',
            language_code: 'ru'
          };
          setUser(mockUser);
          setIsInitialized(true);
          console.log('üîß Development mode: Mock user created');
        } else {
          // Production –±–µ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          setIsInitialized(true);
          console.log('‚ö†Ô∏è No Telegram user data available');
        }
      }
    } catch (err) {
      console.error('Telegram Auth Error:', err);
      setError(err instanceof Error ? err.message : 'Unknown error');
      setIsInitialized(true);
    }
  }, [launchParams]);
  
  return {
    user,
    isInitialized,
    isLoading: !isInitialized, // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º isLoading –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    error,
    rawInitData,
    isAuthenticated: !!user,
    userId: user?.id
  };
}

// ‚úÖ –•—É–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Telegram –æ–∫—Ä—É–∂–µ–Ω–∏—è
export function useTelegramEnvironment() {
  const [isTelegramEnvironment, setIsTelegramEnvironment] = useState(false);
  const [isWebApp, setIsWebApp] = useState(false);
  
  useEffect(() => {
    if (typeof window !== 'undefined') {
      const hasTelegramWebApp = !!(window as any).Telegram?.WebApp;
      const hasInitData = !!new URLSearchParams(window.location.search).get('tgWebAppData');
      
      setIsTelegramEnvironment(hasTelegramWebApp || hasInitData);
      setIsWebApp(hasTelegramWebApp);
      
      console.log('üåê Telegram Environment Check:', { 
        hasTelegramWebApp, 
        hasInitData, 
        isTelegramEnvironment: hasTelegramWebApp || hasInitData 
      });
    }
  }, []);
  
  return {
    isTelegramEnvironment,
    isWebApp,
    isDevelopment: process.env.NODE_ENV === 'development'
  };
}

// ‚úÖ –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram –¥–∞–Ω–Ω—ã–º–∏
export function formatTelegramUser(user: TelegramUser | null): string {
  if (!user) return '–ì–æ—Å—Ç—å';
  
  const parts = [user.first_name];
  if (user.last_name) parts.push(user.last_name);
  
  return parts.join(' ');
}

export function getTelegramAvatarUrl(user: TelegramUser | null): string | null {
  return user?.photo_url || null;
}
