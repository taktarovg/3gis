// src/types/telegram.ts\n// ✅ ЕДИНЫЙ файл типов для Telegram SDK v3.x и WebApp API\n// Объединяет все Telegram типы в одном месте для лучшего контроля\n\nimport type { \n  LaunchParams as SDKLaunchParams, \n  InitData as SDKInitData, \n  User as TelegramSDKUser \n} from '@telegram-apps/sdk';\n\n/**\n * ✅ ПОЛЬЗОВАТЕЛЬСКИЕ ИНТЕРФЕЙСЫ ДЛЯ 3GIS\n */\n\nexport interface TelegramUser {\n  id: number;\n  first_name: string;\n  last_name?: string;\n  username?: string;\n  language_code?: string;\n  is_premium?: boolean;\n  allows_write_to_pm?: boolean;\n  photo_url?: string;\n}\n\n/**\n * ✅ Контекст TelegramProvider - используется в приложении\n */\nexport interface TelegramContextValue {\n  isReady: boolean;\n  user: TelegramUser | null;\n  isAuthenticated: boolean;\n  isTelegramEnvironment: boolean;\n  error: string | null;\n  launchParams: SDKLaunchParams | null;\n  webApp: TelegramWebApp | null;\n  sdkVersion: string;\n  // ❌ rawInitData убрано - используйте useRawInitData() хук\n}\n\n/**\n * ✅ Расширенные типы для SDK (совместимость с v3.x)\n */\nexport interface InitData extends SDKInitData {\n  user?: TelegramUser;\n  receiver?: TelegramUser & { is_bot?: boolean };\n  chat?: {\n    id: number;\n    type: string;\n    title?: string;\n    username?: string;\n    photo_url?: string;\n  };\n  // ✅ Обязательные поля для SDK v3.x\n  authDate: Date;\n  signature: string;\n  \n  // ✅ Дополнительные поля\n  queryId?: string;\n  hash?: string;\n  startParam?: string;\n  chatType?: string;\n  chatInstance?: string;\n  canSendAfter?: number;\n}\n\nexport interface LaunchParams extends SDKLaunchParams {\n  tgWebAppData?: InitData;\n  tgWebAppVersion?: string;\n  tgWebAppPlatform?: string;\n  tgWebAppStartParam?: string;\n  tgWebAppBotInline?: boolean;\n  tgWebAppThemeParams?: Record<string, any>;\n}\n\n/**\n * ✅ Полный интерфейс Telegram WebApp API (window.Telegram.WebApp)\n */\nexport interface TelegramWebApp {\n  version: string;\n  platform: string;\n  isExpanded: boolean;\n  viewportHeight: number;\n  viewportStableHeight: number;\n  headerColor: string;\n  backgroundColor: string;\n  isClosingConfirmationEnabled: boolean;\n  \n  // User data\n  initData: string;\n  initDataUnsafe: {\n    query_id?: string;\n    user?: TelegramUser;\n    auth_date?: number;\n    hash?: string;\n    start_param?: string;\n    chat?: {\n      id: number;\n      type: string;\n      title?: string;\n      username?: string;\n      photo_url?: string;\n    };\n    receiver?: TelegramUser & { is_bot?: boolean };\n    can_send_after?: number;\n    chat_type?: string;\n    chat_instance?: string;\n  };\n  \n  // Theme\n  colorScheme: 'light' | 'dark';\n  themeParams: {\n    bg_color?: string;\n    text_color?: string;\n    hint_color?: string;\n    link_color?: string;\n    button_color?: string;\n    button_text_color?: string;\n    secondary_bg_color?: string;\n    header_bg_color?: string;\n    accent_text_color?: string;\n    section_bg_color?: string;\n    section_header_text_color?: string;\n    subtitle_text_color?: string;\n    destructive_text_color?: string;\n  };\n  \n  // Methods\n  ready(): void;\n  expand(): void;\n  close(): void;\n  showAlert(message: string, callback?: () => void): void;\n  showConfirm(message: string, callback: (confirmed: boolean) => void): void;\n  showPopup(params: {\n    title?: string;\n    message: string;\n    buttons?: Array<{\n      id?: string;\n      type: 'default' | 'ok' | 'close' | 'cancel' | 'destructive';\n      text: string;\n    }>;\n  }, callback?: (buttonId: string) => void): void;\n  \n  // Navigation\n  enableClosingConfirmation(): void;\n  disableClosingConfirmation(): void;\n  onEvent(eventType: string, eventHandler: Function): void;\n  offEvent(eventType: string, eventHandler: Function): void;\n  sendData(data: string): void;\n  openLink(url: string, options?: { try_instant_view?: boolean }): void;\n  openTelegramLink(url: string): void;\n  openInvoice(url: string, callback?: (status: string) => void): void;\n  \n  // Advanced methods\n  isVersionAtLeast(version: string): boolean;\n  setHeaderColor(color: string): void;\n  setBackgroundColor(color: string): void;\n  setBottomBarColor?(color: string): void;\n  requestWriteAccess(callback?: (granted: boolean) => void): void;\n  requestContact(callback?: (granted: boolean, data?: any) => void): void;\n  showScanQrPopup(params: { text?: string }, callback?: (text: string) => boolean): void;\n  closeScanQrPopup(): void;\n  readTextFromClipboard(callback?: (text: string) => void): void;\n  requestFullscreen(): void;\n  exitFullscreen(): void;\n  disableVerticalSwipes?(): void;\n  enableVerticalSwipes?(): void;\n  \n  // UI elements\n  MainButton: {\n    text: string;\n    color: string;\n    textColor: string;\n    isVisible: boolean;\n    isProgressVisible: boolean;\n    isActive: boolean;\n    onClick(callback: () => void): void;\n    offClick(callback: () => void): void;\n    show(): void;\n    hide(): void;\n    enable(): void;\n    disable(): void;\n    setText(text: string): void;\n    setParams(params: {\n      text?: string;\n      color?: string;\n      text_color?: string;\n      is_active?: boolean;\n      is_visible?: boolean;\n    }): void;\n    showProgress(leaveActive?: boolean): void;\n    hideProgress(): void;\n  };\n  \n  BackButton: {\n    isVisible: boolean;\n    onClick(callback: () => void): void;\n    offClick(callback: () => void): void;\n    show(): void;\n    hide(): void;\n  };\n  \n  SecondaryButton?: {\n    text: string;\n    color: string;\n    textColor: string;\n    isVisible: boolean;\n    isActive: boolean;\n    isProgressVisible: boolean;\n    position: 'left' | 'right' | 'top' | 'bottom';\n    setText(text: string): void;\n    onClick(callback: () => void): void;\n    offClick(callback: () => void): void;\n    show(): void;\n    hide(): void;\n    enable(): void;\n    disable(): void;\n    showProgress(leaveActive?: boolean): void;\n    hideProgress(): void;\n    setParams(params: {\n      text?: string;\n      color?: string;\n      text_color?: string;\n      is_active?: boolean;\n      is_visible?: boolean;\n      position?: 'left' | 'right' | 'top' | 'bottom';\n    }): void;\n  };\n  \n  SettingsButton?: {\n    isVisible: boolean;\n    onClick(callback: () => void): void;\n    offClick(callback: () => void): void;\n    show(): void;\n    hide(): void;\n  };\n  \n  HapticFeedback: {\n    impactOccurred(style: 'light' | 'medium' | 'heavy' | 'rigid' | 'soft'): void;\n    notificationOccurred(type: 'error' | 'success' | 'warning'): void;\n    selectionChanged(): void;\n  };\n  \n  // Advanced APIs\n  CloudStorage?: {\n    setItem(key: string, value: string, callback?: (error: string | null, stored?: boolean) => void): void;\n    getItem(key: string, callback: (error: string | null, value?: string) => void): void;\n    getItems(keys: string[], callback: (error: string | null, values?: Record<string, string>) => void): void;\n    removeItem(key: string, callback?: (error: string | null, removed?: boolean) => void): void;\n    removeItems(keys: string[], callback?: (error: string | null, removed?: boolean) => void): void;\n    getKeys(callback: (error: string | null, keys?: string[]) => void): void;\n  };\n  \n  BiometricManager?: {\n    isInited: boolean;\n    isBiometricAvailable: boolean;\n    biometricType: 'finger' | 'face' | 'unknown';\n    isAccessRequested: boolean;\n    isAccessGranted: boolean;\n    isBiometricTokenSaved: boolean;\n    deviceId: string;\n    init(callback?: () => void): void;\n    requestAccess(params: { reason?: string }, callback?: (granted: boolean) => void): void;\n    authenticate(params: { reason?: string }, callback?: (success: boolean, biometric_token?: string) => void): void;\n    updateBiometricToken(token: string, callback?: (updated: boolean) => void): void;\n    openSettings(): void;\n  };\n  \n  LocationManager?: {\n    isInited: boolean;\n    isLocationAvailable: boolean;\n    isAccessRequested: boolean;\n    isAccessGranted: boolean;\n    init(callback?: () => void): void;\n    getLocation(callback?: (location: {\n      latitude: number;\n      longitude: number;\n      altitude?: number;\n      course?: number;\n      speed?: number;\n      horizontal_accuracy?: number;\n      vertical_accuracy?: number;\n    } | null) => void): void;\n    openSettings(): void;\n  };\n  \n  // Payments (Telegram Stars)\n  invoices?: {\n    open(url: string, callback?: (status: string) => void): void;\n  };\n}\n\n/**\n * ✅ Утилитарные типы\n */\nexport type EnvironmentType = 'browser' | 'telegram-web' | 'mini-app';\n\nexport interface EnvironmentInfo {\n  type: EnvironmentType;\n  userAgent: string;\n  platform: string;\n  isMobile: boolean;\n  isIOS: boolean;\n  isAndroid: boolean;\n  hasTelegramWebApp: boolean;\n  webAppVersion?: string;\n  urlParams: Record<string, string>;\n}\n\n/**\n * ✅ Глобальные типы (объявляем здесь же для единообразия)\n */\ndeclare global {\n  interface Window {\n    Telegram?: {\n      WebApp?: TelegramWebApp;\n    };\n  }\n}\n\n/**\n * ✅ Расширение модуля @telegram-apps/sdk-react для TypeScript\n */\ndeclare module '@telegram-apps/sdk-react' {\n  export interface InitData {\n    user?: TelegramUser;\n    receiver?: TelegramUser & { is_bot?: boolean };\n    chat?: {\n      id: number;\n      type: string;\n      title?: string;\n      username?: string;\n      photo_url?: string;\n    };\n    authDate: Date;\n    signature: string;\n    queryId?: string;\n    hash?: string;\n    startParam?: string;\n    chatType?: string;\n    chatInstance?: string;\n    canSendAfter?: number;\n  }\n\n  export interface LaunchParams {\n    tgWebAppData?: InitData;\n    tgWebAppVersion?: string;\n    tgWebAppPlatform?: string;\n    tgWebAppStartParam?: string;\n    tgWebAppBotInline?: boolean;\n    tgWebAppThemeParams?: Record<string, any>;\n  }\n}\n\n/**\n * ✅ Re-export типов от SDK для удобства\n */\nexport type { SDKLaunchParams, SDKInitData, TelegramSDKUser };\n\n/**\n * ✅ Экспорт всех типов для использования в приложении\n */\nexport type {\n  // Основные интерфейсы\n  TelegramUser,\n  TelegramContextValue,\n  TelegramWebApp,\n  InitData,\n  LaunchParams,\n  \n  // Утилитарные типы\n  EnvironmentType,\n  EnvironmentInfo,\n};