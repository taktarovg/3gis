#!/usr/bin/env node
/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram Bot webhook –¥–ª—è 3GIS
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: npm run setup:webhook
 */

const { config } = require('dotenv');
const fetch = require('node-fetch');

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
config();

// –ü–æ–ª–∏—Ñ–∏–ª–ª –¥–ª—è fetch –≤ Node.js < 18
if (!globalThis.fetch) {
  globalThis.fetch = fetch;
}

const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const WEBHOOK_URL = process.env.NEXT_PUBLIC_APP_URL 
  ? `${process.env.NEXT_PUBLIC_APP_URL}/api/payments/webhook`
  : 'https://3gis.biz/api/payments/webhook';
const WEBHOOK_SECRET = process.env.TELEGRAM_WEBHOOK_SECRET;

async function setupWebhook() {
  if (!TELEGRAM_BOT_TOKEN) {
    console.error('‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ');
    process.exit(1);
  }

  if (!WEBHOOK_SECRET) {
    console.error('‚ùå TELEGRAM_WEBHOOK_SECRET –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ');
    process.exit(1);
  }

  console.log('üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram Bot webhook...');
  console.log(`üì° Webhook URL: ${WEBHOOK_URL}`);

  try {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
    const setWebhookUrl = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/setWebhook`;
    const webhookData = {
      url: WEBHOOK_URL,
      allowed_updates: ['message', 'pre_checkout_query'],
      secret_token: WEBHOOK_SECRET,
      drop_pending_updates: true
    };

    const response = await fetch(setWebhookUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(webhookData)
    });

    const result = await response.json();

    if (result.ok) {
      console.log('‚úÖ Webhook —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!');
      console.log(`üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: ${result.description}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ webhook
      await checkWebhookInfo();
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook:', result);
      process.exit(1);
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ webhook:', error);
    process.exit(1);
  }
}

async function checkWebhookInfo() {
  try {
    const infoUrl = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/getWebhookInfo`;
    const response = await fetch(infoUrl);
    const result = await response.json();

    if (result.ok) {
      console.log('\nüìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ webhook:');
      console.log(`üîó URL: ${result.result.url}`);
      console.log(`‚úÖ –ò–º–µ–µ—Ç SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç: ${result.result.has_custom_certificate ? '–î–∞' : '–ù–µ—Ç'}`);
      console.log(`üìä –û–∂–∏–¥–∞—é—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: ${result.result.pending_update_count}`);
      
      if (result.result.last_error_date) {
        console.log(`‚ö†Ô∏è –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: ${new Date(result.result.last_error_date * 1000).toISOString()}`);
        console.log(`üìù –°–æ–æ–±—â–µ–Ω–∏–µ –æ—à–∏–±–∫–∏: ${result.result.last_error_message}`);
      } else {
        console.log('‚úÖ –û—à–∏–±–æ–∫ –Ω–µ—Ç');
      }
    }
  } catch (error) {
    console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ webhook:', error);
  }
}

async function deleteWebhook() {
  try {
    console.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ webhook...');
    const deleteUrl = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/deleteWebhook`;
    
    const response = await fetch(deleteUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        drop_pending_updates: true
      })
    });

    const result = await response.json();
    
    if (result.ok) {
      console.log('‚úÖ Webhook —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!');
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è webhook:', result);
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ webhook:', error);
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const command = process.argv[2];

async function main() {
  switch (command) {
    case 'setup':
    case undefined:
      await setupWebhook();
      break;
    
    case 'info':
      await checkWebhookInfo();
      break;
    
    case 'delete':
      await deleteWebhook();
      break;
    
    default:
      console.log(`
ü§ñ Telegram Bot Webhook Manager –¥–ª—è 3GIS

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  npm run setup:webhook        - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å webhook
  npm run setup:webhook info   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å webhook
  npm run setup:webhook delete - –£–¥–∞–ª–∏—Ç—å webhook

–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:
  TELEGRAM_BOT_TOKEN     - –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –æ—Ç @BotFather
  TELEGRAM_WEBHOOK_SECRET - –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è webhook
  NEXT_PUBLIC_APP_URL    - URL –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è webhook
      `);
      break;
  }
}

main().catch(console.error);
