// Updated seed.ts - –ü–æ–ª–Ω—ã–π —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –°–®–ê –¥–ª—è 3GIS
import { PrismaClient } from '@prisma/client';
import { US_STATES } from './us-states';
import { RUSSIAN_SPEAKING_CITIES } from './russian-speaking-cities';
import { OTHER_MAJOR_CITIES } from './other-major-cities';

const prisma = new PrismaClient();

// –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è 3GIS
const categories = [
  { name: "–†–µ—Å—Ç–æ—Ä–∞–Ω—ã –∏ –∫–∞—Ñ–µ", nameEn: "Restaurants", slug: "restaurants", icon: "üçΩÔ∏è", order: 1 },
  { name: "–ú–µ–¥–∏—Ü–∏–Ω–∞", nameEn: "Healthcare", slug: "healthcare", icon: "‚öïÔ∏è", order: 2 },
  { name: "–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ —É—Å–ª—É–≥–∏", nameEn: "Legal Services", slug: "legal", icon: "‚öñÔ∏è", order: 3 },
  { name: "–ö—Ä–∞—Å–æ—Ç–∞ –∏ –∑–¥–æ—Ä–æ–≤—å–µ", nameEn: "Beauty & Health", slug: "beauty", icon: "üíÑ", order: 4 },
  { name: "–ê–≤—Ç–æ—Å–µ—Ä–≤–∏—Å—ã", nameEn: "Auto Services", slug: "auto", icon: "üîß", order: 5 },
  { name: "–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —É—Å–ª—É–≥–∏", nameEn: "Financial Services", slug: "finance", icon: "üè¶", order: 6 },
  { name: "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ", nameEn: "Education", slug: "education", icon: "üéì", order: 7 },
  { name: "–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å", nameEn: "Real Estate", slug: "realestate", icon: "üè†", order: 8 }
];

// –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –≥–æ—Ä–æ–¥–∞
const ALL_CITIES = [
  ...RUSSIAN_SPEAKING_CITIES,
  ...OTHER_MAJOR_CITIES
];

// –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è –¥–ª—è –ù—å—é-–ô–æ—Ä–∫–∞ (—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ)
const sampleBusinesses = [
  // –†–µ—Å—Ç–æ—Ä–∞–Ω—ã
  {
    name: "–†–µ—Å—Ç–æ—Ä–∞–Ω –†—É—Å—Å–∫–∏–π –¥–æ–º",
    nameEn: "Russian House Restaurant",
    description: "–¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–∞—è —Ä—É—Å—Å–∫–∞—è –∫—É—Ö–Ω—è –≤ —Å–µ—Ä–¥—Ü–µ –ë—Ä–∞–π—Ç–æ–Ω-–ë–∏—á. –ë–æ—Ä—â, –ø–µ–ª—å–º–µ–Ω–∏, –±–ª–∏–Ω—ã –∏ –¥—Ä—É–≥–∏–µ –ª—é–±–∏–º—ã–µ –±–ª—é–¥–∞.",
    categorySlug: "restaurants",
    cityName: "New York City",
    stateId: "NY",
    address: "1273 Brighton Beach Ave",
    zipCode: "11235",
    phone: "(718) 555-0123",
    website: "https://russianhouseny.com",
    latitude: 40.5776,
    longitude: -73.9614,
    languages: ["ru", "en"],
    businessHours: {
      mon: "12:00-23:00",
      tue: "12:00-23:00", 
      wed: "12:00-23:00",
      thu: "12:00-23:00",
      fri: "12:00-00:00",
      sat: "12:00-00:00",
      sun: "12:00-23:00"
    },
    hasParking: true,
    rating: 4.8,
    reviewCount: 127
  },
  {
    name: "–ö–∞—Ñ–µ –ó–æ–ª–æ—Ç–æ–π –ø–µ—Ç—É—à–æ–∫",
    nameEn: "Golden Rooster Cafe",
    description: "–î–æ–º–∞—à–Ω—è—è –µ–¥–∞, –∫–∞–∫ —É –±–∞–±—É—à–∫–∏. –ö–æ—Ç–ª–µ—Ç—ã, —Å—É–ø—ã, —Å–≤–µ–∂–∞—è –≤—ã–ø–µ—á–∫–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å.",
    categorySlug: "restaurants",
    cityName: "New York City", 
    stateId: "NY",
    address: "1075 Brighton Beach Ave",
    zipCode: "11235",
    phone: "(718) 555-0456",
    latitude: 40.5781,
    longitude: -73.9583,
    languages: ["ru", "en"],
    businessHours: {
      mon: "08:00-22:00",
      tue: "08:00-22:00",
      wed: "08:00-22:00", 
      thu: "08:00-22:00",
      fri: "08:00-22:00",
      sat: "08:00-22:00",
      sun: "09:00-21:00"
    },
    rating: 4.6,
    reviewCount: 89
  },
  {
    name: "–ü–µ–∫–∞—Ä–Ω—è –£ —Ç–µ—â–∏",
    nameEn: "Mother-in-Law's Bakery",
    description: "–°–≤–µ–∂–∏–π —Ö–ª–µ–±, —Ç–æ—Ä—Ç—ã –Ω–∞ –∑–∞–∫–∞–∑, —Ä—É—Å—Å–∫–∏–µ —Å–ª–∞–¥–æ—Å—Ç–∏ –∏ –ø–∏—Ä–æ–∂–∫–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ –Ω–∞—á–∏–Ω–∫–∞–º–∏.",
    categorySlug: "restaurants",
    cityName: "New York City",
    stateId: "NY",
    address: "1018 Brighton Beach Ave", 
    zipCode: "11235",
    phone: "(718) 555-0789",
    latitude: 40.5785,
    longitude: -73.9577,
    languages: ["ru", "en"],
    businessHours: {
      mon: "07:00-20:00",
      tue: "07:00-20:00",
      wed: "07:00-20:00",
      thu: "07:00-20:00", 
      fri: "07:00-20:00",
      sat: "07:00-20:00",
      sun: "08:00-19:00"
    },
    rating: 4.7,
    reviewCount: 156
  },

  // –ú–µ–¥–∏—Ü–∏–Ω–∞
  {
    name: "–î–æ–∫—Ç–æ—Ä –ò–≤–∞–Ω–æ–≤ - –°–µ–º–µ–π–Ω–∞—è –º–µ–¥–∏—Ü–∏–Ω–∞",
    nameEn: "Dr. Ivanov Family Medicine",
    description: "–°–µ–º–µ–π–Ω—ã–π –≤—Ä–∞—á —Å 15-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º. –í–µ–¥–µ—Ç –ø—Ä–∏–µ–º –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Å—Ç—Ä–∞—Ö–æ–≤–æ–∫.",
    categorySlug: "healthcare",
    cityName: "New York City",
    stateId: "NY",
    address: "3131 Ocean Pkwy, Suite 2A",
    zipCode: "11235",
    phone: "(718) 555-1234",
    website: "https://drivanov.com",
    latitude: 40.5694,
    longitude: -73.9611,
    languages: ["ru", "en"],
    businessHours: {
      mon: "09:00-18:00",
      tue: "09:00-18:00",
      wed: "09:00-18:00",
      thu: "09:00-18:00",
      fri: "09:00-16:00",
      sat: "10:00-14:00",
      sun: "–ó–∞–∫—Ä—ã—Ç–æ"
    },
    acceptsCrypto: false,
    rating: 4.9,
    reviewCount: 234
  },
  {
    name: "–ö–ª–∏–Ω–∏–∫–∞ –ó–¥–æ—Ä–æ–≤—å–µ",
    nameEn: "Health Clinic",
    description: "–ú–Ω–æ–≥–æ–ø—Ä–æ—Ñ–∏–ª—å–Ω–∞—è –∫–ª–∏–Ω–∏–∫–∞ —Å —Ä—É—Å—Å–∫–æ–≥–æ–≤–æ—Ä—è—â–∏–º–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º–∏. –¢–µ—Ä–∞–ø–∏—è, –∫–∞—Ä–¥–∏–æ–ª–æ–≥–∏—è, –Ω–µ–≤—Ä–æ–ª–æ–≥–∏—è.",
    categorySlug: "healthcare",
    cityName: "New York City",
    stateId: "NY",
    address: "2632 E 14th St",
    zipCode: "11235", 
    phone: "(718) 555-5678",
    website: "https://healthclinicny.com",
    latitude: 40.5889,
    longitude: -73.9606,
    languages: ["ru", "en", "uk"],
    businessHours: {
      mon: "08:00-19:00",
      tue: "08:00-19:00",
      wed: "08:00-19:00",
      thu: "08:00-19:00",
      fri: "08:00-17:00",
      sat: "09:00-15:00",
      sun: "–ó–∞–∫—Ä—ã—Ç–æ"
    },
    hasParking: true,
    rating: 4.5,
    reviewCount: 167
  },

  // –Æ—Ä–∏—Å—Ç—ã
  {
    name: "–ü–µ—Ç—Ä–æ–≤ –∏ –ø–∞—Ä—Ç–Ω–µ—Ä—ã",
    nameEn: "Petrov & Associates",
    description: "–ò–º–º–∏–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ –ø—Ä–∞–≤–æ, —Å–µ–º–µ–π–Ω–æ–µ –ø—Ä–∞–≤–æ, —Å–æ–∑–¥–∞–Ω–∏–µ –±–∏–∑–Ω–µ—Å–∞. –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è.",
    categorySlug: "legal",
    cityName: "New York City",
    stateId: "NY",
    address: "1600 Sheepshead Bay Rd, Suite 1",
    zipCode: "11235",
    phone: "(718) 555-9999",
    website: "https://petrovlaw.com",
    latitude: 40.5861,
    longitude: -73.9444,
    languages: ["ru", "en"],
    businessHours: {
      mon: "09:00-18:00",
      tue: "09:00-18:00", 
      wed: "09:00-18:00",
      thu: "09:00-18:00",
      fri: "09:00-17:00",
      sat: "10:00-15:00",
      sun: "–ó–∞–∫—Ä—ã—Ç–æ"
    },
    rating: 4.8,
    reviewCount: 92
  },

  // –ö—Ä–∞—Å–æ—Ç–∞
  {
    name: "–°–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã –ê–Ω–Ω–∞",
    nameEn: "Anna Beauty Salon",
    description: "–°—Ç—Ä–∏–∂–∫–∏, –æ–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ, –º–∞–Ω–∏–∫—é—Ä, –ø–µ–¥–∏–∫—é—Ä. –†–∞–±–æ—Ç–∞–µ–º —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ —Ç—Ä–µ–Ω–¥–∞–º–∏.",
    categorySlug: "beauty",
    cityName: "New York City",
    stateId: "NY",
    address: "1904 86th St",
    zipCode: "11214",
    phone: "(718) 555-3333",
    latitude: 40.5944,
    longitude: -73.9861,
    languages: ["ru", "en"],
    businessHours: {
      mon: "–ó–∞–∫—Ä—ã—Ç–æ",
      tue: "10:00-19:00",
      wed: "10:00-19:00",
      thu: "10:00-19:00",
      fri: "10:00-19:00",
      sat: "09:00-18:00",
      sun: "10:00-16:00"
    },
    rating: 4.7,
    reviewCount: 145
  },

  // –ê–≤—Ç–æ—Å–µ—Ä–≤–∏—Å—ã
  {
    name: "–†—É—Å—Å–∫–∏–π –º–µ—Ö–∞–Ω–∏–∫",
    nameEn: "Russian Mechanic",
    description: "–†–µ–º–æ–Ω—Ç –≤—Å–µ—Ö –º–∞—Ä–æ–∫ –∞–≤—Ç–æ, –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞, –∑–∞–º–µ–Ω–∞ –º–∞—Å–ª–∞. –ß–µ—Å—Ç–Ω—ã–µ —Ü–µ–Ω—ã, –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞.",
    categorySlug: "auto",
    cityName: "New York City",
    stateId: "NY", 
    address: "1879 Coney Island Ave",
    zipCode: "11230",
    phone: "(718) 555-4444",
    latitude: 40.6131,
    longitude: -73.9619,
    languages: ["ru", "en"],
    businessHours: {
      mon: "08:00-18:00",
      tue: "08:00-18:00",
      wed: "08:00-18:00",
      thu: "08:00-18:00",
      fri: "08:00-18:00",
      sat: "09:00-16:00",
      sun: "–ó–∞–∫—Ä—ã—Ç–æ"
    },
    hasParking: true,
    rating: 4.4,
    reviewCount: 89
  }
];

// –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
const testUser = {
  telegramId: "123456789",
  username: "testuser",
  firstName: "–¢–µ—Å—Ç",
  lastName: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
  role: "USER" as const
};

async function main() {
  console.log('üå± Starting comprehensive seed for 3GIS...');

  // 1. –°–æ–∑–¥–∞–µ–º —à—Ç–∞—Ç—ã
  console.log('üèõÔ∏è Creating states...');
  for (const state of US_STATES) {
    await prisma.state.upsert({
      where: { id: state.id },
      update: {},
      create: state
    });
  }
  console.log(`‚úÖ Created ${US_STATES.length} states`);

  // 2. –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  console.log('üìã Creating categories...');
  for (const category of categories) {
    await prisma.businessCategory.upsert({
      where: { slug: category.slug },
      update: {},
      create: category
    });
  }
  console.log(`‚úÖ Created ${categories.length} categories`);

  // 3. –°–æ–∑–¥–∞–µ–º –≥–æ—Ä–æ–¥–∞
  console.log('üèôÔ∏è Creating cities...');
  let cityCount = 0;
  for (const city of ALL_CITIES) {
    await prisma.city.upsert({
      where: { 
        name_stateId: {
          name: city.name,
          stateId: city.stateId
        }
      },
      update: {},
      create: city
    });
    cityCount++;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 50 –≥–æ—Ä–æ–¥–æ–≤
    if (cityCount % 50 === 0) {
      console.log(`   üìç Processed ${cityCount} cities...`);
    }
  }
  console.log(`‚úÖ Created ${ALL_CITIES.length} cities`);

  // 4. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  console.log('üë§ Creating test user...');
  const user = await prisma.user.upsert({
    where: { telegramId: testUser.telegramId },
    update: {},
    create: testUser
  });

  // 5. –°–æ–∑–¥–∞–µ–º –∑–∞–≤–µ–¥–µ–Ω–∏—è
  console.log('üè¢ Creating businesses...');
  for (const business of sampleBusinesses) {
    const category = await prisma.businessCategory.findUnique({
      where: { slug: business.categorySlug }
    });
    
    const city = await prisma.city.findUnique({
      where: { 
        name_stateId: {
          name: business.cityName,
          stateId: business.stateId
        }
      }
    });

    if (category && city) {
      await prisma.business.create({
        data: {
          name: business.name,
          nameEn: business.nameEn,
          description: business.description,
          categoryId: category.id,
          cityId: city.id,
          stateId: business.stateId,
          address: business.address,
          zipCode: business.zipCode,
          phone: business.phone,
          website: business.website,
          latitude: business.latitude,
          longitude: business.longitude,
          languages: business.languages,
          businessHours: business.businessHours,
          hasParking: business.hasParking || false,
          acceptsCrypto: business.acceptsCrypto || false,
          rating: business.rating || 0,
          reviewCount: business.reviewCount || 0,
          status: 'ACTIVE',
          ownerId: user.id
        }
      });
    }
  }

  console.log('‚úÖ Seed completed successfully!');
  console.log(`üìä Final stats:`);
  console.log(`  - ${US_STATES.length} states (51 total)`);
  console.log(`  - ${categories.length} business categories`);
  console.log(`  - ${ALL_CITIES.length} cities (covering all major US cities)`);
  console.log(`  - ${RUSSIAN_SPEAKING_CITIES.length} Russian-speaking priority cities`);
  console.log(`  - ${OTHER_MAJOR_CITIES.length} other major cities`);
  console.log(`  - ${sampleBusinesses.length} sample businesses`);
  console.log(`  - 1 test user`);
  console.log('üéØ Database ready for 3GIS production!');
}

main()
  .then(async () => {
    await prisma.$disconnect();
  })
  .catch(async (e) => {
    console.error(e);
    await prisma.$disconnect();
    process.exit(1);
  });
