generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id         Int                @id @default(autoincrement())
  telegramId String             @unique
  username   String?
  firstName  String             @default("")
  lastName   String             @default("")
  role       UserRole           @default(USER)
  avatar     String?
  
  // Геолокация пользователя
  latitude   Float?
  longitude  Float?
  cityId     Int?
  
  // Премиум статус и активность
  isPremium  Boolean            @default(false)
  premiumUntil DateTime?
  lastSeenAt DateTime           @default(now())
  
  // Настройки пользователя
  settings   Json?              // {notifications: {...}, privacy: {...}}
  
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt
  
  // Связи
  favorites  BusinessFavorite[]
  reviews    BusinessReview[]
  businesses Business[]         @relation("BusinessOwner")
  city       City?              @relation(fields: [cityId], references: [id])

  @@map("users")
}

model Business {
  id            Int                @id @default(autoincrement())
  name          String
  nameEn        String?
  description   String?
  descriptionEn String?
  categoryId    Int
  address       String
  cityId        Int
  stateId       String // Связь со штатом
  zipCode       String?
  phone         String?
  website       String?
  email         String?
  latitude      Float?
  longitude     Float?
  businessHours Json?
  languages     String[]           @default(["ru", "en"])
  acceptsCrypto Boolean            @default(false)
  hasParking    Boolean            @default(false)
  hasWiFi       Boolean            @default(false)
  hasDelivery   Boolean            @default(false)
  acceptsCards  Boolean            @default(false)
  isAccessible  Boolean            @default(false)
  status        BusinessStatus     @default(PENDING)
  isVerified    Boolean            @default(false)
  premiumTier   PremiumTier        @default(FREE)
  premiumUntil  DateTime?
  viewCount     Int                @default(0)
  rating        Float              @default(0)
  reviewCount   Int                @default(0)
  ownerId       Int
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  favorites     BusinessFavorite[]
  photos        BusinessPhoto[]
  reviews       BusinessReview[]
  subscriptions BusinessSubscription[]
  category      BusinessCategory   @relation(fields: [categoryId], references: [id])
  city          City               @relation(fields: [cityId], references: [id])
  state         State              @relation(fields: [stateId], references: [id])
  owner         User               @relation("BusinessOwner", fields: [ownerId], references: [id])

  @@map("businesses")
}

model BusinessCategory {
  id          Int        @id @default(autoincrement())
  name        String     @unique
  nameEn      String     @unique
  slug        String     @unique
  icon        String
  description String?
  order       Int        @default(0)
  businesses  Business[]

  @@map("business_categories")
}

model State {
  id       String @id // "NY", "CA", "TX", etc.
  name     String @unique // "New York", "California"
  fullName String // "New York"
  region   String // "Northeast", "South", "Midwest", "West"
  
  cities     City[]
  businesses Business[]
  
  @@map("states")
}

model City {
  id         Int    @id @default(autoincrement())
  name       String
  stateId    String // Связь со штатом
  country    String @default("USA")
  latitude   Float?
  longitude  Float?
  population Int?
  
  state      State      @relation(fields: [stateId], references: [id])
  businesses Business[]
  users      User[]
  
  @@unique([name, stateId]) // Город уникален в рамках штата
  @@map("cities")
}

model BusinessPhoto {
  id         Int      @id @default(autoincrement())
  url        String
  caption    String?
  order      Int      @default(0)
  businessId Int
  
  // AWS S3 метаданные
  s3Key      String?  // ключ файла в S3
  fileSize   Int?     // размер файла в байтах
  format     String?  // формат файла (webp, jpg, png)
  width      Int?     // ширина изображения
  height     Int?     // высота изображения
  
  createdAt  DateTime @default(now())
  business   Business @relation(fields: [businessId], references: [id])

  @@map("business_photos")
}

model BusinessReview {
  id         Int      @id @default(autoincrement())
  rating     Int
  comment    String?
  isVerified Boolean  @default(false)
  businessId Int
  userId     Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  business   Business @relation(fields: [businessId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@unique([businessId, userId])
  @@map("business_reviews")
}

model BusinessFavorite {
  id         Int      @id @default(autoincrement())
  businessId Int
  userId     Int
  createdAt  DateTime @default(now())
  business   Business @relation(fields: [businessId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@unique([businessId, userId])
  @@map("business_favorites")
}

// Модель подписок для Telegram Stars
model BusinessSubscription {
  id              Int           @id @default(autoincrement())
  business        Business      @relation(fields: [businessId], references: [id])
  businessId      Int
  
  // Детали подписки
  tier            PremiumTier   // BASIC, STANDARD, PREMIUM
  startDate       DateTime      @default(now())
  endDate         DateTime
  
  // Детали платежа Telegram Stars
  starsAmount     Int           // Сумма в Stars
  dollarPrice     Int           // Эквивалент в долларах (центы)
  invoiceId       String?       // ID счета из Telegram
  
  // Статус
  status          SubscriptionStatus @default(PENDING)
  paymentStatus   PaymentStatus      @default(PENDING)
  
  // Метаданные
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  // Связи
  transactions    PaymentTransaction[]
  
  @@map("business_subscriptions")
}

// Модель транзакций платежей
model PaymentTransaction {
  id                String        @id @default(uuid())
  
  // Связь с подпиской (опционально для донатов)
  subscription      BusinessSubscription? @relation(fields: [subscriptionId], references: [id])
  subscriptionId    Int?
  
  // Связь с донатом (опционально)
  donation          Donation?     @relation(fields: [donationId], references: [id])
  donationId        String?
  
  // Telegram данные
  telegramInvoiceId String?       // Telegram invoice ID
  telegramPaymentId String?       // Telegram payment charge ID
  starsAmount       Int           // Сумма в Stars
  
  // Статус платежа
  status            PaymentStatus @default(PENDING)
  
  // Временные метки
  createdAt         DateTime      @default(now())
  paidAt            DateTime?
  
  // Дополнительные данные
  telegramUserId    String        // ID пользователя Telegram
  metadata          Json?         // Дополнительная информация
  
  @@map("payment_transactions")
}

// Модель донатов от пользователей
model Donation {
  id              String        @id @default(uuid())
  type            String        // coffee, lunch, support, custom
  starsAmount     Int
  message         String?       // Сообщение от донатера
  
  // Telegram данные
  telegramUserId  String?       // ID пользователя Telegram
  telegramInvoiceId String?     // Telegram invoice ID
  
  // Статус
  status          PaymentStatus @default(PENDING)
  
  // Временные метки
  createdAt       DateTime      @default(now())
  paidAt          DateTime?
  
  // Связи
  transactions    PaymentTransaction[]
  
  @@map("donations")
}

enum UserRole {
  GUEST
  USER
  BUSINESS_OWNER
  ADMIN
}

enum BusinessStatus {
  PENDING
  ACTIVE
  SUSPENDED
  REJECTED
}

enum PremiumTier {
  FREE
  BASIC
  STANDARD
  PREMIUM
}

enum SubscriptionStatus {
  PENDING     // Ожидает оплаты
  ACTIVE      // Активна
  EXPIRED     // Истекла
  CANCELLED   // Отменена
}

enum PaymentStatus {
  PENDING     // Ожидает оплаты
  PROCESSING  // Обрабатывается
  PAID        // Оплачено
  FAILED      // Ошибка оплаты
  REFUNDED    // Возвращено
}
