generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id         Int                @id @default(autoincrement())
  telegramId String             @unique
  username   String?
  firstName  String             @default("")
  lastName   String             @default("")
  role       UserRole           @default(USER)
  avatar     String?
  
  // Геолокация пользователя
  latitude   Float?
  longitude  Float?
  cityId     Int?
  
  // Премиум статус и активность
  isPremium  Boolean            @default(false)
  premiumUntil DateTime?
  lastSeenAt DateTime           @default(now())
  
  // Язык интерфейса
  language   String             @default("ru") // ru, en
  
  // Настройки пользователя
  settings   Json?              // {notifications: {...}, privacy: {...}}
  
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt
  
  // Связи
  favorites         BusinessFavorite[]
  reviews           BusinessReview[]
  businesses        Business[]         @relation("BusinessOwner")
  city              City?              @relation(fields: [cityId], references: [id])
  
  // Связи с чатами
  chatFavorites     ChatFavorite[]
  moderatedChats    TelegramChat[]     @relation("ChatModerator")
  submittedChats    TelegramChat[]     @relation("ChatSubmitter")
  
  // Связи с системой шеринга
  shareAnalytics    ShareAnalytics[]
  
  // Связь с блогом
  blogPosts         BlogPost[]        @relation("BlogAuthor")

  @@map("users")
}

model Business {
  id            Int                @id @default(autoincrement())
  name          String
  nameEn        String?
  description   String?
  descriptionEn String?
  categoryId    Int
  address       String
  cityId        Int
  stateId       String // Связь со штатом
  zipCode       String?
  phone         String?
  website       String?
  email         String?
  latitude      Float?
  longitude     Float?
  businessHours Json?
  languages     String[]           @default(["ru", "en"])
  acceptsCrypto Boolean            @default(false)
  hasParking    Boolean            @default(false)
  hasWiFi       Boolean            @default(false)
  hasDelivery   Boolean            @default(false)
  acceptsCards  Boolean            @default(false)
  isAccessible  Boolean            @default(false)
  status        BusinessStatus     @default(PENDING)
  isVerified    Boolean            @default(false)
  premiumTier   PremiumTier        @default(FREE)
  premiumUntil  DateTime?
  viewCount     Int                @default(0)
  rating        Float              @default(0)
  reviewCount   Int                @default(0)
  ownerId       Int
  
  // SEO и система шеринга
  slug          String?            @unique // URL-friendly slug
  shareCount    Int                @default(0) @map("share_count") // Количество шерингов
  
  // Мета-данные для социальных сетей
  ogTitle       String?            @map("og_title")       // Заголовок для OpenGraph
  ogDescription String?            @map("og_description") // Описание для OpenGraph
  ogImage       String?            @map("og_image")       // Изображение для соц. сетей
  
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  favorites     BusinessFavorite[]
  photos        BusinessPhoto[]
  reviews       BusinessReview[]
  subscriptions BusinessSubscription[]
  shareAnalytics ShareAnalytics[]  // Аналитика шеринга
  
  // Связь с блогом
  blogPosts     BlogPostBusiness[]  // Обратная связь к many-to-many
  
  category      BusinessCategory   @relation(fields: [categoryId], references: [id])
  city          City               @relation(fields: [cityId], references: [id])
  state         State              @relation(fields: [stateId], references: [id])
  owner         User               @relation("BusinessOwner", fields: [ownerId], references: [id])

  @@map("businesses")
}

model BusinessCategory {
  id          Int        @id @default(autoincrement())
  name        String     @unique
  nameEn      String     @unique
  slug        String     @unique
  icon        String
  description String?
  order       Int        @default(0)
  businesses  Business[]

  @@map("business_categories")
}

model State {
  id       String @id // "NY", "CA", "TX", etc.
  name     String @unique // "New York", "California"
  fullName String // "New York"
  region   String // "Northeast", "South", "Midwest", "West"
  
  cities        City[]
  businesses    Business[]
  telegramChats TelegramChat[]
  
  @@map("states")
}

model City {
  id         Int    @id @default(autoincrement())
  name       String
  stateId    String // Связь со штатом
  country    String @default("USA")
  latitude   Float?
  longitude  Float?
  population Int?
  
  state         State           @relation(fields: [stateId], references: [id])
  businesses    Business[]
  users         User[]
  telegramChats TelegramChat[]
  
  @@unique([name, stateId]) // Город уникален в рамках штата
  @@map("cities")
}

model BusinessPhoto {
  id         Int      @id @default(autoincrement())
  url        String
  caption    String?
  order      Int      @default(0)
  businessId Int
  
  // AWS S3 метаданные
  s3Key      String?  // ключ файла в S3
  fileSize   Int?     // размер файла в байтах
  format     String?  // формат файла (webp, jpg, png)
  width      Int?     // ширина изображения
  height     Int?     // высота изображения
  
  createdAt  DateTime @default(now())
  business   Business @relation(fields: [businessId], references: [id])

  @@map("business_photos")
}

model BusinessReview {
  id         Int      @id @default(autoincrement())
  rating     Int
  comment    String?
  isVerified Boolean  @default(false)
  businessId Int
  userId     Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  business   Business @relation(fields: [businessId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@unique([businessId, userId])
  @@map("business_reviews")
}

model BusinessFavorite {
  id         Int      @id @default(autoincrement())
  businessId Int
  userId     Int
  createdAt  DateTime @default(now())
  business   Business @relation(fields: [businessId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@unique([businessId, userId])
  @@map("business_favorites")
}

// Модель подписок для Telegram Stars
model BusinessSubscription {
  id              Int           @id @default(autoincrement())
  business        Business      @relation(fields: [businessId], references: [id])
  businessId      Int
  
  // Детали подписки
  tier            PremiumTier   // BASIC, STANDARD, PREMIUM
  startDate       DateTime      @default(now())
  endDate         DateTime
  
  // Детали платежа Telegram Stars
  starsAmount     Int           // Сумма в Stars
  dollarPrice     Int           // Эквивалент в долларах (центы)
  invoiceId       String?       // ID счета из Telegram
  
  // Статус
  status          SubscriptionStatus @default(PENDING)
  paymentStatus   PaymentStatus      @default(PENDING)
  
  // Метаданные
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  // Связи
  transactions    PaymentTransaction[]
  
  @@map("business_subscriptions")
}

// Модель транзакций платежей
model PaymentTransaction {
  id                String        @id @default(uuid())
  
  // Связь с подпиской (опционально для донатов)
  subscription      BusinessSubscription? @relation(fields: [subscriptionId], references: [id])
  subscriptionId    Int?
  
  // Связь с донатом (опционально)
  donation          Donation?     @relation(fields: [donationId], references: [id])
  donationId        String?
  
  // Telegram данные
  telegramInvoiceId String?       // Telegram invoice ID
  telegramPaymentId String?       // Telegram payment charge ID
  starsAmount       Int           // Сумма в Stars
  
  // Статус платежа
  status            PaymentStatus @default(PENDING)
  
  // Временные метки
  createdAt         DateTime      @default(now())
  paidAt            DateTime?
  
  // Дополнительные данные
  telegramUserId    String        // ID пользователя Telegram
  metadata          Json?         // Дополнительная информация
  
  @@map("payment_transactions")
}

// Модель донатов от пользователей
model Donation {
  id              String        @id @default(uuid())
  type            String        // coffee, lunch, support, custom
  starsAmount     Int
  message         String?       // Сообщение от донатера
  
  // Telegram данные
  telegramUserId  String?       // ID пользователя Telegram
  telegramInvoiceId String?     // Telegram invoice ID
  
  // Статус
  status          PaymentStatus @default(PENDING)
  
  // Временные метки
  createdAt       DateTime      @default(now())
  paidAt          DateTime?
  
  // Связи
  transactions    PaymentTransaction[]
  
  @@map("donations")
}

// Модель Telegram-чатов
model TelegramChat {
  id            Int            @id @default(autoincrement())
  title         String         // "NYC Russian Community"
  description   String?        // Описание группы
  username      String?        // nyc_russian (без @)
  inviteLink    String?        // https://t.me/+xxxxx или https://t.me/username
  
  // Тип чата
  type          ChatType       @default(GROUP)
  
  // Локация
  city          City?          @relation(fields: [cityId], references: [id])
  cityId        Int?
  state         State?         @relation(fields: [stateId], references: [id])
  stateId       String?
  
  // Простая тематика
  topic         String?        // "Общение", "Работа", "Недвижимость"
  
  // Метаданные
  memberCount   Int            @default(0)
  isVerified    Boolean        @default(false)
  isActive      Boolean        @default(true)
  
  // Статистика
  viewCount     Int            @default(0)
  joinCount     Int            @default(0)
  
  // SEO и система шеринга
  slug          String?        @unique // URL-friendly slug
  shareCount    Int            @default(0) @map("share_count") // Количество шерингов
  
  // Мета-данные для социальных сетей
  ogTitle       String?        @map("og_title")       // Заголовок для OpenGraph
  ogDescription String?        @map("og_description") // Описание для OpenGraph
  ogImage       String?        @map("og_image")       // Изображение для соц. сетей
  
  // Модерация
  status        ChatStatus     @default(PENDING)
  moderatedBy   User?          @relation("ChatModerator", fields: [moderatedById], references: [id])
  moderatedById Int?
  moderationNote String?       // Заметки модератора
  
  // Предложения от пользователей
  submittedBy   User?          @relation("ChatSubmitter", fields: [submittedById], references: [id])
  submittedById Int?           // ID пользователя, который предложил чат
  submissionNote String?       // Комментарий при предложении чата
  
  // Связи
  favorites     ChatFavorite[]
  shareAnalytics ShareAnalytics[] // Аналитика шеринга
  
  // Связь с блогом
  blogPosts     BlogPostChat[]   // Обратная связь к many-to-many
  
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  
  @@map("telegram_chats")
}

model ChatFavorite {
  id        Int            @id @default(autoincrement())
  chat      TelegramChat   @relation(fields: [chatId], references: [id])
  chatId    Int
  user      User           @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime       @default(now())
  
  @@unique([chatId, userId])
  @@map("chat_favorites")
}

enum UserRole {
  GUEST
  USER
  BUSINESS_OWNER
  ADMIN
}

enum BusinessStatus {
  PENDING
  ACTIVE
  SUSPENDED
  REJECTED
}

enum PremiumTier {
  FREE
  BASIC
  STANDARD
  PREMIUM
}

enum SubscriptionStatus {
  PENDING     // Ожидает оплаты
  ACTIVE      // Активна
  EXPIRED     // Истекла
  CANCELLED   // Отменена
}

enum PaymentStatus {
  PENDING     // Ожидает оплаты
  PROCESSING  // Обрабатывается
  PAID        // Оплачено
  FAILED      // Ошибка оплаты
  REFUNDED    // Возвращено
}

enum ChatType {
  GROUP     // Группы
  CHAT      // Чаты
  CHANNEL   // Каналы
}

enum ChatStatus {
  PENDING   // На модерации
  ACTIVE    // Одобрен
  REJECTED  // Отклонен
}

// Новая модель для аналитики шеринга
model ShareAnalytics {
  id          Int      @id @default(autoincrement())
  
  // Что шерили
  entityType  ShareEntityType  @map("entityType") // BUSINESS, CHAT
  entityId    Int              @map("entityId")
  
  // Связи с сущностями
  business    Business?        @relation(fields: [businessId], references: [id])
  businessId  Int?             @map("businessId")
  chat        TelegramChat?    @relation(fields: [chatId], references: [id])
  chatId      Int?             @map("chatId")
  
  // Откуда пришли
  referrer    String?   @map("referrer")       // Источник перехода
  userAgent   String?   @map("userAgent")     // Браузер/устройство
  ipAddress   String?   @map("ipAddress")     // IP для географии (анонимно)
  
  // UTM метки
  utmSource   String?   @map("utmSource")     // utm_source
  utmMedium   String?   @map("utmMedium")     // utm_medium
  utmCampaign String?   @map("utmCampaign")   // utm_campaign
  
  // Пользователь (если авторизован)
  user        User?     @relation(fields: [userId], references: [id])
  userId      Int?      @map("userId")
  
  // Действие
  action      ShareAction @default(LINK_CREATED)
  
  // Временные метки
  createdAt   DateTime  @default(now()) @map("createdAt")
  
  @@map("share_analytics")
}

// Новые enum'ы для системы шеринга
enum ShareEntityType {
  BUSINESS
  CHAT
}

enum ShareAction {
  LINK_CREATED     // Ссылка создана
  LINK_CLICKED     // По ссылке кликнули
  SOCIAL_SHARED    // Поделились в соц. сети
  APP_OPENED       // Открыли TMA из share-ссылки
  QR_SCANNED       // QR-код отсканирован
}

// === БЛОГ СИСТЕМА ===

model BlogPost {
  id          Int      @id @default(autoincrement())
  
  // Основная информация (только русский)
  title       String
  slug        String   @unique
  excerpt     String   // Краткое описание для превью
  content     String   // Markdown контент
  
  // SEO поля
  metaTitle       String?
  metaDescription String?
  keywords        String[]  @default([])
  readingTime     Int?      // автоматический расчет
  
  // Изображения
  featuredImage   String?   // S3 URL
  featuredImageAlt String?
  
  // Категория
  category    BlogCategory @relation(fields: [categoryId], references: [id])
  categoryId  Int
  
  // Статус
  status      BlogStatus   @default(DRAFT)
  publishedAt DateTime?
  
  // Автор (только админ)
  author      User         @relation("BlogAuthor", fields: [authorId], references: [id])
  authorId    Int
  
  // Статистика
  viewCount   Int          @default(0)
  
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  
  // Связи с заведениями и чатами
  mentionedBusinesses BlogPostBusiness[] // Обратная связь к many-to-many
  mentionedChats     BlogPostChat[]     // Обратная связь к many-to-many
  
  @@map("blog_posts")
}

model BlogCategory {
  id          Int        @id @default(autoincrement())
  name        String     @unique
  slug        String     @unique
  description String?
  color       String     @default("#3B82F6")
  
  posts       BlogPost[]
  createdAt   DateTime   @default(now())
  
  @@map("blog_categories")
}

// Many-to-many связи
model BlogPostBusiness {
  blogPost   BlogPost @relation(fields: [blogPostId], references: [id])
  blogPostId Int
  business   Business @relation(fields: [businessId], references: [id])
  businessId Int
  
  @@id([blogPostId, businessId])
  @@map("blog_post_businesses")
}

model BlogPostChat {
  blogPost   BlogPost     @relation(fields: [blogPostId], references: [id])
  blogPostId Int
  chat       TelegramChat @relation(fields: [chatId], references: [id])
  chatId     Int
  
  @@id([blogPostId, chatId])
  @@map("blog_post_chats")
}

enum BlogStatus {
  DRAFT     // Черновик
  PUBLISHED // Опубликовано
}
